{"version":3,"file":"bach-js.esm.js","sources":["../src/validate.js","../src/data.js","../src/note.js","../src/math.js","../node_modules/segu/dist/segu.esm.js","../src/durations.js","../src/elements.js","../src/beats.js","../src/music.js"],"sourcesContent":["import schema from 'bach-json-schema'\nimport Ajv from 'ajv'\n\nconst ajv = new Ajv({ strictTuples: false })\n\nexport const validate = ajv.compile(schema)\n\nexport const valid = bach => {\n  if (!validate(bach)) {\n    const message = 'Invalid Bach.JSON source data'\n    const pretty = json => JSON.stringify(json, null, 2)\n\n    console.error(message, pretty(bach))\n    console.error(pretty(validate.errors))\n\n    throw TypeError(`Invalid Bach.JSON source data`)\n  }\n\n  return bach\n}\n\nexport default validate\n","import bach from 'bach-cljs'\nimport { Note } from './note'\nimport { valid } from './validate'\nimport {\n  scale as teoriaScale,\n  chord as teoriaChord,\n  Scale as TeoriaScale,\n  Chord as TeoriaChord\n} from 'teoria'\n\n/**\n * Either \"composes\" raw bach data into bach.json or, when provided an object, validates its structure as bach.json.\n * Given a string, automatically upgrades source to v3 (simple replacement of !play with play!).\n * Main entry point for integrating with core bach ClojureScript library.\n */\nexport const compose = (source, strict = true) => {\n  if (typeof source === 'string') {\n    const upgraded = source.replace(/!play/i, 'play!')\n\n    return bach.compose(upgraded)\n  }\n\n  if (typeof source === 'object') {\n    return strict ? valid(source) : source\n  }\n\n  throw TypeError(`Unsupported Bach.JSON data type (${typeof source}). Must be a bach.json object or raw bach string.`)\n}\n\nexport function scaleify (value) {\n  if (typeof value === 'string') {\n    const [tonic, type] = value.split(' ')\n\n    // TODO: Potentially use type.toLowerCase instead, to guarantee smooth interopability\n    return teoriaScale(tonic, type.toLowerCase())\n  } else if (value instanceof TeoriaScale) {\n    return value\n  }\n\n  throw TypeError(`Unknown scale type (${typeof value}): ${value}`)\n}\n\nexport function chordify (value) {\n  if (typeof value === 'string') {\n    return teoriaChord(value)\n  } else if (value instanceof TeoriaChord) {\n    return value\n  }\n\n  throw TypeError(`Unknown chord type (${typeof value}): ${value}`)\n}\n\nexport function scaleToString (scale) {\n  return `${scale.tonic.toString().slice(0,2)} ${scale.name}`\n}\n\nexport function notesInChord (value) {\n  return chordify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesInScale (value) {\n  return scaleify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesIn (kind, value) {\n  const notes = notesOf[kind]\n\n  if (notes) {\n    return notes(value)\n  }\n\n  return []\n}\n\n// TODO: Allow custom note resolvers to be registered globally or locally so people can easily define their own semantics\n//  - Could call this `itemsOf` to be more generic and flexible\nexport const notesOf = {\n  note:  value => [value],\n  chord: value => notesInChord(value),\n  scale: value => notesInScale(value),\n  penta: value => notesInScale(value)\n}\n\n// TODO: Note.valueOf\nexport function notesIntersect (left, right) {\n return left.filter(note => right.includes(note))\n}\n","import { note as teoriaNote, Note as TeoriaNote } from 'teoria'\nimport { notesIn } from './data'\n\n// TODO: Replce with individual functions and remove class, no longer necessary\n// TODO: Remove cyclic reference between data module by bringing in all note related functions.\nexport class Note {\n\n  static parse (value) {\n    if (typeof value === 'string') {\n      return teoriaNote(value)\n    } else if (typeof value === 'object' || value instanceof TeoriaNote) {\n      return value\n    }\n\n    throw TypeError(`Unknown note type (${typeof value}): ${value}`)\n  }\n\n  static all (kind, note) {\n    try {\n      return notesIn(kind, note)\n    } catch (e) {\n      return []\n    }\n  }\n\n  static hash (note) {\n    return Note.parse(note).chroma()\n  }\n\n  static pitchOf (note) {\n    return Note.valueOf(note)\n  }\n\n  // TODO: Consider using chroma instead\n  // TODO: Use this in nek, and anywhere else this same logic might be used\n  static valueOf (note) {\n    return Note.parse(note)\n      .scientific()\n      // .toLowerCase()\n      // TODO: Centralize! Replace everywhere in bach-sheet, nek, etc.\n      .replace(/[0-9]+$/, '')\n  }\n\n  static valuesOf (notes) {\n    return notes.map(Note.valueOf)\n  }\n\n  static generalize (note) {\n    return teoriaNote(Note.valueOf(note))\n  }\n\n  static unite (notes = []) {\n    return [...new Set(Note.valuesOf(notes))]\n  }\n\n  static equals (left, right) {\n    return Note.hash(left) == Note.hash(right)\n  }\n\n}\n","/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} a\n * @param {Number} b\n * @returns {Number}\n */\nexport function gcd (a, b) {\n  if (b == 0) {\n    return a\n  }\n\n  return gcd(b, a % b)\n}\n\n/**\n * Modifies a value so that it is always between the provided min and max\n *\n * @param {Number} value\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nexport function clamp (value, min = 0, max = 1) {\n  return Math.min(max, Math.max(min, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nexport function invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nexport function steps (ratio, all) {\n  ratio %= 1\n\n  if (ratio < 0) ratio += 1\n\n  return all[Math.floor(ratio * all.length)]\n}\n","class Lens {\n\n  constructor ({\n    unit = 1,\n    is = 1,\n    as = 1,\n    min = 0,\n    max = 1,\n    grid = 1,\n    origin = 0\n  } = {}) {\n    this.data = { unit, is, as, min, max, grid, origin };\n    // Would improve flexibility by wrapping all getters in Lens with this, allowing Units and Lens to use the same normalization function\n    // this.normalize = normalize || Units.normalize\n  }\n\n  get unit () {\n    return this.data.unit || this.data.is || 1\n  }\n\n  get is () {\n    return this.data.is || this.unit\n  }\n\n  get as () {\n    return this.data.as || this.unit\n  }\n\n  get min () {\n    return this.data.min || 0\n  }\n\n  get max () {\n    return this.data.max || Number.MAX_SAFE_INTEGER\n  }\n\n  get grid () {\n    return this.data.grid || 1\n  }\n\n  get origin () {\n    return this.data.origin || 0\n  }\n\n  use (data) {\n    return Object.assign({}, this.data, data)\n  }\n\n  assign (data) {\n    this.data = this.use(data);\n\n    return this\n  }\n\n}\n\n/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction gcd (x, y) {\n  return y === 0 ? x : gcd(y, x % y)\n}\n\n/**\n * Modifies a value so that it is always between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction clamp (value, x = 0, y = 1) {\n  return Math.min(y, Math.max(x, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nfunction invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Cycles a value around an range (from x to y).\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n*/\nfunction cyclic (value, x, y) {\n  return (value >= x ? value : value + y) % y\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nfunction steps (ratio, all) {\n  ratio %= 1;\n\n  if (ratio < 0) ratio += 1;\n\n  return all[Math.floor(ratio * all.length)]\n}\n\nclass Units {\n\n  constructor ({\n    map = {},\n    lens = {}\n  } = {}) {\n    this.map = map;\n    this.lens = new Lens(lens);\n  }\n\n  normalize (unit) {\n    if (typeof unit === 'number') {\n      return unit\n    }\n\n    if (typeof unit === 'string') {\n      const value = this.map[unit] || 1;\n\n      return typeof value === 'function' ? value(unit) : Number(value)\n    }\n\n    return 1\n  }\n\n  scope (value = 1, lens = this.lens) {\n    const { is, as, min, max, origin } = this.lens.use(lens);\n    const index = this.cast(value - origin, { is, as });\n    const head = this.cast(min || 0, { is, as });\n    const tail = this.cast(max || value, { is, as });\n\n    return { value, index, head, tail }\n  }\n\n  cast (value = 1, { is = this.lens.unit, as = this.lens.unit } = {}) {\n  // cast (value = 1, { is = this.lens.is, as = this.lens.as } = {}) {\n    return this.normalize(value) / (this.normalize(as) / this.normalize(is))\n  }\n\n  snap (value = 1, { to = this.lens.unit, calc = Math.floor } = {}) {\n    const unit = this.normalize(to);\n    const adjust = typeof calc === 'function' ? calc : _ => _;\n    const output = adjust(value / unit) * unit;\n\n    return this.normalize(output || 0)\n  }\n\n  clamp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return clamp(index, head, tail)\n  }\n\n  cyclic (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return cyclic(index, head, tail)\n  }\n\n  lerp (ratio, lens) {\n    const { head, tail } = this.scope(0, lens);\n\n    return lerp(ratio, head, tail)\n  }\n\n  invlerp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return invlerp(index, head, tail)\n  }\n\n  delta (value, lens) {\n    const { index, head } = this.scope(value, lens);\n\n    return index - head\n  }\n\n  range (value, lens) {\n    const { head, tail } = this.scope(value, lens);\n\n    return tail - head\n  }\n\n  progress (value, lens) {\n    const delta = this.delta(value, lens);\n    const range = this.range(value, lens);\n\n    return delta / range\n  }\n\n  fold (value, lens = this.lens) {\n    const grid = lens.grid || 1;\n    const basis = gcd(value, grid);\n    const size = this.clamp(value, lens);\n    const container = this.snap(size, { to: basis });\n    const ratio = Math.max(1, Math.min(value / basis, grid));\n    const min = value >= grid ? grid : basis;\n\n    return Math.max(min, this.snap(container, { to: ratio }))\n  }\n\n  // Changes the base unit to the provided key by recalculating and replacing the unit map pairs.\n  // TODO: Test, and ensure that the base unit is equal to 1 (or, could just use scale)\n  rebase (unit = this.lens.unit) {\n    if (unit === this.lens.unit) return this\n\n    const map = Object.entries(this.map)\n      .reduce((map, [key, value]) => Object.assign(map, {\n        [key]: this.cast(value, { is: this.lens.is, as: unit })\n      }, { [unit]: 1 }));\n\n    this.map = map;\n    this.lens.unit = unit;\n\n    return this\n  }\n\n  clone (props) {\n    const map = Object.assign({}, this.map, props.map);\n    const lens = Object.assign({}, this.lens, props.lens);\n\n    return new Units({ map, lens })\n  }\n\n  static use (props) {\n    return new Units(props)\n  }\n}\n\nconst units = props => new Units(props);\n\nexport { Units, clamp, cyclic, gcd, invlerp, lerp, steps, units };\n//# sourceMappingURL=segu.esm.js.map\n","import { compose } from './data'\nimport { gcd, clamp, lerp } from './math'\nimport { Units } from 'segu'\n\n/**\n * Provides essential duration values and calculations of a bach track.\n * Enables trivial conversions between any duration unit via cast (based\n * on milliseconds) and unitize (based on steps, bach's iteration unit).\n */\nexport class Durations extends Units {\n\n  constructor (source, lens) {\n    super({ map: null, lens })\n\n    this.source = source\n    this.data = compose(source)\n\n    this.init()\n  }\n\n  init () {\n    this.map = Durations.map(this.data)\n\n    this.lens.assign({ unit: 'step', max: this.total })\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get steps () {\n    return this.data.steps\n  }\n\n  get bar () {\n    return this.units.bar\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get min () {\n    return this.metrics.min\n  }\n\n  get max () {\n    return this.metrics.max\n  }\n\n  get total () {\n    return this.metrics.total\n  }\n\n  at (duration, is = 'step') {\n    const step = Math.floor(this.cast(duration, { is, as: 'step' }))\n    const index = this.cyclic(step)\n    const state = this.steps[index]\n    const [context, play, stop] = state || []\n\n    return {\n      beat: context[0],\n      elems: context.slice(1),\n      play,\n      stop,\n      index\n    }\n  }\n\n  metronize (duration, { is = 'ms', as = 'pulse' } = {}) {\n    const index = this.cast(duration, { is, as })\n    const bar = this.cast(this.bar.step, { as })\n\n    return Math.floor(index % bar)\n  }\n\n  // TODO: Either replace or improve via inspiration with this:\n  // @see: https://tonejs.github.io/docs/r13/Time#quantize\n  rhythmic (duration, {\n    is = 'ms',\n    units = ['8n', '4n'],\n    calc = 'floor',\n    size = 'min'\n  } = {}) {\n    const durations = units\n      .map(unit => {\n        const value = this.cast(duration, { is, as: unit })\n        const result = Math[calc](value)\n\n        return this.cast(result, { is: unit, as: is })\n      })\n      .sort((a, b) => Math.abs(duration - a) - Math.abs(duration - b))\n\n    return Math[size](...durations)\n  }\n\n  static map (source) {\n    const data = compose(source, false)\n    const { beat, step, pulse, time, bar } = data.units\n\n    return {\n      step: 1,\n      pulse: 1 / (beat.step / beat.pulse),\n      bar: bar.step,\n      ms: 1 / time.step,\n      second: (1 / time.step) * 1000,\n      's': step,\n      'p': pulse,\n      'm': bar.step,\n      '2n': bar.step / 2,\n      '4n': bar.step / 4,\n      '8n': bar.step / 8,\n      '16n': bar.step / 16,\n      '32n': bar.step / 32,\n      '64n': bar.step / 64,\n      '4up': bar.step - (bar.step / 4),\n      '8up': bar.step - (bar.step / 8),\n      '16up': bar.step - (bar.step / 16),\n      '32up': bar.step - (bar.step / 32),\n      '64up': bar.step - (bar.step / 64)\n    }\n  }\n\n}\n","import { elementize } from 'bach-cljs'\nimport { note as teoriaNote } from 'teoria'\n\nimport { compose } from './data'\nimport { Note } from './note'\n\n/**\n * Represents a single and unique playable element.\n * Uniqueness and equality are determined by `id`.\n */\nexport class Element {\n\n  constructor (data) {\n    this.data = data\n  }\n\n  get id () {\n    return `${this.data.kind}.${this.data.id}`\n  }\n\n  get uid () {\n    return Element.uid(this.id)\n  }\n\n  get value () {\n    return this.data.value\n  }\n\n  get props () {\n    return this.data.props || []\n  }\n\n  get kind () {\n    return this.data.kind.toLowerCase()\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get notes () {\n    return Note.all(this.kind, this.value)\n  }\n\n  get musical () {\n    return MUSICAL_ELEMENTS.includes(this.kind)\n  }\n\n  static uid (id) {\n    return id.split('.').pop()\n  }\n\n}\n\n/**\n * Provides a centralized and shareable store of parsed elements in a bach track.\n */\nexport class Elements {\n\n  constructor ({ source, store, cast } = {}) {\n    this.source = compose(source)\n    this.cast = cast || (_ => _)\n    this.data = store || Elements.cast(this.source.elements, cast)\n  }\n\n  get all () {\n    return this.kinds.flatMap(kind => this.every(kind))\n  }\n\n  get kinds () {\n    return Object.keys(this.data)\n  }\n\n  get values () {\n    return this.all.map(elem => elem.value)\n  }\n\n  get ids () {\n    return this.all.map(elem => elem.id)\n  }\n\n  get (id) {\n    const parts = typeof id === 'string' ? id.split('.') : []\n\n    if (parts.length === 2) {\n      const [kind, uid] = parts\n      const elem = this.data[kind][uid]\n\n      return elem ? { ...elem, id: uid, kind } : null\n    }\n\n    throw TypeError('Element id must be a string in the format of \"kind.hash\"')\n  }\n\n  one (kind) {\n    return this.every(kind)[0]\n  }\n\n  every (kind) {\n    return Object.values(this.data[kind]).map(elem => new Element(elem))\n  }\n\n  resolve (elem) {\n    // FIXME: Use json-schema validator here instead to support cross-context typing.\n    // if (elem instanceof Element) return elem\n    if (typeof elem === 'object') return elem\n    if (typeof elem === 'string') return this.get(elem)\n    if (Array.isArray(elem)) return elem.map(el => this.get(el))\n    if (elem == null) return null\n\n    throw TypeError('Failed to resolve element due to unsupported data type')\n  }\n\n  // TODO: Rename to `insert`\n  register ({ kind, value, props }) {\n    if (!kind || typeof kind !== 'string') throw TypeError('kind must be a non-empty string')\n    if (value == null) throw TypeError('value must be defined and non-null')\n\n    const elem = elementize(kind, [value, ...props])\n    const uid = Element.uid(elem.id)\n    const record = this.cast({ ...elem, id: uid, kind })\n\n    this.data[kind] = this.data[kind] || {}\n    this.data[kind][uid] = record\n\n    this.source.elements = this.data\n\n    return new Element(record)\n  }\n\n  static cast (elements, as = _ => _) {\n    if (!elements) return null\n\n    // TODO: Validate element shape with JSON Schema\n    return Object.entries(elements)\n      .reduce((acc, [kind, ids]) => {\n        const elems = Object.entries(ids)\n          .reduce((acc, [id, elem]) => ({\n            ...acc,\n            [id]: as({ id, kind, ...elem })\n          }), {})\n\n        return { ...acc, [kind]: elems }\n      }, {})\n  }\n\n}\n\n// TODO: Hoist out to Music, leaky abstraction\nexport const MUSICAL_ELEMENTS = ['note', 'chord', 'scale', ' penta'] // triad\n","import { Element } from './elements'\nimport { Note } from './note'\n\n/**\n * Represents a single beat in a track.\n *\n * Beats are represented as a tuple and may contain multiple elements\n *\n * duration -> items -> elements\n */\nexport class Beat {\n\n  constructor (data, store) {\n    this.data = data\n    this.store = store\n  }\n\n  get id () {\n    return this.data.id\n  }\n\n  get index () {\n    return this.data.index\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get items () {\n    return this.data.items.map(item => ({\n      ...item,\n      elements: item.elements.map(elem => this.store.resolve(elem))\n    }))\n  }\n\n  get elements () {\n    return this.data.items.flatMap(({ elements }) =>\n      elements.map(elem => this.store.resolve(elem))\n    )\n  }\n\n  get kinds () {\n    return this.all(({ kind }) => kind)\n  }\n\n  get values () {\n    return this.all(({ value }) => value)\n  }\n\n  get notes () {\n    return this.notesOf(this.elements)\n  }\n\n  // Provides map of elements in a beat grouped by kind.\n  // WARN: Doesn't support multiple elements of the same kind.\n  get parts () {\n    return this.elements.reduce((parts, elem) => ({\n     ...parts,\n      [elem.kind]: elem\n    }), {})\n  }\n\n  get musical () {\n    return this.elements.every(elem => elem.musical)\n  }\n\n  all (cast = _ => _) {\n    return [...new Set(this.elements.map(cast))]\n  }\n\n  find (kind) {\n    return this.elements.find(elem => kind === elem.kind)\n  }\n\n  filter (kind) {\n    return this.elements.filter(elem => kind === elem.kind)\n  }\n\n  last (kind) {\n    return this.filter(kind).reverse()[0]\n  }\n\n  either (kinds) {\n    return kinds.reduce((acc, kind) => acc.length ? acc : this.filter(kind), [])\n  }\n\n  notesOf (elements) {\n    return Note.unite(elements.flatMap(({ notes }) => notes))\n  }\n\n  static from (beats, store) {\n    if (Array.isArray(beats)) {\n      return beats.map(beat => new Beat(beat, store))\n    }\n\n    return [new Beat(beats, store)]\n  }\n\n}\n","import { Note } from './note'\nimport { Durations } from './durations'\nimport { Element, Elements, MUSICAL_ELEMENTS } from './elements'\nimport { Beat } from './beats'\nimport { compose, notesIn } from './data'\n\nexport class Music {\n\n  constructor (source) {\n    this.assign(source)\n  }\n\n  init () {\n    if (!this.parses) return null\n\n    this.store = new Elements({\n      source: this.data,\n      cast: elem => ({\n        ...elem,\n        notes: Note.all(elem.kind, elem.value)\n      })\n    })\n\n    this.beats = Beat.from(this.data.beats, this.store)\n    this.durations = new Durations(this.data)\n  }\n\n  assign (source) {\n    this.source = source\n    this.data = compose(source)\n\n    this.init()\n\n    return this\n  }\n\n  get headers () {\n    return this.data.headers\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get meter () {\n    return this.headers.meter\n  }\n\n  get tempo () {\n    return this.headers.tempo\n  }\n\n  get elements () {\n    return this.store.all\n  }\n\n  get notes () {\n    return Note.unite(\n      this.beats.flatMap(beat =>\n        beat.elements.flatMap(({ notes }) => notes)\n      )\n    )\n  }\n\n  get musical () {\n    return this.beats.every(beat => beat.musical)\n  }\n\n  get step () {\n    return this.units.beat.step\n  }\n\n  get interval () {\n    return this.units.time.step\n  }\n\n  get parses () {\n    return !this.data.fail\n  }\n\n  at (duration, is = 'step') {\n    const cursor = this.durations.at(duration, is)\n\n    return {\n      beat: this.beats[cursor.beat],\n      elems: this.store.resolve(cursor.elems),\n      play: this.store.resolve(cursor.play),\n      stop: this.store.resolve(cursor.stop)\n    }\n  }\n\n  beat (index) {\n    const cursor = this.durations.cyclic(index, { max: this.beats.length })\n\n    return this.beats[cursor]\n  }\n\n}\n"],"names":["ajv","Ajv","strictTuples","validate","compile","schema","valid","bach","message","pretty","json","console","error","errors","TypeError","compose","source","strict","upgraded","replace","scaleify","value","split","tonic","type","teoriaScale","toLowerCase","TeoriaScale","chordify","teoriaChord","TeoriaChord","scaleToString","scale","toString","name","notesInChord","notes","note","Note","valueOf","notesInScale","notesIn","kind","notesOf","chord","penta","notesIntersect","left","right","teoriaNote","TeoriaNote","e","parse","chroma","scientific","valuesOf","hash","gcd","a","b","clamp","min","max","Math","lerp","ratio","x","y","invlerp","steps","all","floor","length","Lens","unit","is","as","grid","origin","data","use","cyclic","Units","map","lens","Number","index","cast","head","tail","normalize","to","calc","adjust","_","output","scope","delta","range","basis","size","container","snap","key","props","Durations","init","assign","total","units","bar","metrics","duration","step","state","context","play","stop","beat","elems","durations","result","abs","pulse","time","ms","second","Element","id","uid","MUSICAL_ELEMENTS","pop","Elements","store","elements","kinds","elem","parts","get","el","record","acc","ids","Beat","items","item","resolve","musical","unite","beats","Music","parses","from","headers","meter","tempo","fail","cursor","at"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAMA,GAAG,GAAG,IAAIC,eAAJ,CAAQ;AAAEC,IAAAA,YAAY,EAAE;AAAhB,GAAR,CAAZ;AAEY,MAACC,QAAQ,GAAGH,GAAG,CAACI,OAAJ,CAAYC,0BAAZ,CAAZ;;;AAEA,MAACC,KAAK,GAAG,SAARA,KAAQ,CAAAC,IAAI,EAAI;AAC3B,QAAI,CAACJ,QAAQ,CAACI,IAAD,CAAb,EAAqB;AACnB,UAAMC,OAAO,GAAG,+BAAhB;;AACA,UAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,IAAI;AAAA,eAAI,2BAAeA,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAJ;AAAA,OAAnB;;AAEAC,MAAAA,OAAO,CAACC,KAAR,CAAcJ,OAAd,EAAuBC,MAAM,CAACF,IAAD,CAA7B;AACAI,MAAAA,OAAO,CAACC,KAAR,CAAcH,MAAM,CAACN,QAAQ,CAACU,MAAV,CAApB;AAEA,YAAMC,SAAS,iCAAf;AACD;;AAED,WAAOP,IAAP;GAXU;ACGZ;AACA;AACA;AACA;AACA;;;;;AACY,MAACQ,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAA2B;AAAA,QAAlBC,MAAkB,uEAAT,IAAS;;AAChD,QAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAME,QAAQ,GAAGF,MAAM,CAACG,OAAP,CAAe,QAAf,EAAyB,OAAzB,CAAjB;AAEA,aAAOZ,qBAAKQ,OAAL,CAAaG,QAAb,CAAP;AACD;;AAED,QAAI,yBAAOF,MAAP,MAAkB,QAAtB,EAAgC;AAC9B,aAAOC,MAAM,GAAGX,KAAK,CAACU,MAAD,CAAR,GAAmBA,MAAhC;AACD;;AAED,UAAMF,SAAS,qEAA4CE,MAA5C,wDAAf;GAXU;;;;AAcL,WAASI,QAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAC/B,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,yBAAsBA,KAAK,CAACC,KAAN,CAAY,GAAZ,CAAtB;AAAA;AAAA,UAAOC,KAAP;AAAA,UAAcC,IAAd,oBAD6B;;;AAI7B,aAAOC,mBAAYF,KAAZE,EAAmBD,IAAI,CAACE,WAAL,EAAnBD,CAAP;AACD,KALD,MAKO,IAAIJ,KAAK,YAAYM,aAArB,EAAkC;AACvC,aAAON,KAAP;AACD;;AAED,UAAMP,SAAS,2FAA+BO,KAA/B,0BAA0CA,KAA1C,EAAf;AACD;;AAEM,WAASO,QAAT,CAAmBP,KAAnB,EAA0B;AAAA;;AAC/B,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOQ,mBAAYR,KAAZQ,CAAP;AACD,KAFD,MAEO,IAAIR,KAAK,YAAYS,aAArB,EAAkC;AACvC,aAAOT,KAAP;AACD;;AAED,UAAMP,SAAS,4FAA+BO,KAA/B,2BAA0CA,KAA1C,EAAf;AACD;;AAEM,WAASU,aAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AACpC,yDAAU,mCAAAA,KAAK,CAACT,KAAN,CAAYU,QAAZ,oBAA6B,CAA7B,EAA+B,CAA/B,CAAV,wBAA+CD,KAAK,CAACE,IAArD;AACD;;AAEM,WAASC,YAAT,CAAuBd,KAAvB,EAA8B;AAAA;;AACnC,WAAO,iCAAAO,QAAQ,CAACP,KAAD,CAAR,CACJe,KADI,oBAEA,UAAAC,IAAI;AAAA,aAAIC,IAAI,CAACC,OAAL,CAAaF,IAAb,CAAJ;AAAA,KAFJ,CAAP;AAGD;;AAEM,WAASG,YAAT,CAAuBnB,KAAvB,EAA8B;AAAA;;AACnC,WAAO,iCAAAD,QAAQ,CAACC,KAAD,CAAR,CACJe,KADI,oBAEA,UAAAC,IAAI;AAAA,aAAIC,IAAI,CAACC,OAAL,CAAaF,IAAb,CAAJ;AAAA,KAFJ,CAAP;AAGD;;AAEM,WAASI,OAAT,CAAkBC,IAAlB,EAAwBrB,KAAxB,EAA+B;AACpC,QAAMe,KAAK,GAAGO,OAAO,CAACD,IAAD,CAArB;;AAEA,QAAIN,KAAJ,EAAW;AACT,aAAOA,KAAK,CAACf,KAAD,CAAZ;AACD;;AAED,WAAO,EAAP;AACD,IAED;AACA;;;AACY,MAACsB,OAAO,GAAG;AACrBN,IAAAA,IAAI,EAAG,cAAAhB,KAAK;AAAA,aAAI,CAACA,KAAD,CAAJ;AAAA,KADS;AAErBuB,IAAAA,KAAK,EAAE,eAAAvB,KAAK;AAAA,aAAIc,YAAY,CAACd,KAAD,CAAhB;AAAA,KAFS;AAGrBW,IAAAA,KAAK,EAAE,eAAAX,KAAK;AAAA,aAAImB,YAAY,CAACnB,KAAD,CAAhB;AAAA,KAHS;AAIrBwB,IAAAA,KAAK,EAAE,eAAAxB,KAAK;AAAA,aAAImB,YAAY,CAACnB,KAAD,CAAhB;AAAA;AAJS,GAAX,EAOZ;;;;AACO,WAASyB,cAAT,CAAyBC,IAAzB,EAA+BC,KAA/B,EAAsC;AAC5C,WAAO,wBAAAD,IAAI,MAAJ,CAAAA,IAAI,EAAQ,UAAAV,IAAI;AAAA,aAAI,0BAAAW,KAAK,MAAL,CAAAA,KAAK,EAAUX,IAAV,CAAT;AAAA,KAAZ,CAAX;ICtFD;AACA;;;MACaC;;;;;;;aAEX,eAAcjB,KAAd,EAAqB;AAAA;;AACnB,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,iBAAO4B,kBAAW5B,KAAX4B,CAAP;AACD,SAFD,MAEO,IAAI,yBAAO5B,KAAP,MAAiB,QAAjB,IAA6BA,KAAK,YAAY6B,YAAlD,EAA8D;AACnE,iBAAO7B,KAAP;AACD;;AAED,cAAMP,SAAS,2FAA8BO,KAA9B,2BAAyCA,KAAzC,EAAf;AACD;;;aAED,aAAYqB,IAAZ,EAAkBL,IAAlB,EAAwB;AACtB,YAAI;AACF,iBAAOI,OAAO,CAACC,IAAD,EAAOL,IAAP,CAAd;AACD,SAFD,CAEE,OAAOc,CAAP,EAAU;AACV,iBAAO,EAAP;AACD;AACF;;;aAED,cAAad,IAAb,EAAmB;AACjB,eAAOC,IAAI,CAACc,KAAL,CAAWf,IAAX,EAAiBgB,MAAjB,EAAP;AACD;;;aAED,iBAAgBhB,IAAhB,EAAsB;AACpB,eAAOC,IAAI,CAACC,OAAL,CAAaF,IAAb,CAAP;AACD;;;;;aAID,iBAAgBA,IAAhB,EAAsB;AACpB,eAAOC,IAAI,CAACc,KAAL,CAAWf,IAAX,EACJiB,UADI;;AAAA,SAIJnC,OAJI,CAII,SAJJ,EAIe,EAJf,CAAP;AAKD;;;aAED,kBAAiBiB,KAAjB,EAAwB;AACtB,eAAO,qBAAAA,KAAK,MAAL,CAAAA,KAAK,EAAKE,IAAI,CAACC,OAAV,CAAZ;AACD;;;aAED,oBAAmBF,MAAnB,EAAyB;AACvB,eAAOY,kBAAWX,IAAI,CAACC,OAAL,CAAaF,MAAb,CAAXY,CAAP;AACD;;;aAED,iBAA0B;AAAA,YAAZb,KAAY,uEAAJ,EAAI;AACxB,mDAAW,oBAAQE,IAAI,CAACiB,QAAL,CAAcnB,KAAd,CAAR,CAAX;AACD;;;aAED,gBAAeW,IAAf,EAAqBC,KAArB,EAA4B;AAC1B,eAAOV,IAAI,CAACkB,IAAL,CAAUT,IAAV,KAAmBT,IAAI,CAACkB,IAAL,CAAUR,KAAV,CAA1B;AACD;;;;ACzDH;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,WAASS,KAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoB;AACzB,QAAIA,CAAC,IAAI,CAAT,EAAY;AACV,aAAOD,CAAP;AACD;;AAED,WAAOD,KAAG,CAACE,CAAD,EAAID,CAAC,GAAGC,CAAR,CAAV;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,WAASC,OAAT,CAAgBvC,KAAhB,EAAyC;AAAA,QAAlBwC,GAAkB,uEAAZ,CAAY;AAAA,QAATC,GAAS,uEAAH,CAAG;AAC9C,WAAOC,IAAI,CAACF,GAAL,CAASC,GAAT,EAAcC,IAAI,CAACD,GAAL,CAASD,GAAT,EAAcxC,KAAd,CAAd,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,WAAS2C,MAAT,CAAeC,KAAf,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,WAAQD,CAAC,IAAI,IAAID,KAAR,CAAF,GAAqBE,CAAC,GAAGF,KAAhC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEO,WAASG,SAAT,CAAkB/C,KAAlB,EAAyB6C,CAAzB,EAA4BC,CAA5B,EAA+B;AACpC,WAAOP,OAAK,CAAC,CAACvC,KAAK,GAAG6C,CAAT,KAAeC,CAAC,GAAGD,CAAnB,CAAD,CAAZ;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,WAASG,KAAT,CAAgBJ,KAAhB,EAAuBK,GAAvB,EAA4B;AACjCL,IAAAA,KAAK,IAAI,CAAT;AAEA,QAAIA,KAAK,GAAG,CAAZ,EAAeA,KAAK,IAAI,CAAT;AAEf,WAAOK,GAAG,CAACP,IAAI,CAACQ,KAAL,CAAWN,KAAK,GAAGK,GAAG,CAACE,MAAvB,CAAD,CAAV;;;MC/DIC;AAEJ,oBAQQ;AAAA,qFAAJ,EAAI;AAAA,2BAPNC,IAOM;AAAA,UAPNA,IAOM,0BAPC,CAOD;AAAA,yBANNC,EAMM;AAAA,UANNA,EAMM,wBAND,CAMC;AAAA,yBALNC,EAKM;AAAA,UALNA,EAKM,wBALD,CAKC;AAAA,0BAJNf,GAIM;AAAA,UAJNA,GAIM,yBAJA,CAIA;AAAA,0BAHNC,GAGM;AAAA,UAHNA,GAGM,yBAHA,CAGA;AAAA,2BAFNe,IAEM;AAAA,UAFNA,IAEM,0BAFC,CAED;AAAA,6BADNC,MACM;AAAA,UADNA,MACM,4BADG,CACH;;AAAA;AACN,WAAKC,IAAL,GAAY;AAAEL,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,EAAE,EAAFA,EAAR;AAAYC,QAAAA,EAAE,EAAFA,EAAZ;AAAgBf,QAAAA,GAAG,EAAHA,GAAhB;AAAqBC,QAAAA,GAAG,EAAHA,GAArB;AAA0Be,QAAAA,IAAI,EAAJA,IAA1B;AAAgCC,QAAAA,MAAM,EAANA;AAAhC,OAAZ,CADM;;AAIP;;;;WAED,eAAY;AACV,eAAO,KAAKC,IAAL,CAAUL,IAAV,IAAkB,KAAKK,IAAL,CAAUJ,EAA5B,IAAkC,CAAzC;AACD;;;WAED,eAAU;AACR,eAAO,KAAKI,IAAL,CAAUJ,EAAV,IAAgB,KAAKD,IAA5B;AACD;;;WAED,eAAU;AACR,eAAO,KAAKK,IAAL,CAAUH,EAAV,IAAgB,KAAKF,IAA5B;AACD;;;WAED,eAAW;AACT,eAAO,KAAKK,IAAL,CAAUlB,GAAV,IAAiB,CAAxB;AACD;;;WAED,eAAW;AACT,eAAO,KAAKkB,IAAL,CAAUjB,GAAV,8BAAP;AACD;;;WAED,eAAY;AACV,eAAO,KAAKiB,IAAL,CAAUF,IAAV,IAAkB,CAAzB;AACD;;;WAED,eAAc;AACZ,eAAO,KAAKE,IAAL,CAAUD,MAAV,IAAoB,CAA3B;AACD;;;aAED,aAAKC,IAAL,EAAW;AACT,eAAO,wBAAc,EAAd,EAAkB,KAAKA,IAAvB,EAA6BA,IAA7B,CAAP;AACD;;;aAED,gBAAQA,IAAR,EAAc;AACZ,aAAKA,IAAL,GAAY,KAAKC,GAAL,CAASD,IAAT,CAAZ;AAEA,eAAO,IAAP;AACD;;;;AAIH;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAStB,GAAT,CAAcS,CAAd,EAAiBC,CAAjB,EAAoB;AAClB,WAAOA,CAAC,KAAK,CAAN,GAAUD,CAAV,GAAcT,GAAG,CAACU,CAAD,EAAID,CAAC,GAAGC,CAAR,CAAxB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASP,MAAT,CAAgBvC,KAAhB,EAAqC;AAAA,QAAd6C,CAAc,uEAAV,CAAU;AAAA,QAAPC,CAAO,uEAAH,CAAG;AACnC,WAAOJ,IAAI,CAACF,GAAL,CAASM,CAAT,EAAYJ,IAAI,CAACD,GAAL,CAASI,CAAT,EAAY7C,KAAZ,CAAZ,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAS2C,KAAT,CAAeC,KAAf,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC1B,WAAQD,CAAC,IAAI,IAAID,KAAR,CAAF,GAAqBE,CAAC,GAAGF,KAAhC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAASG,QAAT,CAAkB/C,KAAlB,EAAyB6C,CAAzB,EAA4BC,CAA5B,EAA+B;AAC7B,WAAOP,MAAK,CAAC,CAACvC,KAAK,GAAG6C,CAAT,KAAeC,CAAC,GAAGD,CAAnB,CAAD,CAAZ;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASe,OAAT,CAAiB5D,KAAjB,EAAwB6C,CAAxB,EAA2BC,CAA3B,EAA8B;AAC5B,WAAO,CAAC9C,KAAK,IAAI6C,CAAT,GAAa7C,KAAb,GAAqBA,KAAK,GAAG8C,CAA9B,IAAmCA,CAA1C;AACD;;MAgBKe;AAEJ,qBAGQ;AAAA,sFAAJ,EAAI;AAAA;AAAA,UAFNC,GAEM,0BAFA,EAEA;AAAA,6BADNC,IACM;AAAA,UADNA,IACM,2BADC,EACD;;AAAA;AACN,WAAKD,GAAL,GAAWA,GAAX;AACA,WAAKC,IAAL,GAAY,IAAIX,IAAJ,CAASW,IAAT,CAAZ;AACD;;;;aAED,mBAAWV,IAAX,EAAiB;AACf,YAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,iBAAOA,IAAP;AACD;;AAED,YAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,cAAMrD,KAAK,GAAG,2BAASqD,IAAT,KAAkB,CAAhC;AAEA,iBAAO,OAAOrD,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACqD,IAAD,CAAnC,GAA4CW,MAAM,CAAChE,KAAD,CAAzD;AACD;;AAED,eAAO,CAAP;AACD;;;aAED,iBAAoC;AAAA,YAA7BA,KAA6B,uEAArB,CAAqB;AAAA,YAAlB+D,IAAkB,uEAAX,KAAKA,IAAM;;AAClC,6BAAqC,KAAKA,IAAL,CAAUJ,GAAV,CAAcI,IAAd,CAArC;AAAA,YAAQT,EAAR,kBAAQA,EAAR;AAAA,YAAYC,EAAZ,kBAAYA,EAAZ;AAAA,YAAgBf,GAAhB,kBAAgBA,GAAhB;AAAA,YAAqBC,GAArB,kBAAqBA,GAArB;AAAA,YAA0BgB,MAA1B,kBAA0BA,MAA1B;;AACA,YAAMQ,KAAK,GAAG,KAAKC,IAAL,CAAUlE,KAAK,GAAGyD,MAAlB,EAA0B;AAAEH,UAAAA,EAAE,EAAFA,EAAF;AAAMC,UAAAA,EAAE,EAAFA;AAAN,SAA1B,CAAd;AACA,YAAMY,IAAI,GAAG,KAAKD,IAAL,CAAU1B,GAAG,IAAI,CAAjB,EAAoB;AAAEc,UAAAA,EAAE,EAAFA,EAAF;AAAMC,UAAAA,EAAE,EAAFA;AAAN,SAApB,CAAb;AACA,YAAMa,IAAI,GAAG,KAAKF,IAAL,CAAUzB,GAAG,IAAIzC,KAAjB,EAAwB;AAAEsD,UAAAA,EAAE,EAAFA,EAAF;AAAMC,UAAAA,EAAE,EAAFA;AAAN,SAAxB,CAAb;AAEA,eAAO;AAAEvD,UAAAA,KAAK,EAALA,KAAF;AAASiE,UAAAA,KAAK,EAALA,KAAT;AAAgBE,UAAAA,IAAI,EAAJA,IAAhB;AAAsBC,UAAAA,IAAI,EAAJA;AAAtB,SAAP;AACD;;;aAED,gBAAoE;AAAA,YAA9DpE,KAA8D,uEAAtD,CAAsD;;AAAA,wFAAJ,EAAI;AAAA,6BAAjDsD,EAAiD;AAAA,YAAjDA,EAAiD,yBAA5C,KAAKS,IAAL,CAAUV,IAAkC;AAAA,6BAA5BE,EAA4B;AAAA,YAA5BA,EAA4B,yBAAvB,KAAKQ,IAAL,CAAUV,IAAa;;;AAElE,eAAO,KAAKgB,SAAL,CAAerE,KAAf,KAAyB,KAAKqE,SAAL,CAAed,EAAf,IAAqB,KAAKc,SAAL,CAAef,EAAf,CAA9C,CAAP;AACD;;;aAED,gBAAkE;AAAA,YAA5DtD,KAA4D,uEAApD,CAAoD;;AAAA,wFAAJ,EAAI;AAAA,6BAA/CsE,EAA+C;AAAA,YAA/CA,EAA+C,yBAA1C,KAAKP,IAAL,CAAUV,IAAgC;AAAA,+BAA1BkB,IAA0B;AAAA,YAA1BA,IAA0B,2BAAnB7B,IAAI,CAACQ,KAAc;;AAChE,YAAMG,IAAI,GAAG,KAAKgB,SAAL,CAAeC,EAAf,CAAb;AACA,YAAME,MAAM,GAAG,OAAOD,IAAP,KAAgB,UAAhB,GAA6BA,IAA7B,GAAoC,UAAAE,CAAC;AAAA,iBAAIA,CAAJ;AAAA,SAApD;AACA,YAAMC,MAAM,GAAGF,MAAM,CAACxE,KAAK,GAAGqD,IAAT,CAAN,GAAuBA,IAAtC;AAEA,eAAO,KAAKgB,SAAL,CAAeK,MAAM,IAAI,CAAzB,CAAP;AACD;;;aAED,eAAO1E,KAAP,EAAc+D,IAAd,EAAoB;AAClB,0BAA8B,KAAKY,KAAL,CAAW3E,KAAX,EAAkB+D,IAAlB,CAA9B;AAAA,YAAQE,KAAR,eAAQA,KAAR;AAAA,YAAeE,IAAf,eAAeA,IAAf;AAAA,YAAqBC,IAArB,eAAqBA,IAArB;;AAEA,eAAO7B,MAAK,CAAC0B,KAAD,EAAQE,IAAR,EAAcC,IAAd,CAAZ;AACD;;;aAED,gBAAQpE,KAAR,EAAe+D,IAAf,EAAqB;AACnB,2BAA8B,KAAKY,KAAL,CAAW3E,KAAX,EAAkB+D,IAAlB,CAA9B;AAAA,YAAQE,KAAR,gBAAQA,KAAR;AAAA,YAAeE,IAAf,gBAAeA,IAAf;AAAA,YAAqBC,IAArB,gBAAqBA,IAArB;;AAEA,eAAOR,OAAM,CAACK,KAAD,EAAQE,IAAR,EAAcC,IAAd,CAAb;AACD;;;aAED,cAAMxB,KAAN,EAAamB,IAAb,EAAmB;AACjB,2BAAuB,KAAKY,KAAL,CAAW,CAAX,EAAcZ,IAAd,CAAvB;AAAA,YAAQI,IAAR,gBAAQA,IAAR;AAAA,YAAcC,IAAd,gBAAcA,IAAd;;AAEA,eAAOzB,KAAI,CAACC,KAAD,EAAQuB,IAAR,EAAcC,IAAd,CAAX;AACD;;;aAED,iBAASpE,KAAT,EAAgB+D,IAAhB,EAAsB;AACpB,2BAA8B,KAAKY,KAAL,CAAW3E,KAAX,EAAkB+D,IAAlB,CAA9B;AAAA,YAAQE,KAAR,gBAAQA,KAAR;AAAA,YAAeE,IAAf,gBAAeA,IAAf;AAAA,YAAqBC,IAArB,gBAAqBA,IAArB;;AAEA,eAAOrB,QAAO,CAACkB,KAAD,EAAQE,IAAR,EAAcC,IAAd,CAAd;AACD;;;aAED,eAAOpE,KAAP,EAAc+D,IAAd,EAAoB;AAClB,2BAAwB,KAAKY,KAAL,CAAW3E,KAAX,EAAkB+D,IAAlB,CAAxB;AAAA,YAAQE,KAAR,gBAAQA,KAAR;AAAA,YAAeE,IAAf,gBAAeA,IAAf;;AAEA,eAAOF,KAAK,GAAGE,IAAf;AACD;;;aAED,eAAOnE,KAAP,EAAc+D,IAAd,EAAoB;AAClB,2BAAuB,KAAKY,KAAL,CAAW3E,KAAX,EAAkB+D,IAAlB,CAAvB;AAAA,YAAQI,IAAR,gBAAQA,IAAR;AAAA,YAAcC,IAAd,gBAAcA,IAAd;;AAEA,eAAOA,IAAI,GAAGD,IAAd;AACD;;;aAED,kBAAUnE,KAAV,EAAiB+D,IAAjB,EAAuB;AACrB,YAAMa,KAAK,GAAG,KAAKA,KAAL,CAAW5E,KAAX,EAAkB+D,IAAlB,CAAd;AACA,YAAMc,KAAK,GAAG,KAAKA,KAAL,CAAW7E,KAAX,EAAkB+D,IAAlB,CAAd;AAEA,eAAOa,KAAK,GAAGC,KAAf;AACD;;;aAED,cAAM7E,KAAN,EAA+B;AAAA,YAAlB+D,IAAkB,uEAAX,KAAKA,IAAM;AAC7B,YAAMP,IAAI,GAAGO,IAAI,CAACP,IAAL,IAAa,CAA1B;AACA,YAAMsB,KAAK,GAAG1C,GAAG,CAACpC,KAAD,EAAQwD,IAAR,CAAjB;AACA,YAAMuB,IAAI,GAAG,KAAKxC,KAAL,CAAWvC,KAAX,EAAkB+D,IAAlB,CAAb;AACA,YAAMiB,SAAS,GAAG,KAAKC,IAAL,CAAUF,IAAV,EAAgB;AAAET,UAAAA,EAAE,EAAEQ;AAAN,SAAhB,CAAlB;AACA,YAAMlC,KAAK,GAAGF,IAAI,CAACD,GAAL,CAAS,CAAT,EAAYC,IAAI,CAACF,GAAL,CAASxC,KAAK,GAAG8E,KAAjB,EAAwBtB,IAAxB,CAAZ,CAAd;AACA,YAAMhB,GAAG,GAAGxC,KAAK,IAAIwD,IAAT,GAAgBA,IAAhB,GAAuBsB,KAAnC;AAEA,eAAOpC,IAAI,CAACD,GAAL,CAASD,GAAT,EAAc,KAAKyC,IAAL,CAAUD,SAAV,EAAqB;AAAEV,UAAAA,EAAE,EAAE1B;AAAN,SAArB,CAAd,CAAP;AACD;;;;;aAID,kBAA+B;AAAA;AAAA;;AAAA,YAAvBS,IAAuB,uEAAhB,KAAKU,IAAL,CAAUV,IAAM;AAC7B,YAAIA,IAAI,KAAK,KAAKU,IAAL,CAAUV,IAAvB,EAA6B,OAAO,IAAP;AAE7B,YAAMS,GAAG,GAAG,kFAAe,IAAf,oBACF,UAACA,GAAD;AAAA;AAAA,cAAOoB,GAAP;AAAA,cAAYlF,KAAZ;;AAAA,iBAAuB,wBAAc8D,GAAd,uCAC5BoB,GAD4B,EACtB,KAAI,CAAChB,IAAL,CAAUlE,KAAV,EAAiB;AAAEsD,YAAAA,EAAE,EAAE,KAAI,CAACS,IAAL,CAAUT,EAAhB;AAAoBC,YAAAA,EAAE,EAAEF;AAAxB,WAAjB,CADsB,wCAEzBA,IAFyB,EAElB,CAFkB,EAAvB;AAAA,SADE,CAAZ;AAKA,aAAKS,GAAL,GAAWA,GAAX;AACA,aAAKC,IAAL,CAAUV,IAAV,GAAiBA,IAAjB;AAEA,eAAO,IAAP;AACD;;;aAED,eAAO8B,KAAP,EAAc;AACZ,YAAMrB,GAAG,GAAG,wBAAc,EAAd,uBAAkB,IAAlB,wBAA4BqB,KAA5B,EAAZ;AACA,YAAMpB,IAAI,GAAG,wBAAc,EAAd,EAAkB,KAAKA,IAAvB,EAA6BoB,KAAK,CAACpB,IAAnC,CAAb;AAEA,eAAO,IAAIF,KAAJ,CAAU;AAAEC,UAAAA,GAAG,EAAHA,GAAF;AAAOC,UAAAA,IAAI,EAAJA;AAAP,SAAV,CAAP;AACD;;;aAED,aAAYoB,KAAZ,EAAmB;AACjB,eAAO,IAAItB,KAAJ,CAAUsB,KAAV,CAAP;AACD;;;;AC3PH;AACA;AACA;AACA;AACA;;;MACaC;;;;;AAEX,uBAAazF,MAAb,EAAqBoE,IAArB,EAA2B;AAAA;;AAAA;AACzB,iCAAM;AAAED,QAAAA,GAAG,EAAE,IAAP;AAAaC,QAAAA,IAAI,EAAJA;AAAb,OAAN;AAEA,aAAKpE,MAAL,GAAcA,MAAd;AACA,aAAK+D,IAAL,GAAYhE,OAAO,CAACC,MAAD,CAAnB;;AAEA,aAAK0F,IAAL;;AANyB;AAO1B;;;;aAED,gBAAQ;AACN,aAAKvB,GAAL,GAAW,qBAAAsB,SAAS,MAAT,CAAAA,SAAS,EAAK,KAAK1B,IAAV,CAApB;AAEA,aAAKK,IAAL,CAAUuB,MAAV,CAAiB;AAAEjC,UAAAA,IAAI,EAAE,MAAR;AAAgBZ,UAAAA,GAAG,EAAE,KAAK8C;AAA1B,SAAjB;AACD;;;WAED,eAAa;AACX,eAAO,KAAK7B,IAAL,CAAU8B,KAAjB;AACD;;;WAED,eAAa;AACX,eAAO,KAAK9B,IAAL,CAAUV,KAAjB;AACD;;;WAED,eAAW;AACT,eAAO,KAAKwC,KAAL,CAAWC,GAAlB;AACD;;;WAED,eAAe;AACb,eAAO,KAAK/B,IAAL,CAAUgC,OAAjB;AACD;;;WAED,eAAW;AACT,eAAO,KAAKA,OAAL,CAAalD,GAApB;AACD;;;WAED,eAAW;AACT,eAAO,KAAKkD,OAAL,CAAajD,GAApB;AACD;;;WAED,eAAa;AACX,eAAO,KAAKiD,OAAL,CAAaH,KAApB;AACD;;;aAED,YAAII,QAAJ,EAA2B;AAAA,YAAbrC,EAAa,uEAAR,MAAQ;AACzB,YAAMsC,IAAI,GAAGlD,IAAI,CAACQ,KAAL,CAAW,KAAKgB,IAAL,CAAUyB,QAAV,EAAoB;AAAErC,UAAAA,EAAE,EAAFA,EAAF;AAAMC,UAAAA,EAAE,EAAE;AAAV,SAApB,CAAX,CAAb;AACA,YAAMU,KAAK,GAAG,KAAKL,MAAL,CAAYgC,IAAZ,CAAd;AACA,YAAMC,KAAK,GAAG,KAAK7C,KAAL,CAAWiB,KAAX,CAAd;;AACA,oBAA8B4B,KAAK,IAAI,EAAvC;AAAA;AAAA,YAAOC,OAAP;AAAA,YAAgBC,IAAhB;AAAA,YAAsBC,IAAtB;;AAEA,eAAO;AACLC,UAAAA,IAAI,EAAEH,OAAO,CAAC,CAAD,CADR;AAELI,UAAAA,KAAK,EAAE,uBAAAJ,OAAO,MAAP,CAAAA,OAAO,EAAO,CAAP,CAFT;AAGLC,UAAAA,IAAI,EAAJA,IAHK;AAILC,UAAAA,IAAI,EAAJA,IAJK;AAKL/B,UAAAA,KAAK,EAALA;AALK,SAAP;AAOD;;;aAED,mBAAW0B,QAAX,EAAuD;AAAA,wFAAJ,EAAI;AAAA,6BAAhCrC,EAAgC;AAAA,YAAhCA,EAAgC,yBAA3B,IAA2B;AAAA,6BAArBC,EAAqB;AAAA,YAArBA,EAAqB,yBAAhB,OAAgB;;AACrD,YAAMU,KAAK,GAAG,KAAKC,IAAL,CAAUyB,QAAV,EAAoB;AAAErC,UAAAA,EAAE,EAAFA,EAAF;AAAMC,UAAAA,EAAE,EAAFA;AAAN,SAApB,CAAd;AACA,YAAMkC,GAAG,GAAG,KAAKvB,IAAL,CAAU,KAAKuB,GAAL,CAASG,IAAnB,EAAyB;AAAErC,UAAAA,EAAE,EAAFA;AAAF,SAAzB,CAAZ;AAEA,eAAOb,IAAI,CAACQ,KAAL,CAAWe,KAAK,GAAGwB,GAAnB,CAAP;AACD;;;;;aAID,kBAAUE,QAAV,EAKQ;AAAA;AAAA;;AAAA,yFAAJ,EAAI;AAAA,+BAJNrC,EAIM;AAAA,YAJNA,EAIM,0BAJD,IAIC;AAAA,kCAHNkC,KAGM;AAAA,YAHNA,KAGM,6BAHE,CAAC,IAAD,EAAO,IAAP,CAGF;AAAA,iCAFNjB,IAEM;AAAA,YAFNA,IAEM,4BAFC,OAED;AAAA,iCADNQ,IACM;AAAA,YADNA,IACM,4BADC,KACD;;AACN,YAAMoB,SAAS,GAAG,uDAAAX,KAAK,MAAL,CAAAA,KAAK,EAChB,UAAAnC,IAAI,EAAI;AACX,cAAMrD,KAAK,GAAG,MAAI,CAACkE,IAAL,CAAUyB,QAAV,EAAoB;AAAErC,YAAAA,EAAE,EAAFA,EAAF;AAAMC,YAAAA,EAAE,EAAEF;AAAV,WAApB,CAAd;;AACA,cAAM+C,MAAM,GAAG1D,IAAI,CAAC6B,IAAD,CAAJ,CAAWvE,KAAX,CAAf;AAEA,iBAAO,MAAI,CAACkE,IAAL,CAAUkC,MAAV,EAAkB;AAAE9C,YAAAA,EAAE,EAAED,IAAN;AAAYE,YAAAA,EAAE,EAAED;AAAhB,WAAlB,CAAP;AACD,SANoB,CAAL,kBAOV,UAACjB,CAAD,EAAIC,CAAJ;AAAA,iBAAUI,IAAI,CAAC2D,GAAL,CAASV,QAAQ,GAAGtD,CAApB,IAAyBK,IAAI,CAAC2D,GAAL,CAASV,QAAQ,GAAGrD,CAApB,CAAnC;AAAA,SAPU,CAAlB;AASA,eAAOI,IAAI,CAACqC,IAAD,CAAJ,OAAArC,IAAI,sCAAUyD,SAAV,EAAX;AACD;;;aAED,aAAYxG,MAAZ,EAAoB;AAClB,YAAM+D,IAAI,GAAGhE,OAAO,CAACC,MAAD,EAAS,KAAT,CAApB;AACA,0BAAyC+D,IAAI,CAAC8B,KAA9C;AAAA,YAAQS,IAAR,eAAQA,IAAR;AAAA,YAAcL,IAAd,eAAcA,IAAd;AAAA,YAAoBU,KAApB,eAAoBA,KAApB;AAAA,YAA2BC,IAA3B,eAA2BA,IAA3B;AAAA,YAAiCd,GAAjC,eAAiCA,GAAjC;AAEA,eAAO;AACLG,UAAAA,IAAI,EAAE,CADD;AAELU,UAAAA,KAAK,EAAE,KAAKL,IAAI,CAACL,IAAL,GAAYK,IAAI,CAACK,KAAtB,CAFF;AAGLb,UAAAA,GAAG,EAAEA,GAAG,CAACG,IAHJ;AAILY,UAAAA,EAAE,EAAE,IAAID,IAAI,CAACX,IAJR;AAKLa,UAAAA,MAAM,EAAG,IAAIF,IAAI,CAACX,IAAV,GAAkB,IALrB;AAML,eAAKA,IANA;AAOL,eAAKU,KAPA;AAQL,eAAKb,GAAG,CAACG,IARJ;AASL,gBAAMH,GAAG,CAACG,IAAJ,GAAW,CATZ;AAUL,gBAAMH,GAAG,CAACG,IAAJ,GAAW,CAVZ;AAWL,gBAAMH,GAAG,CAACG,IAAJ,GAAW,CAXZ;AAYL,iBAAOH,GAAG,CAACG,IAAJ,GAAW,EAZb;AAaL,iBAAOH,GAAG,CAACG,IAAJ,GAAW,EAbb;AAcL,iBAAOH,GAAG,CAACG,IAAJ,GAAW,EAdb;AAeL,iBAAOH,GAAG,CAACG,IAAJ,GAAYH,GAAG,CAACG,IAAJ,GAAW,CAfzB;AAgBL,iBAAOH,GAAG,CAACG,IAAJ,GAAYH,GAAG,CAACG,IAAJ,GAAW,CAhBzB;AAiBL,kBAAQH,GAAG,CAACG,IAAJ,GAAYH,GAAG,CAACG,IAAJ,GAAW,EAjB1B;AAkBL,kBAAQH,GAAG,CAACG,IAAJ,GAAYH,GAAG,CAACG,IAAJ,GAAW,EAlB1B;AAmBL,kBAAQH,GAAG,CAACG,IAAJ,GAAYH,GAAG,CAACG,IAAJ,GAAW;AAnB1B,SAAP;AAqBD;;;IAhH4B/B;ACH/B;AACA;AACA;AACA;;;;;MACa6C;AAEX,qBAAahD,IAAb,EAAmB;AAAA;AACjB,WAAKA,IAAL,GAAYA,IAAZ;AACD;;;;WAED,eAAU;AAAA;;AACR,8DAAU,KAAKA,IAAL,CAAUrC,IAApB,yBAA4B,KAAKqC,IAAL,CAAUiD,EAAtC;AACD;;;WAED,eAAW;AACT,eAAOD,OAAO,CAACE,GAAR,CAAY,KAAKD,EAAjB,CAAP;AACD;;;WAED,eAAa;AACX,eAAO,KAAKjD,IAAL,CAAU1D,KAAjB;AACD;;;WAED,eAAa;AACX,eAAO,KAAK0D,IAAL,CAAUyB,KAAV,IAAmB,EAA1B;AACD;;;WAED,eAAY;AACV,eAAO,KAAKzB,IAAL,CAAUrC,IAAV,CAAehB,WAAf,EAAP;AACD;;;WAED,eAAgB;AACd,eAAO,KAAKqD,IAAL,CAAUiC,QAAjB;AACD;;;WAED,eAAa;AACX,eAAO1E,IAAI,CAACgC,GAAL,CAAS,KAAK5B,IAAd,EAAoB,KAAKrB,KAAzB,CAAP;AACD;;;WAED,eAAe;AACb,eAAO,0BAAA6G,gBAAgB,MAAhB,CAAAA,gBAAgB,EAAU,KAAKxF,IAAf,CAAvB;AACD;;;aAED,aAAYsF,EAAZ,EAAgB;AACd,eAAOA,EAAE,CAAC1G,KAAH,CAAS,GAAT,EAAc6G,GAAd,EAAP;AACD;;;;AAIH;AACA;AACA;;;;;MACaC;AAEX,wBAA2C;AAAA,uFAAJ,EAAI;AAAA,UAA5BpH,MAA4B,UAA5BA,MAA4B;AAAA,UAApBqH,KAAoB,UAApBA,KAAoB;AAAA,UAAb9C,IAAa,UAAbA,IAAa;;AAAA;AACzC,WAAKvE,MAAL,GAAcD,OAAO,CAACC,MAAD,CAArB;;AACA,WAAKuE,IAAL,GAAYA,IAAI,IAAK,UAAAO,CAAC;AAAA,eAAIA,CAAJ;AAAA,OAAtB;;AACA,WAAKf,IAAL,GAAYsD,KAAK,IAAID,QAAQ,CAAC7C,IAAT,CAAc,KAAKvE,MAAL,CAAYsH,QAA1B,EAAoC/C,IAApC,CAArB;AACD;;;;WAED,eAAW;AAAA;AAAA;;AACT,eAAO,2CAAKgD,KAAL,mBAAmB,UAAA7F,IAAI;AAAA,iBAAI,uBAAA,MAAI,MAAJ,CAAA,MAAI,EAAOA,IAAP,CAAR;AAAA,SAAvB,CAAP;AACD;;;WAED,eAAa;AACX,eAAO,sBAAY,KAAKqC,IAAjB,CAAP;AACD;;;WAED,eAAc;AAAA;;AACZ,eAAO,uCAAKT,GAAL,mBAAa,UAAAkE,IAAI;AAAA,iBAAIA,IAAI,CAACnH,KAAT;AAAA,SAAjB,CAAP;AACD;;;WAED,eAAW;AAAA;;AACT,eAAO,uCAAKiD,GAAL,mBAAa,UAAAkE,IAAI;AAAA,iBAAIA,IAAI,CAACR,EAAT;AAAA,SAAjB,CAAP;AACD;;;aAED,aAAKA,EAAL,EAAS;AACP,YAAMS,KAAK,GAAG,OAAOT,EAAP,KAAc,QAAd,GAAyBA,EAAE,CAAC1G,KAAH,CAAS,GAAT,CAAzB,GAAyC,EAAvD;;AAEA,YAAImH,KAAK,CAACjE,MAAN,KAAiB,CAArB,EAAwB;AACtB,uDAAoBiE,KAApB;AAAA,cAAO/F,IAAP;AAAA,cAAauF,GAAb;;AACA,cAAMO,IAAI,GAAG,KAAKzD,IAAL,CAAUrC,IAAV,EAAgBuF,GAAhB,CAAb;AAEA,iBAAOO,IAAI,mCAAQA,IAAR;AAAcR,YAAAA,EAAE,EAAEC,GAAlB;AAAuBvF,YAAAA,IAAI,EAAJA;AAAvB,eAAgC,IAA3C;AACD;;AAED,cAAM5B,SAAS,CAAC,0DAAD,CAAf;AACD;;;aAED,aAAK4B,IAAL,EAAW;AAAA;;AACT,eAAO,2DAAWA,IAAX,EAAiB,CAAjB,CAAP;AACD;;;aAED,eAAOA,IAAP,EAAa;AAAA;;AACX,eAAO,0DAAc,KAAKqC,IAAL,CAAUrC,IAAV,CAAd,oBAAmC,UAAA8F,IAAI;AAAA,iBAAI,IAAIT,OAAJ,CAAYS,IAAZ,CAAJ;AAAA,SAAvC,CAAP;AACD;;;aAED,iBAASA,IAAT,EAAe;AAAA;;;;AAGb,YAAI,yBAAOA,IAAP,MAAgB,QAApB,EAA8B,OAAOA,IAAP;AAC9B,YAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B,OAAO,KAAKE,GAAL,CAASF,IAAT,CAAP;AAC9B,YAAI,yBAAcA,IAAd,CAAJ,EAAyB,OAAO,qBAAAA,IAAI,MAAJ,CAAAA,IAAI,EAAK,UAAAG,EAAE;AAAA,iBAAI,MAAI,CAACD,GAAL,CAASC,EAAT,CAAJ;AAAA,SAAP,CAAX;AACzB,YAAIH,IAAI,IAAI,IAAZ,EAAkB,OAAO,IAAP;AAElB,cAAM1H,SAAS,CAAC,wDAAD,CAAf;AACD;;;;aAGD,0BAAkC;AAAA;;AAAA,YAAtB4B,IAAsB,UAAtBA,IAAsB;AAAA,YAAhBrB,KAAgB,UAAhBA,KAAgB;AAAA,YAATmF,KAAS,UAATA,KAAS;AAChC,YAAI,CAAC9D,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC,MAAM5B,SAAS,CAAC,iCAAD,CAAf;AACvC,YAAIO,KAAK,IAAI,IAAb,EAAmB,MAAMP,SAAS,CAAC,oCAAD,CAAf;AAEnB,YAAM0H,IAAI,GAAG,0BAAW9F,IAAX,wCAAkBrB,KAAlB,wDAA4BmF,KAA5B,GAAb;AACA,YAAMyB,GAAG,GAAGF,OAAO,CAACE,GAAR,CAAYO,IAAI,CAACR,EAAjB,CAAZ;AACA,YAAMY,MAAM,GAAG,KAAKrD,IAAL,iCAAeiD,IAAf;AAAqBR,UAAAA,EAAE,EAAEC,GAAzB;AAA8BvF,UAAAA,IAAI,EAAJA;AAA9B,WAAf;AAEA,aAAKqC,IAAL,CAAUrC,IAAV,IAAkB,KAAKqC,IAAL,CAAUrC,IAAV,KAAmB,EAArC;AACA,aAAKqC,IAAL,CAAUrC,IAAV,EAAgBuF,GAAhB,IAAuBW,MAAvB;AAEA,aAAK5H,MAAL,CAAYsH,QAAZ,GAAuB,KAAKvD,IAA5B;AAEA,eAAO,IAAIgD,OAAJ,CAAYa,MAAZ,CAAP;AACD;;;aAED,cAAaN,QAAb,EAAoC;AAAA;;AAAA,YAAb1D,EAAa,uEAAR,UAAAkB,CAAC;AAAA,iBAAIA,CAAJ;AAAA,SAAO;AAClC,YAAI,CAACwC,QAAL,EAAe,OAAO,IAAP,CADmB;;AAIlC,eAAO,8DAAeA,QAAf,oBACG,UAACO,GAAD,UAAsB;AAAA;;AAAA;AAAA,cAAfnG,IAAe;AAAA,cAAToG,GAAS;;AAC5B,cAAMvB,KAAK,GAAG,8DAAeuB,GAAf,oBACJ,UAACD,GAAD;AAAA;AAAA,gBAAOb,EAAP;AAAA,gBAAWQ,IAAX;;AAAA,mDACHK,GADG,4CAELb,EAFK,EAEApD,EAAE;AAAGoD,cAAAA,EAAE,EAAFA,EAAH;AAAOtF,cAAAA,IAAI,EAAJA;AAAP,eAAgB8F,IAAhB,EAFF;AAAA,WADI,EAIR,EAJQ,CAAd;AAMA,iDAAYK,GAAZ,4CAAkBnG,IAAlB,EAAyB6E,KAAzB;AACD,SATI,EASF,EATE,CAAP;AAUD;;;OAIH;;;;AACY,MAACW,gBAAgB,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,QAA3B,CAApB;;AClJZ;AACA;AACA;AACA;AACA;AACA;AACA;;;;MACaa;AAEX,kBAAahE,IAAb,EAAmBsD,KAAnB,EAA0B;AAAA;AACxB,WAAKtD,IAAL,GAAYA,IAAZ;AACA,WAAKsD,KAAL,GAAaA,KAAb;AACD;;;;WAED,eAAU;AACR,eAAO,KAAKtD,IAAL,CAAUiD,EAAjB;AACD;;;WAED,eAAa;AACX,eAAO,KAAKjD,IAAL,CAAUO,KAAjB;AACD;;;WAED,eAAgB;AACd,eAAO,KAAKP,IAAL,CAAUiC,QAAjB;AACD;;;WAED,eAAa;AAAA;AAAA;;AACX,eAAO,uCAAKjC,IAAL,CAAUiE,KAAV,mBAAoB,UAAAC,IAAI;AAAA;;AAAA,iDAC1BA,IAD0B;AAE7BX,YAAAA,QAAQ,EAAE,kCAAAW,IAAI,CAACX,QAAL,mBAAkB,UAAAE,IAAI;AAAA,qBAAI,MAAI,CAACH,KAAL,CAAWa,OAAX,CAAmBV,IAAnB,CAAJ;AAAA,aAAtB;AAFmB;AAAA,SAAxB,CAAP;AAID;;;WAED,eAAgB;AAAA;AAAA;;AACd,eAAO,2CAAKzD,IAAL,CAAUiE,KAAV,mBAAwB;AAAA,cAAGV,QAAH,UAAGA,QAAH;AAAA,iBAC7B,qBAAAA,QAAQ,MAAR,CAAAA,QAAQ,EAAK,UAAAE,IAAI;AAAA,mBAAI,MAAI,CAACH,KAAL,CAAWa,OAAX,CAAmBV,IAAnB,CAAJ;AAAA,WAAT,CADqB;AAAA,SAAxB,CAAP;AAGD;;;WAED,eAAa;AACX,eAAO,KAAKlE,GAAL,CAAS;AAAA,cAAG5B,IAAH,UAAGA,IAAH;AAAA,iBAAcA,IAAd;AAAA,SAAT,CAAP;AACD;;;WAED,eAAc;AACZ,eAAO,KAAK4B,GAAL,CAAS;AAAA,cAAGjD,KAAH,UAAGA,KAAH;AAAA,iBAAeA,KAAf;AAAA,SAAT,CAAP;AACD;;;WAED,eAAa;AACX,eAAO,KAAKsB,OAAL,CAAa,KAAK2F,QAAlB,CAAP;AACD;;;;;WAID,eAAa;AAAA;;AACX,eAAO,0CAAKA,QAAL,mBAAqB,UAACG,KAAD,EAAQD,IAAR;AAAA,iDACxBC,KADwB,4CAEzBD,IAAI,CAAC9F,IAFoB,EAEb8F,IAFa;AAAA,SAArB,EAGH,EAHG,CAAP;AAID;;;WAED,eAAe;AAAA;;AACb,eAAO,yCAAKF,QAAL,mBAAoB,UAAAE,IAAI;AAAA,iBAAIA,IAAI,CAACW,OAAT;AAAA,SAAxB,CAAP;AACD;;;aAED,eAAoB;AAAA;;AAAA,YAAf5D,IAAe,uEAAR,UAAAO,CAAC;AAAA,iBAAIA,CAAJ;AAAA,SAAO;AAClB,mDAAW,oBAAQ,uCAAKwC,QAAL,mBAAkB/C,IAAlB,CAAR,CAAX;AACD;;;aAED,cAAM7C,IAAN,EAAY;AAAA;;AACV,eAAO,wCAAK4F,QAAL,mBAAmB,UAAAE,IAAI;AAAA,iBAAI9F,IAAI,KAAK8F,IAAI,CAAC9F,IAAlB;AAAA,SAAvB,CAAP;AACD;;;aAED,gBAAQA,IAAR,EAAc;AAAA;;AACZ,eAAO,0CAAK4F,QAAL,mBAAqB,UAAAE,IAAI;AAAA,iBAAI9F,IAAI,KAAK8F,IAAI,CAAC9F,IAAlB;AAAA,SAAzB,CAAP;AACD;;;aAED,cAAMA,IAAN,EAAY;AAAA;;AACV,eAAO,kGAAYA,IAAZ,oBAA4B,CAA5B,CAAP;AACD;;;aAED,gBAAQ6F,KAAR,EAAe;AAAA;;AACb,eAAO,wBAAAA,KAAK,MAAL,CAAAA,KAAK,EAAQ,UAACM,GAAD,EAAMnG,IAAN;AAAA,iBAAemG,GAAG,CAACrE,MAAJ,GAAaqE,GAAb,GAAmB,wBAAA,MAAI,MAAJ,CAAA,MAAI,EAAQnG,IAAR,CAAtC;AAAA,SAAR,EAA6D,EAA7D,CAAZ;AACD;;;aAED,iBAAS4F,QAAT,EAAmB;AACjB,eAAOhG,IAAI,CAAC8G,KAAL,CAAW,yBAAAd,QAAQ,MAAR,CAAAA,QAAQ,EAAS;AAAA,cAAGlG,KAAH,UAAGA,KAAH;AAAA,iBAAeA,KAAf;AAAA,SAAT,CAAnB,CAAP;AACD;;;aAED,cAAaiH,KAAb,EAAoBhB,KAApB,EAA2B;AACzB,YAAI,yBAAcgB,KAAd,CAAJ,EAA0B;AACxB,iBAAO,qBAAAA,KAAK,MAAL,CAAAA,KAAK,EAAK,UAAA/B,IAAI;AAAA,mBAAI,IAAIyB,IAAJ,CAASzB,IAAT,EAAee,KAAf,CAAJ;AAAA,WAAT,CAAZ;AACD;;AAED,eAAO,CAAC,IAAIU,IAAJ,CAASM,KAAT,EAAgBhB,KAAhB,CAAD,CAAP;AACD;;;;;MC3FUiB;AAEX,mBAAatI,MAAb,EAAqB;AAAA;AACnB,WAAK2F,MAAL,CAAY3F,MAAZ;AACD;;;;aAED,gBAAQ;AACN,YAAI,CAAC,KAAKuI,MAAV,EAAkB,OAAO,IAAP;AAElB,aAAKlB,KAAL,GAAa,IAAID,QAAJ,CAAa;AACxBpH,UAAAA,MAAM,EAAE,KAAK+D,IADW;AAExBQ,UAAAA,IAAI,EAAE,cAAAiD,IAAI;AAAA,mDACLA,IADK;AAERpG,cAAAA,KAAK,EAAEE,IAAI,CAACgC,GAAL,CAASkE,IAAI,CAAC9F,IAAd,EAAoB8F,IAAI,CAACnH,KAAzB;AAFC;AAAA;AAFc,SAAb,CAAb;AAQA,aAAKgI,KAAL,GAAaN,IAAI,CAACS,IAAL,CAAU,KAAKzE,IAAL,CAAUsE,KAApB,EAA2B,KAAKhB,KAAhC,CAAb;AACA,aAAKb,SAAL,GAAiB,IAAIf,SAAJ,CAAc,KAAK1B,IAAnB,CAAjB;AACD;;;aAED,gBAAQ/D,MAAR,EAAgB;AACd,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAK+D,IAAL,GAAYhE,OAAO,CAACC,MAAD,CAAnB;AAEA,aAAK0F,IAAL;AAEA,eAAO,IAAP;AACD;;;WAED,eAAe;AACb,eAAO,KAAK3B,IAAL,CAAU0E,OAAjB;AACD;;;WAED,eAAe;AACb,eAAO,KAAK1E,IAAL,CAAUgC,OAAjB;AACD;;;WAED,eAAa;AACX,eAAO,KAAKhC,IAAL,CAAU8B,KAAjB;AACD;;;WAED,eAAa;AACX,eAAO,KAAK4C,OAAL,CAAaC,KAApB;AACD;;;WAED,eAAa;AACX,eAAO,KAAKD,OAAL,CAAaE,KAApB;AACD;;;WAED,eAAgB;AACd,eAAO,KAAKtB,KAAL,CAAW/D,GAAlB;AACD;;;WAED,eAAa;AAAA;;AACX,eAAOhC,IAAI,CAAC8G,KAAL,CACL,2CAAKC,KAAL,mBAAmB,UAAA/B,IAAI;AAAA;;AAAA,iBACrB,sCAAAA,IAAI,CAACgB,QAAL,mBAAsB;AAAA,gBAAGlG,KAAH,UAAGA,KAAH;AAAA,mBAAeA,KAAf;AAAA,WAAtB,CADqB;AAAA,SAAvB,CADK,CAAP;AAKD;;;WAED,eAAe;AAAA;;AACb,eAAO,yCAAKiH,KAAL,mBAAiB,UAAA/B,IAAI;AAAA,iBAAIA,IAAI,CAAC6B,OAAT;AAAA,SAArB,CAAP;AACD;;;WAED,eAAY;AACV,eAAO,KAAKtC,KAAL,CAAWS,IAAX,CAAgBL,IAAvB;AACD;;;WAED,eAAgB;AACd,eAAO,KAAKJ,KAAL,CAAWe,IAAX,CAAgBX,IAAvB;AACD;;;WAED,eAAc;AACZ,eAAO,CAAC,KAAKlC,IAAL,CAAU6E,IAAlB;AACD;;;aAED,YAAI5C,QAAJ,EAA2B;AAAA,YAAbrC,EAAa,uEAAR,MAAQ;AACzB,YAAMkF,MAAM,GAAG,KAAKrC,SAAL,CAAesC,EAAf,CAAkB9C,QAAlB,EAA4BrC,EAA5B,CAAf;AAEA,eAAO;AACL2C,UAAAA,IAAI,EAAE,KAAK+B,KAAL,CAAWQ,MAAM,CAACvC,IAAlB,CADD;AAELC,UAAAA,KAAK,EAAE,KAAKc,KAAL,CAAWa,OAAX,CAAmBW,MAAM,CAACtC,KAA1B,CAFF;AAGLH,UAAAA,IAAI,EAAE,KAAKiB,KAAL,CAAWa,OAAX,CAAmBW,MAAM,CAACzC,IAA1B,CAHD;AAILC,UAAAA,IAAI,EAAE,KAAKgB,KAAL,CAAWa,OAAX,CAAmBW,MAAM,CAACxC,IAA1B;AAJD,SAAP;AAMD;;;aAED,cAAM/B,KAAN,EAAa;AACX,YAAMuE,MAAM,GAAG,KAAKrC,SAAL,CAAevC,MAAf,CAAsBK,KAAtB,EAA6B;AAAExB,UAAAA,GAAG,EAAE,KAAKuF,KAAL,CAAW7E;AAAlB,SAA7B,CAAf;AAEA,eAAO,KAAK6E,KAAL,CAAWQ,MAAX,CAAP;AACD"}