{"version":3,"file":"bach-js.esm.js","sources":["../src/validate.js","../src/data.js","../src/note.js","../src/math.js","../node_modules/segu/dist/segu.esm.js","../src/durations.js","../src/elements.js","../src/beats.js","../src/music.js"],"sourcesContent":["import schema from 'bach-json-schema'\nimport Ajv from 'ajv'\n\nconst ajv = new Ajv({ strictTuples: false, code: { es5: true }, unicodeRegExp: false })\n\nexport const validate = ajv.compile(JSON.parse(JSON.stringify(schema)))\n\nexport const valid = bach => {\n  if (!validate(bach)) {\n    const message = 'Invalid Bach.JSON source data'\n    const pretty = json => JSON.stringify(json, null, 2)\n\n    console.error(message, pretty(bach))\n    console.error(pretty(validate.errors))\n\n    throw TypeError(`Invalid Bach.JSON source data`)\n  }\n\n  return bach\n}\n\nexport default validate\n","import bach from 'bach-cljs'\nimport { Note } from './note'\nimport { valid } from './validate'\nimport {\n  scale as teoriaScale,\n  chord as teoriaChord,\n} from 'teoria'\n\n/**\n * Either \"composes\" raw bach data into bach.json or, when provided an object, validates its structure as bach.json.\n * Given a string, automatically upgrades source to v3 (simple replacement of !play with play!).\n * Main entry point for integrating with core bach ClojureScript library.\n */\nexport const compose = (source, strict = true) => {\n  if (typeof source === 'string') {\n    const upgraded = source.replace(/!play/i, 'play!')\n\n    return bach.compose(upgraded)\n  }\n\n  if (typeof source === 'object') {\n    return strict ? valid(source) : source\n  }\n\n  throw TypeError(`Unsupported Bach.JSON data type (${typeof source}). Must be a bach.json object or raw bach string.`)\n}\n\nexport const compile = (source, strict = true) => {\n  const data = compose(source, strict)\n\n  return JSON.parse(JSON.stringify(data))\n}\n\nexport function scaleify (value) {\n  if (typeof value === 'string') {\n    const [tonic, type] = value.split(' ')\n\n    return teoriaScale(tonic, type.toLowerCase())\n  } else if (typeof value === 'object') {\n    return value\n  }\n\n  throw TypeError(`Unknown scale type (${typeof value}): ${value}`)\n}\n\nexport function chordify (value) {\n  if (typeof value === 'string') {\n    return teoriaChord(value)\n  } else if (typeof value === 'object') {\n    return value\n  }\n\n  throw TypeError(`Unknown chord type (${typeof value}): ${value}`)\n}\n\nexport function scaleToString (scale) {\n  return `${scale.tonic.toString().slice(0,2)} ${scale.name}`\n}\n\nexport function notesInChord (value) {\n  return chordify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesInScale (value) {\n  return scaleify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesIn (kind, value) {\n  const notes = notesOf[kind]\n\n  if (notes) {\n    return notes(value)\n  }\n\n  return []\n}\n\n// TODO: Allow custom note resolvers to be registered globally or locally so people can easily define their own semantics\n//  - Could call this `itemsOf` to be more generic and flexible\nexport const notesOf = {\n  note:  value => [value],\n  chord: value => notesInChord(value),\n  scale: value => notesInScale(value),\n  penta: value => notesInScale(value)\n}\n\n// TODO: Note.valueOf\nexport function notesIntersect (left, right) {\n return left.filter(note => right.includes(note))\n}\n","import { note as teoriaNote, Note as TeoriaNote } from 'teoria'\nimport { notesIn } from './data'\n\n// TODO: Replce with individual functions and remove class, no longer necessary\n// TODO: Remove cyclic reference between data module by bringing in all note related functions.\nexport class Note {\n\n  static parse (value) {\n    if (typeof value === 'string') {\n      return teoriaNote(value)\n    } else if (typeof value === 'object' || value instanceof TeoriaNote) {\n      return value\n    }\n\n    throw TypeError(`Unknown note type (${typeof value}): ${value}`)\n  }\n\n  static all (kind, note) {\n    try {\n      return notesIn(kind, note)\n    } catch (e) {\n      return []\n    }\n  }\n\n  static hash (note) {\n    return Note.parse(note).chroma()\n  }\n\n  static pitchOf (note) {\n    return Note.valueOf(note)\n  }\n\n  // TODO: Consider using chroma instead\n  // TODO: Use this in nek, and anywhere else this same logic might be used\n  static valueOf (note) {\n    return Note.parse(note)\n      .scientific()\n      // .toLowerCase()\n      // TODO: Centralize! Replace everywhere in bach-sheet, nek, etc.\n      .replace(/[0-9]+$/, '')\n  }\n\n  static valuesOf (notes) {\n    return notes.map(Note.valueOf)\n  }\n\n  static generalize (note) {\n    return teoriaNote(Note.valueOf(note))\n  }\n\n  static unite (notes = []) {\n    return notes.reduce((all, note) => {\n      const value = Note.valueOf(note)\n      const has = Note.includes(all, value)\n\n      return !has ? all.concat(value) : all\n    }, [])\n  }\n\n  static includes (notes = [], note) {\n    return notes.some(other => Note.equals(other, note))\n  }\n\n  static equals (left, right) {\n    return Note.hash(left) == Note.hash(right)\n  }\n\n}\n","/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} a\n * @param {Number} b\n * @returns {Number}\n */\nexport function gcd (a, b) {\n  if (b == 0) {\n    return a\n  }\n\n  return gcd(b, a % b)\n}\n\n/**\n * Modifies a value so that it is always between the provided min and max\n *\n * @param {Number} value\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nexport function clamp (value, min = 0, max = 1) {\n  return Math.min(max, Math.max(min, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nexport function invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nexport function steps (ratio, all) {\n  ratio %= 1\n\n  if (ratio < 0) ratio += 1\n\n  return all[Math.floor(ratio * all.length)]\n}\n","class Lens {\n\n  constructor ({\n    unit = 1,\n    is = 1,\n    as = 1,\n    min = 0,\n    max = 1,\n    grid = 1,\n    origin = 0\n  } = {}) {\n    this.data = { unit, is, as, min, max, grid, origin };\n    // Would improve flexibility by wrapping all getters in Lens with this, allowing Units and Lens to use the same normalization function\n    // this.normalize = normalize || Units.normalize\n  }\n\n  get unit () {\n    return this.data.unit || this.data.is || 1\n  }\n\n  get is () {\n    return this.data.is || this.unit\n  }\n\n  get as () {\n    return this.data.as || this.unit\n  }\n\n  get min () {\n    return this.data.min || 0\n  }\n\n  get max () {\n    return this.data.max || Number.MAX_SAFE_INTEGER\n  }\n\n  get grid () {\n    return this.data.grid || 1\n  }\n\n  get origin () {\n    return this.data.origin || 0\n  }\n\n  use (data) {\n    return Object.assign({}, this.data, data)\n  }\n\n  assign (data) {\n    this.data = this.use(data);\n\n    return this\n  }\n\n}\n\n/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction gcd (x, y) {\n  return y === 0 ? x : gcd(y, x % y)\n}\n\n/**\n * Modifies a value so that it is always between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction clamp (value, x = 0, y = 1) {\n  return Math.min(y, Math.max(x, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nfunction invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Cycles a value around an range (from x to y).\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n*/\nfunction cyclic (value, x, y) {\n  return (value >= x ? value : value + y) % y\n}\n\n/**\n * Projects a value given a source domain (from) to a target domain (to).\n * Domains are provided as range tuples ([min, max]).\n *\n * @param {Number} value\n * @param {Array<Number>} from\n * @param {Array<Number>} to\n * @returns {Number}\n */\nfunction project (value, from = [0, 0], to = [0, 0]) {\n  return (value - from[0]) / (from[1] - from[0]) * (to[1] - to[0]) + to[0]\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nfunction steps (ratio, all) {\n  ratio %= 1;\n\n  if (ratio < 0) ratio += 1;\n\n  return all[Math.floor(ratio * all.length)]\n}\n\n// TODO: Support calc method for allowing conversion of units via string (like CSS):\n\nclass Units {\n\n  constructor ({\n    map = {},\n    lens = {}\n  } = {}) {\n    this.map = map;\n    this.lens = new Lens(lens);\n  }\n\n  normalize (unit) {\n    if (typeof unit === 'number') {\n      return unit\n    }\n\n    if (typeof unit === 'string') {\n      const value = this.map[unit] || 1;\n\n      return typeof value === 'function' ? value(unit, this) : Number(value)\n    }\n\n    return 1\n  }\n\n  scope (value = 1, lens = this.lens) {\n    const { is, as, min, max, origin } = this.lens.use(lens);\n    const index = this.cast(value - origin, { is, as });\n    const head = this.cast(min || 0, { is, as });\n    const tail = this.cast(max || value, { is, as });\n\n    return { value, index, head, tail }\n  }\n\n  // TODO: Allow `is` and `as` to be provided as mapping functions\n  cast (value = 1, { is = this.lens.unit, as = this.lens.unit } = {}) {\n    return this.normalize(value) / (this.normalize(as) / this.normalize(is))\n  }\n\n  snap (value, lens = this.lens) {\n    const { index } = this.scope(value, lens);\n    const unit = this.normalize(lens.as || lens.unit);\n    const calc = typeof lens.calc === 'function' ? lens.calc : Math.floor;\n\n    return calc(index) * unit\n  }\n\n  clamp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return clamp(index, head, tail)\n  }\n\n  cyclic (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return cyclic(index, head, tail)\n  }\n\n  lerp (ratio, lens) {\n    const { head, tail } = this.scope(0, lens);\n\n    return lerp(ratio, head, tail)\n  }\n\n  invlerp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return invlerp(index, head, tail)\n  }\n\n  delta (value, lens) {\n    const { index, head } = this.scope(value, lens);\n\n    return index - head\n  }\n\n  range (value, lens) {\n    const { head, tail } = this.scope(value, lens);\n\n    return tail - head\n  }\n\n  progress (value, lens) {\n    const delta = this.delta(value, lens);\n    const range = this.range(value, lens);\n\n    return delta / range\n  }\n\n  fold (value, lens = this.lens) {\n    const grid = lens.grid || 1;\n    const basis = gcd(value, grid);\n    const size = this.clamp(value, lens);\n    const container = this.snap(size, { as: basis });\n    const ratio = Math.max(1, Math.min(value / basis, grid));\n    const min = value >= grid ? grid : basis;\n\n    return Math.max(min, this.snap(container, { as: ratio }))\n  }\n\n  // Changes the base unit to the provided key by recalculating and replacing the unit map pairs.\n  // TODO: Test, and ensure that the base unit is equal to 1 (or, could just use scale)\n  rebase (unit = this.lens.unit) {\n    if (unit === this.lens.unit) return this\n\n    const map = Object.entries(this.map)\n      .reduce((map, [key, value]) => Object.assign(map, {\n        [key]: this.cast(value, { is: this.lens.is, as: unit })\n      }, { [unit]: 1 }));\n\n    this.map = map;\n    this.lens.unit = unit;\n\n    return this\n  }\n\n  clone (props) {\n    const map = Object.assign({}, this.map, props.map);\n    const lens = Object.assign({}, this.lens, props.lens);\n\n    return new Units({ map, lens })\n  }\n\n  static use (props) {\n    return new Units(props)\n  }\n}\n\nconst units = props => new Units(props);\n\nexport { Units, clamp, cyclic, gcd, invlerp, lerp, project, steps, units };\n//# sourceMappingURL=segu.esm.js.map\n","import { compile, compose } from './data'\nimport { gcd, clamp, lerp } from './math'\nimport { Units } from 'segu'\n\n/**\n * Provides essential duration values and calculations of a bach track.\n * Enables trivial conversions between any duration unit via cast (based\n * on milliseconds) and unitize (based on steps, bach's iteration unit).\n */\nexport class Durations extends Units {\n\n  constructor (source, lens) {\n    super({ map: null, lens })\n\n    this.source = source\n    this.data = compile(source)\n\n    this.init()\n  }\n\n  init () {\n    this.map = Durations.map(this.data)\n\n    this.lens.assign({ unit: 'step', max: this.total })\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get steps () {\n    return this.data.steps\n  }\n\n  get bar () {\n    return this.units.bar\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get min () {\n    return this.metrics.min\n  }\n\n  get max () {\n    return this.metrics.max\n  }\n\n  get total () {\n    return this.metrics.total\n  }\n\n  at (duration, is = 'step') {\n    const step = Math.floor(this.cast(duration, { is, as: 'step' }))\n    const index = this.cyclic(step)\n    const state = this.steps[index]\n    const [context, play, stop] = state || []\n\n    return {\n      beat: context[0],\n      elems: context.slice(1),\n      play,\n      stop,\n      index\n    }\n  }\n\n  metronize (duration, { is = 'ms', as = 'pulse' } = {}) {\n    const index = this.cast(duration, { is, as })\n    const bar = this.cast(this.bar.step, { as })\n\n    return Math.floor(index % bar)\n  }\n\n  // TODO: Either replace or improve via inspiration with this:\n  // @see: https://tonejs.github.io/docs/r13/Time#quantize\n  rhythmic (duration, {\n    is = 'ms',\n    units = ['8n', '4n'],\n    calc = 'floor',\n    size = 'min'\n  } = {}) {\n    const durations = units\n      .map(unit => {\n        const value = this.cast(duration, { is, as: unit })\n        const result = Math[calc](value)\n\n        return this.cast(result, { is: unit, as: is })\n      })\n      .sort((a, b) => Math.abs(duration - a) - Math.abs(duration - b))\n\n    return Math[size](...durations)\n  }\n\n  static map (source) {\n    const data = compose(source, false)\n    const { beat, step, pulse, time, bar } = data.units\n\n    return {\n      step: 1,\n      pulse: 1 / (beat.step / beat.pulse),\n      bar: bar.step,\n      ms: 1 / time.step,\n      second: (1 / time.step) * 1000,\n      's': step,\n      'p': pulse,\n      'm': bar.step,\n      '2n': bar.step / 2,\n      '4n': bar.step / 4,\n      '8n': bar.step / 8,\n      '16n': bar.step / 16,\n      '32n': bar.step / 32,\n      '64n': bar.step / 64,\n      '4up': bar.step - (bar.step / 4),\n      '8up': bar.step - (bar.step / 8),\n      '16up': bar.step - (bar.step / 16),\n      '32up': bar.step - (bar.step / 32),\n      '64up': bar.step - (bar.step / 64)\n    }\n  }\n\n}\n","import { elementize } from 'bach-cljs'\nimport { note as teoriaNote } from 'teoria'\n\nimport { compose } from './data'\nimport { Note } from './note'\n\n/**\n * Represents a single and unique playable element.\n * Uniqueness and equality are determined by `id`.\n */\nexport class Element {\n\n  constructor (data) {\n    this.data = data\n  }\n\n  get id () {\n    return `${this.data.kind}.${this.data.id}`\n  }\n\n  get uid () {\n    return Element.uid(this.id)\n  }\n\n  get value () {\n    return this.data.value\n  }\n\n  get props () {\n    return this.data.props || []\n  }\n\n  get kind () {\n    return this.data.kind.toLowerCase()\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get notes () {\n    return Note.all(this.kind, this.value)\n  }\n\n  get musical () {\n    return MUSICAL_ELEMENTS.includes(this.kind)\n  }\n\n  static uid (id) {\n    return id.split('.').pop()\n  }\n\n}\n\n/**\n * Provides a centralized and shareable store of parsed elements in a bach track.\n */\nexport class Elements {\n\n  constructor ({ source, store, cast } = {}) {\n    this.source = compose(source)\n    this.cast = cast || (_ => _)\n    this.data = store || Elements.cast(this.source.elements, cast)\n  }\n\n  get all () {\n    return this.kinds.flatMap(kind => this.every(kind))\n  }\n\n  get kinds () {\n    return Object.keys(this.data)\n  }\n\n  get values () {\n    return this.all.map(elem => elem.value)\n  }\n\n  get ids () {\n    return this.all.map(elem => elem.id)\n  }\n\n  get (id) {\n    const parts = typeof id === 'string' ? id.split('.') : []\n\n    if (parts.length === 2) {\n      const [kind, uid] = parts\n      const elem = this.data[kind][uid]\n\n      return elem ? { ...elem, id: uid, kind } : null\n    }\n\n    throw TypeError('Element id must be a string in the format of \"kind.hash\"')\n  }\n\n  one (kind) {\n    return this.every(kind)[0]\n  }\n\n  every (kind) {\n    return Object.values(this.data[kind]).map(elem => new Element(elem))\n  }\n\n  resolve (elem) {\n    // FIXME: Use json-schema validator here instead to support cross-context typing.\n    // if (elem instanceof Element) return elem\n    if (typeof elem === 'object') return elem\n    if (typeof elem === 'string') return this.get(elem)\n    if (Array.isArray(elem)) return elem.map(el => this.get(el))\n    if (elem == null) return null\n\n    throw TypeError('Failed to resolve element due to unsupported data type')\n  }\n\n  // TODO: Rename to `insert`\n  register ({ kind, value, props }) {\n    if (!kind || typeof kind !== 'string') throw TypeError('kind must be a non-empty string')\n    if (value == null) throw TypeError('value must be defined and non-null')\n\n    const elem = elementize(kind, [value, ...props])\n    const uid = Element.uid(elem.id)\n    const record = this.cast({ ...elem, id: uid, kind })\n\n    this.data[kind] = this.data[kind] || {}\n    this.data[kind][uid] = record\n\n    this.source.elements = this.data\n\n    return new Element(record)\n  }\n\n  static cast (elements, as = _ => _) {\n    if (!elements) return null\n\n    // TODO: Validate element shape with JSON Schema\n    return Object.entries(elements)\n      .reduce((acc, [kind, ids]) => {\n        const elems = Object.entries(ids)\n          .reduce((acc, [id, elem]) => ({\n            ...acc,\n            [id]: as({ id, kind, ...elem })\n          }), {})\n\n        return { ...acc, [kind]: elems }\n      }, {})\n  }\n\n}\n\n// TODO: Hoist out to Music, leaky abstraction\nexport const MUSICAL_ELEMENTS = ['note', 'chord', 'scale', ' penta'] // triad\n","import { Element } from './elements'\nimport { Note } from './note'\n\n/**\n * Represents a single beat in a track.\n *\n * Beats are represented as a tuple and may contain multiple elements\n *\n * duration -> items -> elements\n */\nexport class Beat {\n\n  constructor (data, store) {\n    this.data = data\n    this.store = store\n  }\n\n  get id () {\n    return this.data.id\n  }\n\n  get index () {\n    return this.data.index\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get items () {\n    return this.data.items.map(item => ({\n      ...item,\n      elements: item.elements.map(elem => this.store.resolve(elem))\n    }))\n  }\n\n  get elements () {\n    return this.data.items.flatMap(({ elements }) =>\n      elements.map(elem => this.store.resolve(elem))\n    )\n  }\n\n  get kinds () {\n    return this.all(({ kind }) => kind)\n  }\n\n  get values () {\n    return this.all(({ value }) => value)\n  }\n\n  get notes () {\n    return this.notesOf(this.elements)\n  }\n\n  // Provides map of elements in a beat grouped by kind.\n  // WARN: Doesn't support multiple elements of the same kind.\n  get parts () {\n    return this.elements.reduce((parts, elem) => ({\n     ...parts,\n      [elem.kind]: elem\n    }), {})\n  }\n\n  get musical () {\n    return this.elements.every(elem => elem.musical)\n  }\n\n  all (cast = _ => _) {\n    return [...new Set(this.elements.map(cast))]\n  }\n\n  find (kind) {\n    return this.elements.find(elem => kind === elem.kind)\n  }\n\n  filter (kind) {\n    return this.elements.filter(elem => kind === elem.kind)\n  }\n\n  last (kind) {\n    return this.filter(kind).reverse()[0]\n  }\n\n  either (kinds) {\n    return kinds.reduce((acc, kind) => acc.length ? acc : this.filter(kind), [])\n  }\n\n  notesOf (elements) {\n    return Note.unite(elements.flatMap(({ notes }) => notes))\n  }\n\n  static from (beats, store) {\n    if (Array.isArray(beats)) {\n      return beats.map(beat => new Beat(beat, store))\n    }\n\n    return [new Beat(beats, store)]\n  }\n\n}\n","import { Note } from './note'\nimport { Durations } from './durations'\nimport { Element, Elements, MUSICAL_ELEMENTS } from './elements'\nimport { Beat } from './beats'\nimport { compile, notesIn } from './data'\n\nexport class Music {\n\n  constructor (source) {\n    this.assign(source)\n  }\n\n  init () {\n    if (!this.parses) return null\n\n    this.store = new Elements({\n      source: this.data,\n      cast: elem => ({\n        ...elem,\n        notes: Note.all(elem.kind, elem.value)\n      })\n    })\n\n    this.beats = Beat.from(this.data.beats, this.store)\n    this.durations = new Durations(this.data)\n  }\n\n  assign (source) {\n    this.source = source\n    this.data = compile(source)\n\n    this.init()\n\n    return this\n  }\n\n  get headers () {\n    return this.data.headers\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get meter () {\n    return this.headers.meter\n  }\n\n  get tempo () {\n    return this.headers.tempo\n  }\n\n  get elements () {\n    return this.store.all\n  }\n\n  get notes () {\n    return Note.unite(\n      this.beats.flatMap(beat =>\n        beat.elements.flatMap(({ notes }) => notes)\n      )\n    )\n  }\n\n  get musical () {\n    return this.beats.every(beat => beat.musical)\n  }\n\n  get step () {\n    return this.units.beat.step\n  }\n\n  get interval () {\n    return this.units.time.step\n  }\n\n  get parses () {\n    return !this.data.fail\n  }\n\n  at (duration, is = 'step') {\n    const cursor = this.durations.at(duration, is)\n\n    return {\n      beat: this.beats[cursor.beat],\n      elems: this.store.resolve(cursor.elems),\n      play: this.store.resolve(cursor.play),\n      stop: this.store.resolve(cursor.stop)\n    }\n  }\n\n  beat (index) {\n    const cursor = this.durations.cyclic(index, { max: this.beats.length })\n\n    return this.beats[cursor]\n  }\n\n}\n"],"names":["validate","Ajv","strictTuples","code","es5","unicodeRegExp","compile","JSON","parse","schema","valid","bach","message","pretty","json","console","error","errors","TypeError","compose","c","source","strict","upgraded","replace","_typeof","l","data","scaleify","value","_context","_e$split","split","_e$split2","_slicedToArray","tonic","type","teoriaScale","toLowerCase","_concatInstanceProperty","concat","chordify","teoriaChord","_context2","scaleToString","scale","_context3","_context4","toString","name","notesInChord","notes","note","Note","valueOf","notesInScale","_context6","notesIn","kind","notesOf","chord","penta","notesIntersect","left","right","includes","static","_context7","teoriaNote","TeoriaNote","e","chroma","scientific","map","reduce","all","other","equals","hash","O","gcd","a","b","clamp","min","arguments","length","undefined","max","Math","lerp","ratio","x","y","invlerp","steps","floor","Lens","constructor","unit","is","_ref$is","_ref$as","_ref","as","_ref$min","_ref$max","_ref$grid","grid","origin","_ref$origin","_classCallCheck","E","this","Number","use","Object","assign","Units","_ref2$map","lens","_ref2$lens","S","normalize","scope","_this$lens$use","index","cast","head","tail","r","_ref3$is","_ref3","snap","_this$scope","calc","_this$scope2","cyclic","_this$scope3","_this$scope4","_this$scope5","delta","_this$scope6","range","_this$scope7","progress","fold","basis","size","container","rebase","_context8","_this","key","_defineProperty","clone","props","_mapInstanceProperty","Durations","super","init","_this2","total","units","bar","metrics","at","duration","step","state","context","_ref7","_ref6","play","stop","beat","elems","slice","metronize","_ref8$as","s","rhythmic","_ref9$units","_ref9$calc","_ref9","_ref9$size","durations","result","sort","abs","_e$units","pulse","time","ms","second","p","m","T","Element","id","_context10","uid","musical","MUSICAL_ELEMENTS","pop","z","Elements","_ref10","store","_","elements","_context11","_this4","kinds","every","values","elem","ids","_context13","get","parts","_e4","_objectSpread","one","_context14","_context15","resolve","_this5","Array","el","register","_context16","_ref11","elementize","record","t","_context17","acc","J","Beat","items","_context19","_this6","item","_context20","_ref16","_ref17","_ref18","_context23","_context24","_toConsumableArray","_Set","find","_context25","filter","_context26","last","either","unite","_ref19","beats","U","Music","parses","from","headers","meter","tempo","_context29","_ref20","interval","fail","cursor"],"mappings":"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"}