{"version":3,"file":"bach-js.esm.js","sources":["../src/validate.js","../src/data.js","../src/note.js","../../../open-source/segu/dist/segu.esm.js","../src/durations.js","../src/elements.js","../src/beats.js","../src/music.js","../src/math.js"],"sourcesContent":["import schema from 'bach-json-schema'\nimport Ajv from 'ajv'\n\nconst ajv = new Ajv({ strictTuples: false, code: { es5: true }, unicodeRegExp: false })\n\nschema.$id = 'http://codebach.tech/bach.json'\n\nexport const validate = ajv.compile(schema)\n\nexport const valid = bach => {\n  if (!validate(bach)) {\n    // TEMP: Disabled to debug potential memory leaks stemming from ajv\n    // const message = 'Invalid Bach.JSON source data'\n    // const pretty = json => JSON.stringify(json, null, 2)\n\n    // console.error(message, pretty(bach))\n    // console.error(pretty(validate.errors))\n\n    throw TypeError(`Invalid Bach.JSON source data`)\n  }\n\n  return bach\n}\n\nexport default { validate, valid }\n","import { compose as parse } from 'bach-cljs'\nimport { valid } from './validate'\nimport {\n  scale as teoriaScale,\n  chord as teoriaChord,\n} from 'teoria'\n\n/**\n * Either \"composes\" raw bach data into bach.json or, when provided an object, validates its structure as bach.json.\n * Given a string, automatically upgrades source to v3 (simple replacement of !play with play!).\n * Main entry point for integrating with core bach ClojureScript library.\n */\nexport const compose = (source, strict = true) => {\n  if (typeof source === 'string') {\n    const upgraded = source.replace(/!play/i, 'play!')\n\n    return parse(upgraded)\n  }\n\n  if (typeof source === 'object') {\n    return strict ? valid(source) : source\n  }\n\n  throw TypeError(`Unsupported Bach.JSON data type (${typeof source}). Must be a bach.json object or raw bach string.`)\n}\n\nexport const compile = (source, strict = true) => {\n  const data = compose(source, strict)\n\n  return JSON.parse(JSON.stringify(data))\n}\n\nexport function scaleify (value) {\n  if (typeof value === 'string') {\n    const [tonic, type] = value.split(' ')\n\n    return teoriaScale(tonic, type.toLowerCase())\n  } else if (typeof value === 'object') {\n    return value\n  }\n\n  throw TypeError(`Unknown scale type (${typeof value}): ${value}`)\n}\n\nexport function chordify (value) {\n  if (typeof value === 'string') {\n    return teoriaChord(value)\n  } else if (typeof value === 'object') {\n    return value\n  }\n\n  throw TypeError(`Unknown chord type (${typeof value}): ${value}`)\n}\n\nexport function scaleToString (scale) {\n  return `${scale.tonic.toString().slice(0,2)} ${scale.name}`\n}\n","import { note as teoriaNote, Note as TeoriaNote } from 'teoria'\nimport { scaleify, chordify } from './data'\n\n// TODO: Replce with individual functions and remove class, no longer necessary\n// TODO: Remove cyclic reference between data module by bringing in all note related functions.\nexport class Note {\n\n  static parse (value) {\n    if (typeof value === 'string') {\n      return teoriaNote(value)\n    } else if (typeof value === 'object' || value instanceof TeoriaNote) {\n      return value\n    }\n\n    throw TypeError(`Unknown note type (${typeof value}): ${value}`)\n  }\n\n  static all (kind, note) {\n    try {\n      return notesIn(kind, note)\n    } catch (e) {\n      return []\n    }\n  }\n\n  static hash (note) {\n    return Note.parse(note).chroma()\n  }\n\n  static pitchOf (note) {\n    return Note.valueOf(note)\n  }\n\n  // TODO: Consider using chroma instead\n  // TODO: Use this in nek, and anywhere else this same logic might be used\n  static valueOf (note) {\n    return Note.parse(note)\n      .scientific()\n      // .toLowerCase()\n      // TODO: Centralize! Replace everywhere in bach-sheet, nek, etc.\n      .replace(/[0-9]+$/, '')\n  }\n\n  static valuesOf (notes) {\n    return notes.map(Note.valueOf)\n  }\n\n  static generalize (note) {\n    return teoriaNote(Note.valueOf(note))\n  }\n\n  static unite (notes = []) {\n    return notes.reduce((all, note) => {\n      const value = Note.valueOf(note)\n      const has = Note.includes(all, value)\n\n      return !has ? all.concat(value) : all\n    }, [])\n  }\n\n  static includes (notes = [], note) {\n    return notes.some(other => Note.equals(other, note))\n  }\n\n  static equals (left, right) {\n    return Note.hash(left) == Note.hash(right)\n  }\n\n}\n\nexport function notesInChord (value) {\n  return chordify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesInScale (value) {\n  return scaleify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesIn (kind, value) {\n  const notes = notesOf[kind]\n\n  if (notes) {\n    return notes(value)\n  }\n\n  return []\n}\n\n// TODO: Allow custom note resolvers to be registered globally or locally so people can easily define their own semantics\n//  - Could call this `itemsOf` to be more generic and flexible\nexport const notesOf = {\n  note:  value => [value],\n  chord: value => notesInChord(value),\n  scale: value => notesInScale(value),\n  penta: value => notesInScale(value)\n}\n\n// TODO: Note.valueOf\nexport function notesIntersect (left, right) {\n return left.filter(note => right.includes(note))\n}\n","class Lens {\n\n  constructor ({\n    unit = 1,\n    is = 1,\n    as = 1,\n    min = 0,\n    max = 1,\n    grid = 1,\n    origin = 0\n  } = {}) {\n    this.data = { unit, is, as, min, max, grid, origin };\n    // Would improve flexibility by wrapping all getters in Lens with this, allowing Units and Lens to use the same normalization function\n    // this.normalize = normalize || Units.normalize\n  }\n\n  get unit () {\n    return this.data.unit || this.data.is || 1\n  }\n\n  get is () {\n    return this.data.is || this.unit\n  }\n\n  get as () {\n    return this.data.as || this.unit\n  }\n\n  get min () {\n    return this.data.min || 0\n  }\n\n  get max () {\n    return this.data.max || Number.MAX_SAFE_INTEGER\n  }\n\n  get grid () {\n    return this.data.grid || 1\n  }\n\n  get origin () {\n    return this.data.origin || 0\n  }\n\n  // use (data) {\n  use (data = this) {\n    return Object.assign({}, this.data, data)\n  }\n\n  assign (data) {\n    this.data = this.use(data);\n\n    return this\n  }\n\n}\n\n/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction gcd (x, y) {\n  return y === 0 ? x : gcd(y, x % y)\n}\n\n/**\n * Modifies a value so that it is always between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n// export function clamp (value, x = 0, y = 1) {\nfunction clamp (value, x, y) {\n  return Math.min(y, Math.max(x, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nfunction invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Cycles a value around an range (from x to y).\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n*/\nfunction cyclic (value, x, y) {\n  return (value >= x ? value : value + y) % y\n}\n\n/**\n * Projects a value given a source domain (from) to a target domain (to).\n * Domains are provided as range tuples ([min, max]).\n *\n * @param {Number} value\n * @param {Array<Number>} from\n * @param {Array<Number>} to\n * @returns {Number}\n */\nfunction project (value, from = [0, 0], to = [0, 0]) {\n  return (value - from[0]) / (from[1] - from[0]) * (to[1] - to[0]) + to[0]\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nfunction steps (ratio, all) {\n  ratio %= 1;\n\n  if (ratio < 0) ratio += 1;\n\n  return all[Math.floor(ratio * all.length)]\n}\n\n// TODO: Support calc method for allowing conversion of units via string (like CSS):\n\nclass Units {\n\n  constructor ({\n    map = {},\n    lens = {}\n  } = {}) {\n    this.map = map;\n    this.lens = new Lens(lens);\n  }\n\n  normalize (unit) {\n    if (typeof unit === 'number') {\n      return unit\n    }\n\n    if (typeof unit === 'string') {\n      const value = this.map[unit] || 1;\n\n      return typeof value === 'function' ? value(unit, this) : Number(value)\n    }\n\n    return 1\n  }\n\n  // scope (value = 1, lens = this.lens) {\n  scope (value = 1, lens = null) {\n    const { is, as, min, max, origin } = this.lens.use(lens);\n    const index = this.cast(value - origin, { is, as });\n    const head = this.cast(min || 0, { is, as });\n    const tail = this.cast(max || value, { is, as });\n\n    return { value, index, head, tail }\n  }\n\n  // TODO: Allow `is` and `as` to be provided as mapping functions\n  cast (value = 1, { is = this.lens.unit, as = this.lens.unit } = {}) {\n    return this.normalize(value) / (this.normalize(as) / this.normalize(is))\n  }\n\n  snap (value, lens = this.lens) {\n    const { index } = this.scope(value, lens);\n    const unit = this.normalize(lens.as || lens.unit);\n    const calc = typeof lens.calc === 'function' ? lens.calc : Math.floor;\n\n    return calc(index) * unit\n  }\n\n  clamp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return clamp(index, head, tail)\n  }\n\n  cyclic (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return cyclic(index, head, tail)\n  }\n\n  lerp (ratio, lens) {\n    const { head, tail } = this.scope(0, lens);\n\n    return lerp(ratio, head, tail)\n  }\n\n  invlerp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return invlerp(index, head, tail)\n  }\n\n  delta (value, lens) {\n    const { index, head } = this.scope(value, lens);\n\n    return index - head\n  }\n\n  range (value, lens) {\n    const { head, tail } = this.scope(value, lens);\n\n    return tail - head\n  }\n\n  progress (value, lens) {\n    const delta = this.delta(value, lens);\n    const range = this.range(value, lens);\n\n    return delta / range\n  }\n\n  fold (value, lens = this.lens) {\n    const grid = lens.grid || 1;\n    const basis = gcd(value, grid);\n    const size = this.clamp(value, lens);\n    const container = this.snap(size, { as: basis });\n    const ratio = Math.max(1, Math.min(value / basis, grid));\n    const min = value >= grid ? grid : basis;\n\n    return Math.max(min, this.snap(container, { as: ratio }))\n  }\n\n  // Changes the base unit to the provided key by recalculating and replacing the unit map pairs.\n  // TODO: Test, and ensure that the base unit is equal to 1 (or, could just use scale)\n  rebase (unit = this.lens.unit) {\n    if (unit === this.lens.unit) return this\n\n    const map = Object.entries(this.map)\n      .reduce((map, [key, value]) => Object.assign(map, {\n        [key]: this.cast(value, { is: this.lens.is, as: unit })\n      }, { [unit]: 1 }));\n\n    this.map = map;\n    this.lens.unit = unit;\n\n    return this\n  }\n\n  clone (props) {\n    const map = Object.assign({}, this.map, props.map);\n    const lens = Object.assign({}, this.lens, props.lens);\n\n    return new Units({ map, lens })\n  }\n\n  static use (props) {\n    return new Units(props)\n  }\n}\n\nconst units = props => new Units(props);\n\nexport { Units, clamp, cyclic, gcd, invlerp, lerp, project, steps, units };\n//# sourceMappingURL=segu.esm.js.map\n","import { compile, compose } from './data'\nimport { Units } from 'segu'\n\n/**\n * Provides essential duration values and calculations of a bach track.\n * Enables trivial conversions between any duration unit via cast (based\n * on milliseconds) and unitize (based on steps, bach's iteration unit).\n */\nexport class Durations extends Units {\n\n  constructor (source, lens) {\n    super({ map: null, lens })\n\n    this.source = source\n    this.data = compile(source)\n\n    this.init()\n  }\n\n  init () {\n    this.map = Durations.map(this.data)\n\n    this.lens.assign({ unit: 'step', max: this.total })\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get steps () {\n    return this.data.steps\n  }\n\n  get bar () {\n    return this.units.bar\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get min () {\n    return this.metrics.min\n  }\n\n  get max () {\n    return this.metrics.max\n  }\n\n  get total () {\n    return this.metrics.total\n  }\n\n  at (duration, is = 'step') {\n    const step = Math.floor(this.cast(duration, { is, as: 'step' }))\n    const index = this.cyclic(step)\n    const state = this.steps[index]\n    const [context, play, stop] = state || []\n\n    return {\n      beat: context[0],\n      elems: context.slice(1),\n      play,\n      stop,\n      index\n    }\n  }\n\n  metronize (duration, { is = 'ms', as = 'pulse' } = {}) {\n    const index = this.cast(duration, { is, as })\n    const bar = this.cast(this.bar.step, { as })\n\n    return Math.floor(index % bar)\n  }\n\n  // TODO: Either replace or improve via inspiration with this:\n  // @see: https://tonejs.github.io/docs/r13/Time#quantize\n  rhythmic (duration, {\n    is = 'ms',\n    units = ['8n', '4n'],\n    calc = 'floor',\n    size = 'min'\n  } = {}) {\n    const durations = units\n      .map(unit => {\n        const value = this.cast(duration, { is, as: unit })\n        const result = Math[calc](value)\n\n        return this.cast(result, { is: unit, as: is })\n      })\n      .sort((a, b) => Math.abs(duration - a) - Math.abs(duration - b))\n\n    return Math[size](...durations)\n  }\n\n  static map (source) {\n    const data = compose(source, false)\n    const { beat, step, pulse, time, bar } = data.units\n\n    return {\n      step: 1,\n      pulse: 1 / (beat.step / beat.pulse),\n      bar: bar.step,\n      ms: 1 / time.step,\n      second: (1 / time.step) * 1000,\n      's': step,\n      'p': pulse,\n      'm': bar.step,\n      '2n': bar.step / 2,\n      '4n': bar.step / 4,\n      '8n': bar.step / 8,\n      '16n': bar.step / 16,\n      '32n': bar.step / 32,\n      '64n': bar.step / 64,\n      '4up': bar.step - (bar.step / 4),\n      '8up': bar.step - (bar.step / 8),\n      '16up': bar.step - (bar.step / 16),\n      '32up': bar.step - (bar.step / 32),\n      '64up': bar.step - (bar.step / 64)\n    }\n  }\n\n}\n","import { elementize } from 'bach-cljs'\nimport { note as teoriaNote } from 'teoria'\n\nimport { compose } from './data'\nimport { Note } from './note'\n\n/**\n * Represents a single and unique playable element.\n * Uniqueness and equality are determined by `id`.\n */\nexport class Element {\n\n  constructor (data) {\n    this.data = data\n  }\n\n  get id () {\n    return `${this.data.kind}.${this.data.id}`\n  }\n\n  get uid () {\n    return Element.uid(this.id)\n  }\n\n  get value () {\n    return this.data.value\n  }\n\n  get props () {\n    return this.data.props || []\n  }\n\n  get kind () {\n    return this.data.kind.toLowerCase()\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get notes () {\n    return Note.all(this.kind, this.value)\n  }\n\n  get musical () {\n    return MUSICAL_ELEMENTS.includes(this.kind)\n  }\n\n  static uid (id) {\n    return id.split('.').pop()\n  }\n\n}\n\n/**\n * Provides a centralized and shareable store of parsed elements in a bach track.\n */\nexport class Elements {\n\n  constructor ({ source, store, cast } = {}) {\n    // this.source = compose(source)\n    this.source = compose(source, false)\n    this.cast = cast || (_ => _)\n    this.data = store || Elements.cast(this.source.elements, this.cast)\n  }\n\n  get all () {\n    return this.kinds.flatMap(kind => this.every(kind))\n  }\n\n  get kinds () {\n    return Object.keys(this.data)\n  }\n\n  get values () {\n    return this.all.map(elem => elem.value)\n  }\n\n  get ids () {\n    return this.all.map(elem => elem.id)\n  }\n\n  get (id) {\n    const parts = typeof id === 'string' ? id.split('.') : []\n\n    if (parts.length === 2) {\n      const [kind, uid] = parts\n      const elem = this.data[kind][uid]\n\n      return elem ? { ...elem, id: uid, kind } : null\n    }\n\n    throw TypeError('Element id must be a string in the format of \"kind.hash\"')\n  }\n\n  one (kind) {\n    return this.every(kind)[0]\n  }\n\n  every (kind) {\n    return Object.values(this.data[kind]).map(elem => new Element(elem))\n  }\n\n  resolve (elem) {\n    // FIXME: Use json-schema validator here instead to support cross-context typing.\n    // if (elem instanceof Element) return elem\n    if (typeof elem === 'object') return elem\n    if (typeof elem === 'string') return this.get(elem)\n    if (Array.isArray(elem)) return elem.map(el => this.get(el))\n    if (elem == null) return null\n\n    throw TypeError('Failed to resolve element due to unsupported data type')\n  }\n\n  // TODO: Rename to `insert`\n  register ({ kind, value, props }) {\n    if (!kind || typeof kind !== 'string') throw TypeError('kind must be a non-empty string')\n    if (value == null) throw TypeError('value must be defined and non-null')\n\n    const elem = elementize(kind, [value, ...props])\n    const uid = Element.uid(elem.id)\n    const record = this.cast({ ...elem, id: uid, kind })\n\n    this.data[kind] = this.data[kind] || {}\n    this.data[kind][uid] = record\n\n    this.source.elements = this.data\n\n    return new Element(record)\n  }\n\n  static cast (elements, as = _ => _) {\n    if (!elements) return null\n\n    // TODO: Validate element shape with JSON Schema\n    return Object.entries(elements)\n      .reduce((acc, [kind, ids]) => {\n        const elems = Object.entries(ids)\n          .reduce((acc, [id, elem]) => ({\n            ...acc,\n            [id]: as({ id, kind, ...elem })\n          }), {})\n\n        return { ...acc, [kind]: elems }\n      }, {})\n  }\n\n}\n\n// TODO: Hoist out to Music, leaky abstraction\nexport const MUSICAL_ELEMENTS = ['note', 'chord', 'scale', ' penta'] // triad\n","import { Element } from './elements'\nimport { Note } from './note'\n\n/**\n * Represents a single beat in a track.\n *\n * Beats are represented as a tuple and may contain multiple elements\n *\n * duration -> items -> elements\n */\nexport class Beat {\n\n  constructor (data, store) {\n    this.data = data\n    this.store = store\n  }\n\n  get id () {\n    return this.data.id\n  }\n\n  get index () {\n    return this.data.index\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get items () {\n    return this.data.items.map(item => ({\n      ...item,\n      elements: item.elements.map(elem => this.store.resolve(elem))\n    }))\n  }\n\n  get elements () {\n    return this.data.items.flatMap(({ elements }) =>\n      elements.map(elem => this.store.resolve(elem))\n    )\n  }\n\n  get kinds () {\n    return this.all(({ kind }) => kind)\n  }\n\n  get values () {\n    return this.all(({ value }) => value)\n  }\n\n  get notes () {\n    return this.notesOf(this.elements)\n  }\n\n  // Provides map of elements in a beat grouped by kind.\n  // WARN: Doesn't support multiple elements of the same kind.\n  get parts () {\n    return this.elements.reduce((parts, elem) => ({\n     ...parts,\n      [elem.kind]: elem\n    }), {})\n  }\n\n  get musical () {\n    return this.elements.every(elem => elem.musical)\n  }\n\n  all (cast = _ => _) {\n    return [...new Set(this.elements.map(cast))]\n  }\n\n  find (kind) {\n    return this.elements.find(elem => kind === elem.kind)\n  }\n\n  filter (kind) {\n    return this.elements.filter(elem => kind === elem.kind)\n  }\n\n  last (kind) {\n    return this.filter(kind).reverse()[0]\n  }\n\n  either (kinds) {\n    return kinds.reduce((acc, kind) => acc.length ? acc : this.filter(kind), [])\n  }\n\n  notesOf (elements) {\n    return Note.unite(elements.flatMap(({ notes }) => notes))\n  }\n\n  static from (beats, store) {\n    if (Array.isArray(beats)) {\n      return beats.map(beat => new Beat(beat, store))\n    }\n\n    return [new Beat(beats, store)]\n  }\n\n}\n","import { Note } from './note'\nimport { Durations } from './durations'\nimport { Element, Elements, MUSICAL_ELEMENTS } from './elements'\nimport { Beat } from './beats'\nimport { compile } from './data'\nimport { notesIn } from './note'\n\nexport class Music {\n\n  constructor (source) {\n    this.assign(source)\n  }\n\n  init () {\n    if (!this.parses) return null\n\n    this.store = new Elements({\n      source: this.data,\n      cast: elem => ({\n        ...elem,\n        notes: Note.all(elem.kind, elem.value)\n      })\n    })\n\n    this.beats = Beat.from(this.data.beats, this.store)\n    this.durations = new Durations(this.data)\n  }\n\n  assign (source) {\n    this.source = source\n    this.data = compile(source, false)\n\n    this.init()\n\n    return this\n  }\n\n  get headers () {\n    return this.data.headers\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get meter () {\n    return this.headers.meter\n  }\n\n  get tempo () {\n    return this.headers.tempo\n  }\n\n  get elements () {\n    return this.store.all\n  }\n\n  get notes () {\n    return Note.unite(\n      this.beats.flatMap(beat =>\n        beat.elements.flatMap(({ notes }) => notes)\n      )\n    )\n  }\n\n  get musical () {\n    return this.beats.every(beat => beat.musical)\n  }\n\n  get step () {\n    return this.units.beat.step\n  }\n\n  get interval () {\n    return this.units.time.step\n  }\n\n  get parses () {\n    return !this.data.fail\n  }\n\n  at (duration, is = 'step') {\n    const cursor = this.durations.at(duration, is)\n\n    return {\n      beat: this.beats[cursor.beat],\n      elems: this.store.resolve(cursor.elems),\n      play: this.store.resolve(cursor.play),\n      stop: this.store.resolve(cursor.stop)\n    }\n  }\n\n  beat (index) {\n    const cursor = this.durations.cyclic(index, { max: this.beats.length })\n\n    return this.beats[cursor]\n  }\n\n}\n","/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} a\n * @param {Number} b\n * @returns {Number}\n */\nexport function gcd (a, b) {\n  if (b == 0) {\n    return a\n  }\n\n  return gcd(b, a % b)\n}\n\n/**\n * Modifies a value so that it is always between the provided min and max\n *\n * @param {Number} value\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nexport function clamp (value, min = 0, max = 1) {\n  return Math.min(max, Math.max(min, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nexport function invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nexport function steps (ratio, all) {\n  ratio %= 1\n\n  if (ratio < 0) ratio += 1\n\n  return all[Math.floor(ratio * all.length)]\n}\n"],"names":["ajv","Ajv","strictTuples","code","es5","unicodeRegExp","schema","$id","validate","compile","valid","bach","TypeError","compose","l","source","strict","upgraded","replace","parse","arguments","length","undefined","data","JSON","scaleify","value","_e$split","split","_e$split2","_slicedToArray","tonic","type","teoriaScale","toLowerCase","_concatInstanceProperty","_context","concat","_typeof","chordify","teoriaChord","_context2","scaleToString","scale","_context3","toString","slice","name","Note","_context5","teoriaNote","TeoriaNote","key","all","kind","note","notesIn","e","hash","chroma","pitchOf","valueOf","scientific","valuesOf","notes","generalize","unite","includes","some","other","equals","left","right","g","notesInChord","notesInScale","notesOf","chord","penta","notesIntersect","filter","Lens","O","unit","is","_ref$is","_ref$as","_ref","as","_ref$min","min","max","_ref$max","_ref$grid","grid","origin","_ref$origin","_classCallCheck","this","_createClass","get","Number","use","Object","assign","gcd","x","y","clamp","Math","Units","j","map","_ref2$map","lens","_ref2$lens","normalize","scope","_this$lens$use","index","cast","head","tail","r","_ref3$is","_ref3","_ref3$as","snap","_this$scope","calc","floor","_this$scope2","cyclic","_this$scope3","lerp","ratio","_this$scope4","invlerp","_this$scope5","delta","_this$scope6","range","_this$scope7","progress","fold","basis","size","container","rebase","_context8","_this","_defineProperty","clone","props","_mapInstanceProperty","s","Durations","E","super","init","_this2","total","units","steps","bar","metrics","at","duration","step","state","_ref7","_ref6","context","play","stop","beat","elems","metronize","_ref8$is","_ref8$as","_ref8","rhythmic","_ref9$units","_ref9$calc","_ref9$size","_ref9","durations","result","call","_context9","a","b","abs","pulse","time","ms","second","p","m","Element","$","id","_context10","uid","MUSICAL_ELEMENTS","pop","Elements","T","store","_ref10","_","elements","_context11","_this4","kinds","every","values","elem","ids","parts","_e3","one","resolve","_this5","Array","el","register","_ref11","elementize","_context16","record","_context17","reduce","acc","_ref15","_objectSpread","Beat","N","_context19","_this6","items","item","flatMap","_ref16","_ref17","_ref18","_context22","_context23","musical","_context24","_toConsumableArray","_Set","find","_context25","last","_context27","_context28","reverse","either","_ref19","from","beats","Music","S","parses","headers","meter","tempo","_ref20","fail","cursor"],"mappings":"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"}