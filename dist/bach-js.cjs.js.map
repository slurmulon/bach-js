{"version":3,"file":"bach-js.cjs.js","sources":["../src/validate.js","../src/data.js","../src/note.js","../../../open-source/segu/dist/segu.esm.js","../src/durations.js","../src/elements.js","../src/beats.js","../src/math.js","../src/music.js"],"sourcesContent":["import schema from 'bach-json-schema'\nimport Ajv from 'ajv'\n\nconst ajv = new Ajv({ strictTuples: false, code: { es5: true }, unicodeRegExp: false })\n\nschema.$id = 'http://codebach.tech/bach.json'\n\nexport const validate = ajv.compile(schema)\n\nexport const valid = bach => {\n  if (!validate(bach)) {\n    // TEMP: Disabled to debug potential memory leaks stemming from ajv\n    // const message = 'Invalid Bach.JSON source data'\n    // const pretty = json => JSON.stringify(json, null, 2)\n\n    // console.error(message, pretty(bach))\n    // console.error(pretty(validate.errors))\n\n    throw TypeError(`Invalid Bach.JSON source data`)\n  }\n\n  return bach\n}\n\nexport default { validate, valid }\n","import { compose as parse } from 'bach-cljs'\nimport { valid } from './validate'\nimport {\n  scale as teoriaScale,\n  chord as teoriaChord,\n} from 'teoria'\n\n/**\n * Either \"composes\" raw bach data into bach.json or, when provided an object, validates its structure as bach.json.\n * Given a string, automatically upgrades source to v3 (simple replacement of !play with play!).\n * Main entry point for integrating with core bach ClojureScript library.\n */\nexport const compose = (source, strict = true) => {\n  if (typeof source === 'string') {\n    const upgraded = source.replace(/!play/i, 'play!')\n\n    return parse(upgraded)\n  }\n\n  if (typeof source === 'object') {\n    return strict ? valid(source) : source\n  }\n\n  throw TypeError(`Unsupported Bach.JSON data type (${typeof source}). Must be a bach.json object or raw bach string.`)\n}\n\nexport const compile = (source, strict = true) => {\n  const data = compose(source, strict)\n\n  return JSON.parse(JSON.stringify(data))\n}\n\nexport function scaleify (value) {\n  if (typeof value === 'string') {\n    const [tonic, type] = value.split(' ')\n\n    return teoriaScale(tonic, type.toLowerCase())\n  } else if (typeof value === 'object') {\n    return value\n  }\n\n  throw TypeError(`Unknown scale type (${typeof value}): ${value}`)\n}\n\nexport function chordify (value) {\n  if (typeof value === 'string') {\n    return teoriaChord(value)\n  } else if (typeof value === 'object') {\n    return value\n  }\n\n  throw TypeError(`Unknown chord type (${typeof value}): ${value}`)\n}\n\nexport function scaleToString (scale) {\n  return `${scale.tonic.toString().slice(0,2)} ${scale.name}`\n}\n","import { note as teoriaNote, Note as TeoriaNote } from 'teoria'\nimport { scaleify, chordify } from './data'\n\n// TODO: Replce with individual functions and remove class, no longer necessary\n// TODO: Remove cyclic reference between data module by bringing in all note related functions.\nexport class Note {\n\n  static parse (value) {\n    if (typeof value === 'string') {\n      return teoriaNote(value)\n    } else if (typeof value === 'object' || value instanceof TeoriaNote) {\n      return value\n    }\n\n    throw TypeError(`Unknown note type (${typeof value}): ${value}`)\n  }\n\n  static all (kind, note) {\n    try {\n      return notesIn(kind, note)\n    } catch (e) {\n      return []\n    }\n  }\n\n  static hash (note) {\n    return Note.parse(note).chroma()\n  }\n\n  static pitchOf (note) {\n    return Note.valueOf(note)\n  }\n\n  // TODO: Consider using chroma instead\n  // TODO: Use this in nek, and anywhere else this same logic might be used\n  static valueOf (note) {\n    return Note.parse(note)\n      .scientific()\n      // .toLowerCase()\n      // TODO: Centralize! Replace everywhere in bach-sheet, nek, etc.\n      .replace(/[0-9]+$/, '')\n  }\n\n  static valuesOf (notes) {\n    return notes.map(Note.valueOf)\n  }\n\n  static generalize (note) {\n    return teoriaNote(Note.valueOf(note))\n  }\n\n  static unite (notes = []) {\n    return notes.reduce((all, note) => {\n      const value = Note.valueOf(note)\n      const has = Note.includes(all, value)\n\n      return !has ? all.concat(value) : all\n    }, [])\n  }\n\n  static includes (notes = [], note) {\n    return notes.some(other => Note.equals(other, note))\n  }\n\n  static equals (left, right) {\n    return Note.hash(left) == Note.hash(right)\n  }\n\n}\n\nexport function notesInChord (value) {\n  return chordify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesInScale (value) {\n  return scaleify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesIn (kind, value) {\n  const notes = notesOf[kind]\n\n  if (notes) {\n    return notes(value)\n  }\n\n  return []\n}\n\n// TODO: Allow custom note resolvers to be registered globally or locally so people can easily define their own semantics\n//  - Could call this `itemsOf` to be more generic and flexible\nexport const notesOf = {\n  note:  value => [value],\n  chord: value => notesInChord(value),\n  scale: value => notesInScale(value),\n  penta: value => notesInScale(value)\n}\n\n// TODO: Note.valueOf\nexport function notesIntersect (left, right) {\n return left.filter(note => right.includes(note))\n}\n","class Lens {\n\n  constructor ({\n    unit = 1,\n    is = 1,\n    as = 1,\n    min = 0,\n    max = 1,\n    grid = 1,\n    origin = 0\n  } = {}) {\n    this.data = { unit, is, as, min, max, grid, origin };\n    // Would improve flexibility by wrapping all getters in Lens with this, allowing Units and Lens to use the same normalization function\n    // this.normalize = normalize || Units.normalize\n  }\n\n  get unit () {\n    return this.data.unit || this.data.is || 1\n  }\n\n  get is () {\n    return this.data.is || this.unit\n  }\n\n  get as () {\n    return this.data.as || this.unit\n  }\n\n  get min () {\n    return this.data.min || 0\n  }\n\n  get max () {\n    return this.data.max || Number.MAX_SAFE_INTEGER\n  }\n\n  get grid () {\n    return this.data.grid || 1\n  }\n\n  get origin () {\n    return this.data.origin || 0\n  }\n\n  // use (data) {\n  use (data = this) {\n    return Object.assign({}, this.data, data)\n  }\n\n  assign (data) {\n    this.data = this.use(data);\n\n    return this\n  }\n\n}\n\n/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction gcd (x, y) {\n  return y === 0 ? x : gcd(y, x % y)\n}\n\n/**\n * Modifies a value so that it is always between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n// export function clamp (value, x = 0, y = 1) {\nfunction clamp (value, x, y) {\n  return Math.min(y, Math.max(x, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nfunction invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Cycles a value around an range (from x to y).\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n*/\nfunction cyclic (value, x, y) {\n  return (value >= x ? value : value + y) % y\n}\n\n/**\n * Projects a value given a source domain (from) to a target domain (to).\n * Domains are provided as range tuples ([min, max]).\n *\n * @param {Number} value\n * @param {Array<Number>} from\n * @param {Array<Number>} to\n * @returns {Number}\n */\nfunction project (value, from = [0, 0], to = [0, 0]) {\n  return (value - from[0]) / (from[1] - from[0]) * (to[1] - to[0]) + to[0]\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nfunction steps (ratio, all) {\n  ratio %= 1;\n\n  if (ratio < 0) ratio += 1;\n\n  return all[Math.floor(ratio * all.length)]\n}\n\n// TODO: Support calc method for allowing conversion of units via string (like CSS):\n\nclass Units {\n\n  constructor ({\n    map = {},\n    lens = {}\n  } = {}) {\n    this.map = map;\n    this.lens = new Lens(lens);\n  }\n\n  normalize (unit) {\n    if (typeof unit === 'number') {\n      return unit\n    }\n\n    if (typeof unit === 'string') {\n      const value = this.map[unit] || 1;\n\n      return typeof value === 'function' ? value(unit, this) : Number(value)\n    }\n\n    return 1\n  }\n\n  // scope (value = 1, lens = this.lens) {\n  scope (value = 1, lens = null) {\n    const { is, as, min, max, origin } = this.lens.use(lens);\n    const index = this.cast(value - origin, { is, as });\n    const head = this.cast(min || 0, { is, as });\n    const tail = this.cast(max || value, { is, as });\n\n    return { value, index, head, tail }\n  }\n\n  // TODO: Allow `is` and `as` to be provided as mapping functions\n  cast (value = 1, { is = this.lens.unit, as = this.lens.unit } = {}) {\n    return this.normalize(value) / (this.normalize(as) / this.normalize(is))\n  }\n\n  snap (value, lens = this.lens) {\n    const { index } = this.scope(value, lens);\n    const unit = this.normalize(lens.as || lens.unit);\n    const calc = typeof lens.calc === 'function' ? lens.calc : Math.floor;\n\n    return calc(index) * unit\n  }\n\n  clamp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return clamp(index, head, tail)\n  }\n\n  cyclic (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return cyclic(index, head, tail)\n  }\n\n  lerp (ratio, lens) {\n    const { head, tail } = this.scope(0, lens);\n\n    return lerp(ratio, head, tail)\n  }\n\n  invlerp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return invlerp(index, head, tail)\n  }\n\n  delta (value, lens) {\n    const { index, head } = this.scope(value, lens);\n\n    return index - head\n  }\n\n  range (value, lens) {\n    const { head, tail } = this.scope(value, lens);\n\n    return tail - head\n  }\n\n  progress (value, lens) {\n    const delta = this.delta(value, lens);\n    const range = this.range(value, lens);\n\n    return delta / range\n  }\n\n  fold (value, lens = this.lens) {\n    const grid = lens.grid || 1;\n    const basis = gcd(value, grid);\n    const size = this.clamp(value, lens);\n    const container = this.snap(size, { as: basis });\n    const ratio = Math.max(1, Math.min(value / basis, grid));\n    const min = value >= grid ? grid : basis;\n\n    return Math.max(min, this.snap(container, { as: ratio }))\n  }\n\n  // Changes the base unit to the provided key by recalculating and replacing the unit map pairs.\n  // TODO: Test, and ensure that the base unit is equal to 1 (or, could just use scale)\n  rebase (unit = this.lens.unit) {\n    if (unit === this.lens.unit) return this\n\n    const map = Object.entries(this.map)\n      .reduce((map, [key, value]) => Object.assign(map, {\n        [key]: this.cast(value, { is: this.lens.is, as: unit })\n      }, { [unit]: 1 }));\n\n    this.map = map;\n    this.lens.unit = unit;\n\n    return this\n  }\n\n  clone (props) {\n    const map = Object.assign({}, this.map, props.map);\n    const lens = Object.assign({}, this.lens, props.lens);\n\n    return new Units({ map, lens })\n  }\n\n  static use (props) {\n    return new Units(props)\n  }\n}\n\nconst units = props => new Units(props);\n\nexport { Units, clamp, cyclic, gcd, invlerp, lerp, project, steps, units };\n//# sourceMappingURL=segu.esm.js.map\n","import { compile, compose } from './data'\nimport { Units } from 'segu'\n\n/**\n * Provides essential duration values and calculations of a bach track.\n * Enables trivial conversions between any duration unit via cast (based\n * on milliseconds) and unitize (based on steps, bach's iteration unit).\n */\nexport class Durations extends Units {\n\n  constructor (source, lens) {\n    super({ map: null, lens })\n\n    this.source = source\n    this.data = compile(source)\n\n    this.init()\n  }\n\n  init () {\n    this.map = Durations.map(this.data)\n\n    this.lens.assign({ unit: 'step', max: this.total })\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get steps () {\n    return this.data.steps\n  }\n\n  get bar () {\n    return this.units.bar\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get min () {\n    return this.metrics.min\n  }\n\n  get max () {\n    return this.metrics.max\n  }\n\n  get total () {\n    return this.metrics.total\n  }\n\n  at (duration, is = 'step') {\n    const step = Math.floor(this.cast(duration, { is, as: 'step' }))\n    const index = this.cyclic(step)\n    const state = this.steps[index]\n    const [context, play, stop] = state || []\n\n    return {\n      beat: context[0],\n      elems: context.slice(1),\n      play,\n      stop,\n      index\n    }\n  }\n\n  metronize (duration, { is = 'ms', as = 'pulse' } = {}) {\n    const index = this.cast(duration, { is, as })\n    const bar = this.cast(this.bar.step, { as })\n\n    return Math.floor(index % bar)\n  }\n\n  // TODO: Either replace or improve via inspiration with this:\n  // @see: https://tonejs.github.io/docs/r13/Time#quantize\n  rhythmic (duration, {\n    is = 'ms',\n    units = ['8n', '4n'],\n    calc = 'floor',\n    size = 'min'\n  } = {}) {\n    const durations = units\n      .map(unit => {\n        const value = this.cast(duration, { is, as: unit })\n        const result = Math[calc](value)\n\n        return this.cast(result, { is: unit, as: is })\n      })\n      .sort((a, b) => Math.abs(duration - a) - Math.abs(duration - b))\n\n    return Math[size](...durations)\n  }\n\n  static map (source) {\n    const data = compose(source, false)\n    const { beat, step, pulse, time, bar } = data.units\n\n    return {\n      step: 1,\n      pulse: 1 / (beat.step / beat.pulse),\n      bar: bar.step,\n      ms: 1 / time.step,\n      second: (1 / time.step) * 1000,\n      's': step,\n      'p': pulse,\n      'm': bar.step,\n      '2n': bar.step / 2,\n      '4n': bar.step / 4,\n      '8n': bar.step / 8,\n      '16n': bar.step / 16,\n      '32n': bar.step / 32,\n      '64n': bar.step / 64,\n      '4up': bar.step - (bar.step / 4),\n      '8up': bar.step - (bar.step / 8),\n      '16up': bar.step - (bar.step / 16),\n      '32up': bar.step - (bar.step / 32),\n      '64up': bar.step - (bar.step / 64)\n    }\n  }\n\n}\n","import { elementize } from 'bach-cljs'\nimport { note as teoriaNote } from 'teoria'\n\nimport { compose } from './data'\nimport { Note } from './note'\n\n/**\n * Represents a single and unique playable element.\n * Uniqueness and equality are determined by `id`.\n */\nexport class Element {\n\n  constructor (data) {\n    this.data = data\n  }\n\n  get id () {\n    return `${this.data.kind}.${this.data.id}`\n  }\n\n  get uid () {\n    return Element.uid(this.id)\n  }\n\n  get value () {\n    return this.data.value\n  }\n\n  get props () {\n    return this.data.props || []\n  }\n\n  get kind () {\n    return this.data.kind.toLowerCase()\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get notes () {\n    return Note.all(this.kind, this.value)\n  }\n\n  get musical () {\n    return MUSICAL_ELEMENTS.includes(this.kind)\n  }\n\n  static uid (id) {\n    return id.split('.').pop()\n  }\n\n}\n\n/**\n * Provides a centralized and shareable store of parsed elements in a bach track.\n */\nexport class Elements {\n\n  constructor ({ source, store, cast } = {}) {\n    // this.source = compose(source)\n    this.source = compose(source, false)\n    this.cast = cast || (_ => _)\n    this.data = store || Elements.cast(this.source.elements, this.cast)\n  }\n\n  get all () {\n    return this.kinds.flatMap(kind => this.every(kind))\n  }\n\n  get kinds () {\n    return Object.keys(this.data)\n  }\n\n  get values () {\n    return this.all.map(elem => elem.value)\n  }\n\n  get ids () {\n    return this.all.map(elem => elem.id)\n  }\n\n  get (id) {\n    const parts = typeof id === 'string' ? id.split('.') : []\n\n    if (parts.length === 2) {\n      const [kind, uid] = parts\n      const elem = this.data[kind][uid]\n\n      return elem ? { ...elem, id: uid, kind } : null\n    }\n\n    throw TypeError('Element id must be a string in the format of \"kind.hash\"')\n  }\n\n  one (kind) {\n    return this.every(kind)[0]\n  }\n\n  every (kind) {\n    return Object.values(this.data[kind]).map(elem => new Element(elem))\n  }\n\n  resolve (elem) {\n    // FIXME: Use json-schema validator here instead to support cross-context typing.\n    // if (elem instanceof Element) return elem\n    if (typeof elem === 'object') return elem\n    if (typeof elem === 'string') return this.get(elem)\n    if (Array.isArray(elem)) return elem.map(el => this.get(el))\n    if (elem == null) return null\n\n    throw TypeError('Failed to resolve element due to unsupported data type')\n  }\n\n  // TODO: Rename to `insert`\n  register ({ kind, value, props }) {\n    if (!kind || typeof kind !== 'string') throw TypeError('kind must be a non-empty string')\n    if (value == null) throw TypeError('value must be defined and non-null')\n\n    const elem = elementize(kind, [value, ...props])\n    const uid = Element.uid(elem.id)\n    const record = this.cast({ ...elem, id: uid, kind })\n\n    this.data[kind] = this.data[kind] || {}\n    this.data[kind][uid] = record\n\n    this.source.elements = this.data\n\n    return new Element(record)\n  }\n\n  static cast (elements, as = _ => _) {\n    if (!elements) return null\n\n    // TODO: Validate element shape with JSON Schema\n    return Object.entries(elements)\n      .reduce((acc, [kind, ids]) => {\n        const elems = Object.entries(ids)\n          .reduce((acc, [id, elem]) => ({\n            ...acc,\n            [id]: as({ id, kind, ...elem })\n          }), {})\n\n        return { ...acc, [kind]: elems }\n      }, {})\n  }\n\n}\n\n// TODO: Hoist out to Music, leaky abstraction\nexport const MUSICAL_ELEMENTS = ['note', 'chord', 'scale', ' penta'] // triad\n","import { Element } from './elements'\nimport { Note } from './note'\n\n/**\n * Represents a single beat in a track.\n *\n * Beats are represented as a tuple and may contain multiple elements\n *\n * duration -> items -> elements\n */\nexport class Beat {\n\n  constructor (data, store) {\n    this.data = data\n    this.store = store\n  }\n\n  get id () {\n    return this.data.id\n  }\n\n  get index () {\n    return this.data.index\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get items () {\n    return this.data.items.map(item => ({\n      ...item,\n      elements: item.elements.map(elem => this.store.resolve(elem))\n    }))\n  }\n\n  get elements () {\n    return this.data.items.flatMap(({ elements }) =>\n      elements.map(elem => this.store.resolve(elem))\n    )\n  }\n\n  get kinds () {\n    return this.all(({ kind }) => kind)\n  }\n\n  get values () {\n    return this.all(({ value }) => value)\n  }\n\n  get notes () {\n    return this.notesOf(this.elements)\n  }\n\n  // Provides map of elements in a beat grouped by kind.\n  // WARN: Doesn't support multiple elements of the same kind.\n  get parts () {\n    return this.elements.reduce((parts, elem) => ({\n     ...parts,\n      [elem.kind]: elem\n    }), {})\n  }\n\n  get musical () {\n    return this.elements.every(elem => elem.musical)\n  }\n\n  all (cast = _ => _) {\n    return [...new Set(this.elements.map(cast))]\n  }\n\n  find (kind) {\n    return this.elements.find(elem => kind === elem.kind)\n  }\n\n  filter (kind) {\n    return this.elements.filter(elem => kind === elem.kind)\n  }\n\n  last (kind) {\n    return this.filter(kind).reverse()[0]\n  }\n\n  either (kinds) {\n    return kinds.reduce((acc, kind) => acc.length ? acc : this.filter(kind), [])\n  }\n\n  notesOf (elements) {\n    return Note.unite(elements.flatMap(({ notes }) => notes))\n  }\n\n  static from (beats, store) {\n    if (Array.isArray(beats)) {\n      return beats.map(beat => new Beat(beat, store))\n    }\n\n    return [new Beat(beats, store)]\n  }\n\n}\n","/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} a\n * @param {Number} b\n * @returns {Number}\n */\nexport function gcd (a, b) {\n  if (b == 0) {\n    return a\n  }\n\n  return gcd(b, a % b)\n}\n\n/**\n * Modifies a value so that it is always between the provided min and max\n *\n * @param {Number} value\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nexport function clamp (value, min = 0, max = 1) {\n  return Math.min(max, Math.max(min, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nexport function invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nexport function steps (ratio, all) {\n  ratio %= 1\n\n  if (ratio < 0) ratio += 1\n\n  return all[Math.floor(ratio * all.length)]\n}\n","import { Note } from './note'\nimport { Durations } from './durations'\nimport { Element, Elements, MUSICAL_ELEMENTS } from './elements'\nimport { Beat } from './beats'\nimport { compile } from './data'\nimport { notesIn } from './note'\n\nexport class Music {\n\n  constructor (source) {\n    this.assign(source)\n  }\n\n  init () {\n    if (!this.parses) return null\n\n    this.store = new Elements({\n      source: this.data,\n      cast: elem => ({\n        ...elem,\n        notes: Note.all(elem.kind, elem.value)\n      })\n    })\n\n    this.beats = Beat.from(this.data.beats, this.store)\n    this.durations = new Durations(this.data)\n  }\n\n  assign (source) {\n    this.source = source\n    this.data = compile(source, false)\n\n    this.init()\n\n    return this\n  }\n\n  get headers () {\n    return this.data.headers\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get meter () {\n    return this.headers.meter\n  }\n\n  get tempo () {\n    return this.headers.tempo\n  }\n\n  get elements () {\n    return this.store.all\n  }\n\n  get notes () {\n    return Note.unite(\n      this.beats.flatMap(beat =>\n        beat.elements.flatMap(({ notes }) => notes)\n      )\n    )\n  }\n\n  get musical () {\n    return this.beats.every(beat => beat.musical)\n  }\n\n  get step () {\n    return this.units.beat.step\n  }\n\n  get interval () {\n    return this.units.time.step\n  }\n\n  get parses () {\n    return !this.data.fail\n  }\n\n  at (duration, is = 'step') {\n    const cursor = this.durations.at(duration, is)\n\n    return {\n      beat: this.beats[cursor.beat],\n      elems: this.store.resolve(cursor.elems),\n      play: this.store.resolve(cursor.play),\n      stop: this.store.resolve(cursor.stop)\n    }\n  }\n\n  beat (index) {\n    const cursor = this.durations.cyclic(index, { max: this.beats.length })\n\n    return this.beats[cursor]\n  }\n\n}\n"],"names":["ajv","Ajv","strictTuples","code","es5","unicodeRegExp","schema","$id","validate","compile","valid","bach","TypeError","compose","h","source","strict","arguments","length","undefined","upgraded","replace","parse","data","JSON","scaleify","value","_context","_e$split","split","_e$split2","_slicedToArray","tonic","type","teoriaScale","toLowerCase","_typeof","_concatInstanceProperty","concat","chordify","_context2","teoriaChord","Note","d","_classCallCheck","_createClass","key","teoriaNote","TeoriaNote","_context3","all","kind","note","notesIn","e","hash","chroma","pitchOf","valueOf","scientific","valuesOf","notes","map","generalize","unite","reduce","includes","other","equals","left","right","notesInChord","notesInScale","notesOf","chord","scale","penta","Lens","b","unit","_ref$unit","_ref$is","_ref","is","as","min","_ref$min","_ref$max","max","grid","origin","_ref$origin","this","a","get","use","Object","assign","gcd","x","y","clamp","Math","Units","w","_ref2$map","lens","_ref2$lens","normalize","Number","scope","_this$lens$use","index","cast","head","tail","r","_ref3$is","_ref3","snap","_this$scope","calc","floor","_this$scope2","cyclic","_this$scope3","lerp","ratio","_this$scope4","invlerp","_this$scope5","delta","_this$scope6","range","_this$scope7","progress","fold","basis","size","container","rebase","_context6","_this","clone","props","_mapInstanceProperty","s","Durations","M","super","init","_this2","total","units","steps","bar","metrics","at","duration","step","state","context","_ref7","_ref6","play","stop","beat","elems","metronize","_ref8","_ref8$is","_ref8$as","rhythmic","_ref9$units","_ref9$calc","_ref9$size","_ref9","durations","result","sort","abs","_e$units","pulse","time","ms","second","p","m","Element","O","id","_context8","uid","musical","MUSICAL_ELEMENTS","pop","Elements","k","_ref10","store","_","elements","kinds","flatMap","_context10","elem","ids","parts","_e2","_objectSpread","one","every","resolve","_this5","Array","el","register","_ref11","elementize","record","t","acc","_context16","_ref13","_ref12","Beat","E","_context17","_this6","items","item","_context19","_this7","_ref16","_ref17","values","_ref18","_context20","_defineProperty","_context21","_toConsumableArray","_Set","find","_context23","filter","last","either","_this8","_ref19","from","beats","_class","parses","headers","meter","tempo","_ref20","_context29","fail","cursor","_context30","toString","slice","call","name"],"mappings":"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"}