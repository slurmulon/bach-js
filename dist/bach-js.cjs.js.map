{"version":3,"file":"bach-js.cjs.js","sources":["../src/note.js","../src/validate.js","../src/data.js","../src/math.js","../src/durations.js","../src/elements.js","../src/beats.js","../src/music.js"],"sourcesContent":["import { note as teoriaNote, Note as TeoriaNote } from 'teoria'\n\nexport class Note {\n\n  static parse (value) {\n    if (typeof value === 'string') {\n      return teoriaNote(value)\n    } else if (typeof value === 'object' || value instanceof TeoriaNote) {\n      return value\n    }\n\n    throw TypeError(`Unknown note type (${typeof value}): ${value}`)\n  }\n\n  static expand (kind, note) {\n    return notesIn(kind, note)\n  }\n\n  static hash (note) {\n    return Note.parse(note).chroma()\n  }\n\n  static pitchOf (note) {\n    return Note.valueOf(note)\n  }\n\n  // TODO: Consider using chroma instead\n  // TODO: Use this in nek, and anywhere else this same logic might be used\n  static valueOf (note) {\n    return Note.parse(note)\n      .scientific()\n      // .toLowerCase()\n      // TODO: Centralize! Replace everywhere in bach-sheet, nek, etc.\n      .replace(/[0-9]+$/, '')\n  }\n\n  static valuesOf (notes) {\n    return notes.map(Note.valueOf)\n  }\n\n  static generalize (note) {\n    return teoriaNote(Note.valueOf(note))\n  }\n\n  static unite (notes = []) {\n    return [...new Set(Note.valuesOf(notes))]\n  }\n\n  static equals (left, right) {\n    return Note.hash(left) == Note.hash(right)\n  }\n\n}\n","import schema from 'bach-json-schema'\nimport Ajv from 'ajv'\n\nconst ajv = new Ajv()\n\najv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))\n\nexport const validate = ajv.compile(schema)\n\nexport const valid = bach => {\n  if (!validate(bach)) {\n    const message = 'Invalid Bach.JSON source data'\n    const pretty = json => JSON.stringify(json, null, 2)\n\n    console.error(message, pretty(bach))\n    console.error(pretty(validate.errors))\n\n    throw TypeError(`Invalid Bach.JSON source data`)\n  }\n\n  return bach\n}\n\nexport default validate\n","// import bach from 'bach-cljs'\nconst bach = require('bach-cljs').default\nimport { Note } from './note'\nimport { valid } from './validate'\nimport {\n  scale as teoriaScale,\n  chord as teoriaChord,\n  Scale as TeoriaScale,\n  Chord as TeoriaChord\n} from 'teoria'\n\n// Either \"composes\" raw bach data into bach.json or, when provided an object, validates its structure as bach.json.\n// Main entry point for integrating with core bach ClojureScript library.\nexport const compose = source => {\n  if (typeof source === 'string') {\n    return bach(source)\n  }\n\n  if (typeof source === 'object') {\n    // FIXME: Enable again once bach-json-schema is updated to v3\n    // return valid(source)\n    return source\n  }\n\n  throw TypeError(`Unsupported Bach.JSON data type (${typeof source}). Must be a bach.json object or raw bach string.`)\n}\n\n// REMOVE\n// Creates Bach.JSON beat elements from minimal data.\n// WARN: Now dup'd in rebach\n// export const atomize = (kind, value) => ({\n//   keyword: kind.toLowerCase(),\n//   arguments: [value]\n// })\n\n// REMOVE\n// Consumes bach.json source data and parses/normalizes each beat.\n// Light-weight alternative to using Track constructor.\n// export const normalize = source => {\n//   const bach = typeof source === 'string' ? compose(source) : source\n\n//   return Object.assign({}, bach, {\n//     data: bach.data.map(Beat.from)\n//   })\n// }\n\n// Converts a parsed Track's `data` back into its serialized form (vanilla bach.json).\nexport const serialize = track => {\n  const data = track.data\n    .map(measure => {\n      return measure.map(beat => {\n        return beat && beat.data\n      })\n    })\n\n  return Object.assign({}, track, { data })\n}\n\n// REMOVE\n// Creates a reduced and simplified version of the track with only populated sections.\n// Ideal data format for high-level iteration and/or cursor tracing in bach engines.\nexport const sectionize = source => source.data\n  .map(measure =>\n    measure\n      .filter(beat => !!beat.data)\n      .map(partitionBeat)\n  )\n  .reduce((all, one) => all.concat(one), [])\n\n// Groups sequentially identical phrases by summation of duration:\n// TODO\nexport const condense = source => {\n  // e.g.\n  // [1 -> :A, 3 -> :A]\n  //    becomes\n  // [4 -> :A]\n  //\n  // Note: Does not wrap head and tail if there's more than 2 elements\n}\n\n// Provides a reduced/simplified representation of a Bach beat item/element\nexport const simplifyBeatItem = item => {\n  const { keyword, arguments: [value] } = item\n  const kind = keyword.toLowerCase()\n\n  return { kind, value }\n}\n\n// Expands a beat and its items into a usable object grouped by \"parts\".\n// TODO: Instead of \"parts\" we should probably stick with \"items\", to be consistent with Bach\nexport const partitionBeat = beat => beat.data.items\n  .map(simplifyBeatItem)\n  .reduce((acc, item) => {\n    const parts = Object.assign({}, acc.parts, {\n      [item.kind]: item.value\n    })\n\n    return Object.assign(acc, {\n      duration: beat.data.duration,\n      parts\n    })\n  }, {})\n\nexport function scaleify (value) {\n  if (typeof value === 'string') {\n    const [tonic, type] = value.split(' ')\n\n    // TODO: Potentially use type.toLowerCase instead, to guarantee smooth interopability\n    return teoriaScale(tonic, type.toLowerCase())\n  } else if (value instanceof TeoriaScale) {\n    return value\n  }\n\n  throw TypeError(`Unknown scale type (${typeof value}): ${value}`)\n}\n\nexport function chordify (value) {\n  if (typeof value === 'string') {\n    return teoriaChord(value)\n  } else if (value instanceof TeoriaChord) {\n    return value\n  }\n\n  throw TypeError(`Unknown chord type (${typeof value}): ${value}`)\n}\n\nexport function scaleToString (scale) {\n  return `${scale.tonic.toString().slice(0,2)} ${scale.name}`\n}\n\nexport function notesInChord (value) {\n  return chordify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesInScale (value) {\n  return scaleify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesIn (kind, value) {\n  const notes = notesOf[kind]\n\n  if (notes) {\n    return notes(value)\n  }\n\n  return []\n}\n\n// TODO: Allow custom note resolvers to be registered globally or locally so people can easily define their own semantics\n//  - Could call this `itemsOf` to be more generic and flexible\nexport const notesOf = {\n  note:  value => value,\n  chord: value => notesInChord(value),\n  scale: value => notesInScale(value),\n  penta: value => notesInScale(value)\n}\n\n// TODO: Note.valueOf\nexport function notesIntersect (left, right) {\n return left.filter(note => right.includes(note))\n}\n\n// TODO: Use empty-schema (or another approach) to return default bach.json ehaders instead of empty object\nexport const headersOf = source => (source && source.headers) || {}\n\nexport const unitsOf = source => ({\n  step: source.units.beat.step,\n  pulse: source.units.beat.pulse,\n  bar: source.units.bar.step,\n  ms: (1 / source.units.time.bar)\n  // FIXME: 100 should be 1000...? Works, but weird.\n  // sec: (100 / source.units.time.bar)\n})\n\n// export const barsOf = source => ({\n//   // beat: headersOf(source)['beat-units-per-measure'] || 4,\n//   // pulse: headersOf(source)['pulse-beats-per-measure'] || 4,\n//   bar: 1\n//   // measure: 1\n// })\n\nexport const timesOf = source => {\n  // const intervals = intervalsOf(source)\n  // const beats = source.units.beat\n  // const bars = source.units.bar\n  // const bar = bars.pulse * intervals.pulse\n  const { time } = source.units\n\n  // TODO: Probably move most if not all of these into unitsOf, and then just modify here post-calc\n  //  - Could have `unitsOf` accept an option `scale` prop (defaulting to 1) that determiens the reference unit\n  //  - UPDATE: Can just replace unitsOf with this (rename timesOf to unitsOf)\n  const units = {\n    ms: 1,\n    second: 1000,\n    // pulse: intervals.pulse,\n    // beat: intervals.beat,\n    step: time.step,\n    pulse: time.pulse,\n    bar: time.bar,\n    // measure: bar,\n    // half: bar / 2,\n    '2n': time.bar / 2,\n    '4n': time.bar / 4,\n    '8n': time.bar / 8,\n    '16n': time.bar / 16,\n    '32n': time.bar / 32,\n    '64n': time.bar / 64,\n    '4up': time.bar - (time.bar / 4),\n    '8up': time.bar - (time.bar / 8)\n  }\n\n  // TODO: After we replace teoria with tone, this can be done more dynamically (standardize around their notation duration format)\n  const aliases = {\n    's': units.step,\n    'p': units.pulse,\n    // '1m': units.bar,\n    'm': units.bar\n    // '4n': units.4n,\n    // '8n': units.8n,\n    // '16n': units.16n,\n    // '32n': bar / 32,\n    // '64n': bar / 64\n  }\n\n  return Object.assign(units, aliases)\n}\n\n// TODO: Remove, can just use signals now\n// export const steps = (ratio, all) => {\n//   ratio %= 1\n\n//   if (ratio < 0) ratio += 1\n\n//   return all[Math.floor(ratio * all.length)]\n// }\n\n// TODO: Just remove, pointless\nexport default {\n  // atomize,\n  // normalize,\n  serialize,\n  sectionize,\n  scaleify,\n  chordify,\n  scaleToString,\n  notesInChord,\n  notesInScale,\n  notesIn,\n  headersOf,\n  unitsOf,\n  // barsOf,\n  simplifyBeatItem,\n  partitionBeat\n}\n","/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} a\n * @param {Number} b\n * @returns {Number}\n */\nexport function gcd (a, b) {\n  if (b == 0) {\n    return a\n  }\n\n  return gcd(b, a % b)\n}\n\n/**\n * Modifies a value so that it is always between the provided min and max\n *\n * @param {Number} value\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nexport function clamp (value, min = 0, max = 1) {\n  return Math.min(max, Math.max(min, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nexport function invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nexport function steps (ratio, all) {\n  ratio %= 1\n\n  if (ratio < 0) ratio += 1\n\n  return all[Math.floor(ratio * all.length)]\n}\n","import { compose, unitsOf, timesOf } from './data'\nimport { gcd, clamp, lerp } from './math'\n\nexport class Durations {\n\n  constructor (source) {\n    // this.source = normalize(source)\n    // this.source = source\n    this.source = compose(source)\n  }\n\n  // FIXME: Update to look into :items, since we now support different play and stop times\n  // get all () {\n  //   return this.data.flat().map(beat => beat.duration)\n  // }\n\n  get steps () {\n    return this.source.signals\n  }\n\n  // TODO: Just conflate the next 3 into `metrics` getter`\n  get min () {\n    return this.source.metrics.min\n  }\n\n  get max () {\n    return this.source.metrics.max\n  }\n\n  get total () {\n    return this.source.metrics.total\n  }\n\n  get bar () {\n    return this.units.bar\n  }\n\n  get units () {\n    return unitsOf(this.source)\n  }\n\n  get times () {\n    return timesOf(this.source)\n  }\n\n  get interval () {\n    return this.times.step\n  }\n\n  time (duration, { is = 'step', as = 'ms' } = {}) {\n  // cast (duration, { is = 'step', as = 'ms' } = {}) {\n    return duration / (this.times[as] / this.times[is])\n  }\n\n  // TODO: Actually, can probably just remove this entirely and just use this.times\n  // TODO: Rename to `cast`\n  // unitize (duration, { is = 'step', as = 'pulse' } = {}) {\n  cast (duration, { is = 'step', as = 'pulse' } = {}) {\n    return duration / (this.units[as] / this.units[is])\n  }\n\n  metronize (duration, { is = 'step', as = 'pulse' } = {}) {\n    const index = this.cast(duration, { is, as })\n    const bar = this.cast(this.bar, { as })\n\n    return Math.floor(index % bar)\n  }\n\n  ratio (duration, is = 'step') {\n    return this.cast(duration, { is, as: 'step' }) / this.total\n  }\n\n  percentage (duration, is = 'step') {\n    return this.ratio(duration, is) * 100\n  }\n\n  clamp (duration, { is = 'step', min = 0, max } = {}) {\n    const step = this.cast(duration, { is, as: 'step' })\n    const head = this.cast(min || 0, { is, as: 'step' })\n    const tail = this.cast(max || this.total, { is, as: 'step' })\n\n    return clamp(step, head, tail)\n  }\n\n  cyclic (duration, { is = 'step', min = 0, max } = {}) {\n    const step = this.cast(duration, { is, as: 'step' })\n    const head = this.cast(min || 0, { is, as: 'step' })\n    const tail = this.cast(max || this.total, { is, as: 'step' })\n    const key = duration >= head ? duration : duration + tail\n\n    return key % tail\n  }\n\n  interpolate (ratio, { is = 'step', min = 0, max } = {}) {\n    const head = this.cast(min || 0, { is, as: 'step' })\n    const tail = this.cast(max || this.total, { is, as: 'step' })\n\n    return lerp(ratio, head, tail)\n  }\n\n  at (duration, is = 'step') {\n    const step = this.cast(duration, { is, as: 'step' })\n    // const step = this.time(duration, { is, as: 'step' })\n    const index = this.clamp(step)\n\n    return Object.entries(this.steps)\n      .reduce((acc, [key, steps]) => ({\n        ...acc,\n        [key]: steps[index]\n      }), {})\n  }\n\n  // TODO: Either replace or improve via inspiration with this:\n  // @see: https://tonejs.github.io/docs/r13/Time#quantize\n  rhythmic ({\n    duration,\n    is = 'ms',\n    units = ['8n', '4n'],\n    calc = 'abs',\n    size = 'min'\n  }) {\n    const durations = units\n      .map(unit => Math[calc](this.cast(duration, { is, as: unit })))\n      .sort((a, b) => Math.abs(time - a) - Math.abs(time - b))\n      .filter(_ => _)\n\n    return Math[size](...durations)\n  }\n\n}\n","import { note as teoriaNote } from 'teoria'\nimport { notesIn } from './data'\nimport { compose } from './data'\n\n/**\n * Represents a single playable element (Note, Scale, Chord, Mode, Triad or Rest)\n */\n// FIXME: Support rests (~)\nexport class Element {\n\n  constructor (data) {\n    this.data = data\n  }\n\n  get id () {\n    return `${this.data.kind}.${this.data.id}`\n  }\n\n  get uid () {\n    return Element.uid(this.id)\n  }\n\n  get value () {\n    return this.data.value\n  }\n\n  get props () {\n    return this.data.props\n  }\n  // get inputs () {\n  //   return this.data['arguments']\n  // }\n\n  get kind () {\n    return this.data.kind//.toLowerCase()\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get notes () {\n    return notesIn(this.kind, this.value)\n  }\n\n  get musical () {\n    return MUSICAL_ELEMENTS.includes(this.kind)\n  }\n\n  // TODO: Probably just remove\n  // TODO: Refactor to use data/scaleify and data/chordify\n  identify () {\n    try {\n      teoria.note(this.value)\n\n      return 'note'\n    } catch (_) {}\n\n    try {\n      const [key, scale] = this.value.split(' ')\n\n      teoria.note(key).scale(scale.toLowerCase())\n\n      return 'scale'\n    } catch (_) {}\n\n    // FIXME: Make this support an optional octave (e.g. \"Cm\" and \"C2m\")\n    try {\n      const [key, chord] = [this.value.substring(0,2), this.value.substring(2)]\n\n      teoria.note(key).chord(chord.toLowerCase())\n\n      return 'chord'\n    } catch (_) {}\n  }\n\n  static uid (id) {\n    return id.split('.').pop()\n  }\n\n}\n\nexport class Elements {\n\n  constructor ({ source, store, cast } = {}) {\n    this.source = compose(source)\n    this.cast = cast || (_ => _)\n    this.data = store || Elements.cast(this.source.elements, cast)\n  }\n\n  get all () {\n    return this.kinds.flatMap(kind =>\n      Object.values(this.data[kind])\n        .map(elem => new Element(elem))\n    )\n  }\n\n  get kinds () {\n    return Object.keys(this.data)\n  }\n\n  get values () {\n    return this.all.map(elem => elem.value)\n  }\n\n  get ids () {\n    return this.all.map(elem => elem.id)\n  }\n\n  get (id) {\n    const parts = typeof id === 'string' ? id.split('.') : []\n\n    if (parts.length === 2) {\n      const [kind, uid] = parts\n      const elem = this.data[kind][uid]\n\n      return elem ? { ...elem, id: uid, kind } : null\n    }\n\n    throw TypeError('Element id must be a string in the format of \"kind.hash\"')\n  }\n\n  resolve (elem) {\n    if (elem instanceof Element) return elem\n    if (typeof elem === 'string') return this.get(elem)\n    if (typeof elem === 'object') return new Element(this.cast(elem))\n\n    throw TypeError('Failed to resolve element, unsupported data type')\n  }\n\n  // static normalize (elements, cast = _ => _) {\n  static cast (elements, as = _ => _) {\n    // TODO: Validate element shape with JSON Schema\n    return Object.entries(elements)\n      .reduce((acc, [kind, ids]) => {\n        const elems = Object.entries(ids)\n          .reduce((acc, [id, elem]) => ({\n            ...acc,\n            [id]: as({ id, kind, ...elem })\n          }), {})\n\n        return { ...acc, [kind]: elems }\n      }, {})\n  }\n\n}\n\nexport const MUSICAL_ELEMENTS = ['note', 'chord', 'scale'] // penta\n","import { Element } from './elements'\n\n/**\n * Represents a single beat in a track.\n *\n * Beats are represented as a tuple and may contain multiple elements\n *\n * duration -> items -> elements\n */\nexport class Beat {\n\n  // constructor (data) {\n  constructor (data, store) {\n    this.data = data\n    this.store = store\n    // TODO: Consider using nanoid to generate pseudo-unique beat identifiers\n    // this.id = id || nanoid()\n  }\n\n  get index () {\n    return this.data.index\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  // TODO: Probably replace with `get elements`\n  // get items () {\n  //   // if (this.empty) return []\n\n  //   return this.data.items.map(item => new Element(item, store))\n  // }\n\n  get items () {\n    return this.data.items\n  }\n\n  get elements () {\n    return this.items.flatMap(({ elements }) =>\n      elements.map(elem => this.store.resolve(elem))\n    )\n  }\n\n  get kinds () {\n    return this.all(({ kind }) => kind)\n  }\n\n  get values () {\n    return this.all(({ value }) => value)\n  }\n\n  // Provides map of elements in a beat grouped by kind.\n  get parts () {\n    return this.elements.reduce((parts, elem) => ({\n     ...parts,\n      [elem.kind]: elem\n    }), {})\n  }\n\n  get musical () {\n    return this.elements.every(elem => elem.musical)\n  }\n\n  all (cast = _ => _) {\n    return [...new Set(this.elements.map(cast))]\n  }\n\n  first (kind) {\n    return this.elements.find(elem => kind == elem.kind)\n  }\n\n  static from (beats, store) {\n    if (Array.isArray(beats)) {\n      return beats.map(beat => new Beat(beat, store))\n    }\n\n    return new Beat(beats, store)\n  }\n\n}\n","import { Note } from './note'\nimport { Durations } from './durations'\nimport { Elements, MUSICAL_ELEMENTS } from './elements'\nimport { Beat } from './beats'\nimport { compose, notesIn } from './data'\n\n// NOTE: Basically Track v3. Probably just rename to Track eventually.\nexport class Music {\n\n  constructor (source) {\n    this.source = source\n    this.data = compose(source)\n    this.store = new Elements({\n      source: this.data,\n      cast: elem => ({\n        ...elem,\n        notes: notesIn(elem.kind, elem.value)\n      })\n    })\n  }\n\n  get elements () {\n    return this.store.all\n  }\n\n  get beats () {\n    return Beat.from(this.data.beats, this.store)\n  }\n\n  get durations () {\n    return new Durations(this.data)\n  }\n\n  get notes () {\n    return Note.unite(\n      this.beats.flatMap(beat =>\n        beat.elements.flatMap(({ notes }) => notes)\n      )\n    )\n  }\n\n  get musical () {\n    return this.beats.every(beat => beat.musical)\n  }\n\n  // get interval\n  get step () {\n    return this.data.units.beat.step\n  }\n\n  at (duration, is = 'step') {\n    const cursor = this.durations.at(duration, is)\n\n    // NOTE: Could instead pre-emptively expand serialized format from compose (or just, in bach.core, separate into both a serialized composition and a reoslved/expanded composition!\n    return {\n      beat: this.beats[cursor.beat],\n      play: (cursor.play || []).map(elem => this.store.resolve(elem)),\n      stop: (cursor.stop || []).map(elem => this.store.resolve(elem))\n    }\n  }\n\n}\n"],"names":["Note","value","teoriaNote","_typeof","TeoriaNote","TypeError","kind","note","notesIn","parse","chroma","valueOf","scientific","replace","notes","map","Set","valuesOf","left","right","hash","ajv","Ajv","addMetaSchema","require","validate","compile","schema","valid","bach","message","pretty","json","JSON","stringify","console","error","errors","compose","source","serialize","track","data","measure","beat","Object","assign","sectionize","filter","partitionBeat","reduce","all","one","concat","condense","simplifyBeatItem","item","keyword","arguments","toLowerCase","items","acc","parts","duration","scaleify","split","tonic","type","teoriaScale","TeoriaScale","chordify","teoriaChord","TeoriaChord","scaleToString","scale","toString","slice","name","notesInChord","notesInScale","notesOf","chord","penta","notesIntersect","includes","headersOf","headers","unitsOf","step","units","pulse","bar","ms","time","timesOf","second","aliases","clamp","min","max","Math","lerp","ratio","x","y","Durations","signals","metrics","total","times","is","as","index","cast","floor","head","tail","key","entries","steps","calc","size","durations","unit","sort","a","b","abs","_","Element","id","uid","props","MUSICAL_ELEMENTS","teoria","substring","pop","Elements","store","elements","kinds","flatMap","values","elem","keys","length","get","ids","elems","Beat","resolve","every","musical","find","beats","Array","isArray","Music","from","unite","cursor","at","play","stop"],"mappings":"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"}