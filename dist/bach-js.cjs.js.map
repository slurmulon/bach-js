{"version":3,"file":"bach-js.cjs.js","sources":["../src/validate.js","../src/data.js","../src/note.js","../src/math.js","../node_modules/segu/dist/segu.esm.js","../src/durations.js","../src/elements.js","../src/beats.js","../src/music.js"],"sourcesContent":["import schema from 'bach-json-schema'\nimport Ajv from 'ajv'\n\nconst ajv = new Ajv({ strictTuples: false })\n\nexport const validate = ajv.compile(schema)\n\nexport const valid = bach => {\n  if (!validate(bach)) {\n    const message = 'Invalid Bach.JSON source data'\n    const pretty = json => JSON.stringify(json, null, 2)\n\n    console.error(message, pretty(bach))\n    console.error(pretty(validate.errors))\n\n    throw TypeError(`Invalid Bach.JSON source data`)\n  }\n\n  return bach\n}\n\nexport default validate\n","import bach from 'bach-cljs'\nimport { Note } from './note'\nimport { valid } from './validate'\nimport {\n  scale as teoriaScale,\n  chord as teoriaChord,\n  Scale as TeoriaScale,\n  Chord as TeoriaChord\n} from 'teoria'\n\n/**\n * Either \"composes\" raw bach data into bach.json or, when provided an object, validates its structure as bach.json.\n * Given a string, automatically upgrades source to v3 (simple replacement of !play with play!).\n * Main entry point for integrating with core bach ClojureScript library.\n */\nexport const compose = (source, strict = true) => {\n  if (typeof source === 'string') {\n    const upgraded = source.replace(/!play/i, 'play!')\n\n    return bach.compose(upgraded)\n  }\n\n  if (typeof source === 'object') {\n    return strict ? valid(source) : source\n  }\n\n  throw TypeError(`Unsupported Bach.JSON data type (${typeof source}). Must be a bach.json object or raw bach string.`)\n}\n\nexport function scaleify (value) {\n  if (typeof value === 'string') {\n    const [tonic, type] = value.split(' ')\n\n    // TODO: Potentially use type.toLowerCase instead, to guarantee smooth interopability\n    return teoriaScale(tonic, type.toLowerCase())\n  } else if (value instanceof TeoriaScale) {\n    return value\n  }\n\n  throw TypeError(`Unknown scale type (${typeof value}): ${value}`)\n}\n\nexport function chordify (value) {\n  if (typeof value === 'string') {\n    return teoriaChord(value)\n  } else if (value instanceof TeoriaChord) {\n    return value\n  }\n\n  throw TypeError(`Unknown chord type (${typeof value}): ${value}`)\n}\n\nexport function scaleToString (scale) {\n  return `${scale.tonic.toString().slice(0,2)} ${scale.name}`\n}\n\nexport function notesInChord (value) {\n  return chordify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesInScale (value) {\n  return scaleify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesIn (kind, value) {\n  const notes = notesOf[kind]\n\n  if (notes) {\n    return notes(value)\n  }\n\n  return []\n}\n\n// TODO: Allow custom note resolvers to be registered globally or locally so people can easily define their own semantics\n//  - Could call this `itemsOf` to be more generic and flexible\nexport const notesOf = {\n  note:  value => [value],\n  chord: value => notesInChord(value),\n  scale: value => notesInScale(value),\n  penta: value => notesInScale(value)\n}\n\n// TODO: Note.valueOf\nexport function notesIntersect (left, right) {\n return left.filter(note => right.includes(note))\n}\n","import { note as teoriaNote, Note as TeoriaNote } from 'teoria'\nimport { notesIn } from './data'\n\n// TODO: Replce with individual functions and remove class, no longer necessary\n// TODO: Remove cyclic reference between data module by bringing in all note related functions.\nexport class Note {\n\n  static parse (value) {\n    if (typeof value === 'string') {\n      return teoriaNote(value)\n    } else if (typeof value === 'object' || value instanceof TeoriaNote) {\n      return value\n    }\n\n    throw TypeError(`Unknown note type (${typeof value}): ${value}`)\n  }\n\n  static all (kind, note) {\n    try {\n      return notesIn(kind, note)\n    } catch (e) {\n      return []\n    }\n  }\n\n  static hash (note) {\n    return Note.parse(note).chroma()\n  }\n\n  static pitchOf (note) {\n    return Note.valueOf(note)\n  }\n\n  // TODO: Consider using chroma instead\n  // TODO: Use this in nek, and anywhere else this same logic might be used\n  static valueOf (note) {\n    return Note.parse(note)\n      .scientific()\n      // .toLowerCase()\n      // TODO: Centralize! Replace everywhere in bach-sheet, nek, etc.\n      .replace(/[0-9]+$/, '')\n  }\n\n  static valuesOf (notes) {\n    return notes.map(Note.valueOf)\n  }\n\n  static generalize (note) {\n    return teoriaNote(Note.valueOf(note))\n  }\n\n  static unite (notes = []) {\n    return notes.reduce((all, note) => {\n      const value = Note.valueOf(note)\n      const has = Note.includes(all, value)\n\n      return !has ? all.concat(value) : all\n    }, [])\n  }\n\n  static includes (notes = [], note) {\n    return notes.some(other => Note.equals(other, note))\n  }\n\n  static equals (left, right) {\n    return Note.hash(left) == Note.hash(right)\n  }\n\n}\n","/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} a\n * @param {Number} b\n * @returns {Number}\n */\nexport function gcd (a, b) {\n  if (b == 0) {\n    return a\n  }\n\n  return gcd(b, a % b)\n}\n\n/**\n * Modifies a value so that it is always between the provided min and max\n *\n * @param {Number} value\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nexport function clamp (value, min = 0, max = 1) {\n  return Math.min(max, Math.max(min, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nexport function invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nexport function steps (ratio, all) {\n  ratio %= 1\n\n  if (ratio < 0) ratio += 1\n\n  return all[Math.floor(ratio * all.length)]\n}\n","class Lens {\n\n  constructor ({\n    unit = 1,\n    is = 1,\n    as = 1,\n    min = 0,\n    max = 1,\n    grid = 1,\n    origin = 0\n  } = {}) {\n    this.data = { unit, is, as, min, max, grid, origin };\n    // Would improve flexibility by wrapping all getters in Lens with this, allowing Units and Lens to use the same normalization function\n    // this.normalize = normalize || Units.normalize\n  }\n\n  get unit () {\n    return this.data.unit || this.data.is || 1\n  }\n\n  get is () {\n    return this.data.is || this.unit\n  }\n\n  get as () {\n    return this.data.as || this.unit\n  }\n\n  get min () {\n    return this.data.min || 0\n  }\n\n  get max () {\n    return this.data.max || Number.MAX_SAFE_INTEGER\n  }\n\n  get grid () {\n    return this.data.grid || 1\n  }\n\n  get origin () {\n    return this.data.origin || 0\n  }\n\n  use (data) {\n    return Object.assign({}, this.data, data)\n  }\n\n  assign (data) {\n    this.data = this.use(data);\n\n    return this\n  }\n\n}\n\n/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction gcd (x, y) {\n  return y === 0 ? x : gcd(y, x % y)\n}\n\n/**\n * Modifies a value so that it is always between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction clamp (value, x = 0, y = 1) {\n  return Math.min(y, Math.max(x, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nfunction invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Cycles a value around an range (from x to y).\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n*/\nfunction cyclic (value, x, y) {\n  return (value >= x ? value : value + y) % y\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nfunction steps (ratio, all) {\n  ratio %= 1;\n\n  if (ratio < 0) ratio += 1;\n\n  return all[Math.floor(ratio * all.length)]\n}\n\nclass Units {\n\n  constructor ({\n    map = {},\n    lens = {}\n  } = {}) {\n    this.map = map;\n    this.lens = new Lens(lens);\n  }\n\n  normalize (unit) {\n    if (typeof unit === 'number') {\n      return unit\n    }\n\n    if (typeof unit === 'string') {\n      const value = this.map[unit] || 1;\n\n      return typeof value === 'function' ? value(unit) : Number(value)\n    }\n\n    return 1\n  }\n\n  scope (value = 1, lens = this.lens) {\n    const { is, as, min, max, origin } = this.lens.use(lens);\n    const index = this.cast(value - origin, { is, as });\n    const head = this.cast(min || 0, { is, as });\n    const tail = this.cast(max || value, { is, as });\n\n    return { value, index, head, tail }\n  }\n\n  cast (value = 1, { is = this.lens.unit, as = this.lens.unit } = {}) {\n  // cast (value = 1, { is = this.lens.is, as = this.lens.as } = {}) {\n    return this.normalize(value) / (this.normalize(as) / this.normalize(is))\n  }\n\n  snap (value = 1, { to = this.lens.unit, calc = Math.floor } = {}) {\n    const unit = this.normalize(to);\n    const adjust = typeof calc === 'function' ? calc : _ => _;\n    const output = adjust(value / unit) * unit;\n\n    return this.normalize(output || 0)\n  }\n\n  clamp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return clamp(index, head, tail)\n  }\n\n  cyclic (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return cyclic(index, head, tail)\n  }\n\n  lerp (ratio, lens) {\n    const { head, tail } = this.scope(0, lens);\n\n    return lerp(ratio, head, tail)\n  }\n\n  invlerp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return invlerp(index, head, tail)\n  }\n\n  delta (value, lens) {\n    const { index, head } = this.scope(value, lens);\n\n    return index - head\n  }\n\n  range (value, lens) {\n    const { head, tail } = this.scope(value, lens);\n\n    return tail - head\n  }\n\n  progress (value, lens) {\n    const delta = this.delta(value, lens);\n    const range = this.range(value, lens);\n\n    return delta / range\n  }\n\n  fold (value, lens = this.lens) {\n    const grid = lens.grid || 1;\n    const basis = gcd(value, grid);\n    const size = this.clamp(value, lens);\n    const container = this.snap(size, { to: basis });\n    const ratio = Math.max(1, Math.min(value / basis, grid));\n    const min = value >= grid ? grid : basis;\n\n    return Math.max(min, this.snap(container, { to: ratio }))\n  }\n\n  // Changes the base unit to the provided key by recalculating and replacing the unit map pairs.\n  // TODO: Test, and ensure that the base unit is equal to 1 (or, could just use scale)\n  rebase (unit = this.lens.unit) {\n    if (unit === this.lens.unit) return this\n\n    const map = Object.entries(this.map)\n      .reduce((map, [key, value]) => Object.assign(map, {\n        [key]: this.cast(value, { is: this.lens.is, as: unit })\n      }, { [unit]: 1 }));\n\n    this.map = map;\n    this.lens.unit = unit;\n\n    return this\n  }\n\n  clone (props) {\n    const map = Object.assign({}, this.map, props.map);\n    const lens = Object.assign({}, this.lens, props.lens);\n\n    return new Units({ map, lens })\n  }\n\n  static use (props) {\n    return new Units(props)\n  }\n}\n\nconst units = props => new Units(props);\n\nexport { Units, clamp, cyclic, gcd, invlerp, lerp, steps, units };\n//# sourceMappingURL=segu.esm.js.map\n","import { compose } from './data'\nimport { gcd, clamp, lerp } from './math'\nimport { Units } from 'segu'\n\n/**\n * Provides essential duration values and calculations of a bach track.\n * Enables trivial conversions between any duration unit via cast (based\n * on milliseconds) and unitize (based on steps, bach's iteration unit).\n */\nexport class Durations extends Units {\n\n  constructor (source, lens) {\n    super({ map: null, lens })\n\n    this.source = source\n    this.data = compose(source)\n\n    this.init()\n  }\n\n  init () {\n    this.map = Durations.map(this.data)\n\n    this.lens.assign({ unit: 'step', max: this.total })\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get steps () {\n    return this.data.steps\n  }\n\n  get bar () {\n    return this.units.bar\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get min () {\n    return this.metrics.min\n  }\n\n  get max () {\n    return this.metrics.max\n  }\n\n  get total () {\n    return this.metrics.total\n  }\n\n  at (duration, is = 'step') {\n    const step = Math.floor(this.cast(duration, { is, as: 'step' }))\n    const index = this.cyclic(step)\n    const state = this.steps[index]\n    const [context, play, stop] = state || []\n\n    return {\n      beat: context[0],\n      elems: context.slice(1),\n      play,\n      stop,\n      index\n    }\n  }\n\n  metronize (duration, { is = 'ms', as = 'pulse' } = {}) {\n    const index = this.cast(duration, { is, as })\n    const bar = this.cast(this.bar.step, { as })\n\n    return Math.floor(index % bar)\n  }\n\n  // TODO: Either replace or improve via inspiration with this:\n  // @see: https://tonejs.github.io/docs/r13/Time#quantize\n  rhythmic (duration, {\n    is = 'ms',\n    units = ['8n', '4n'],\n    calc = 'floor',\n    size = 'min'\n  } = {}) {\n    const durations = units\n      .map(unit => {\n        const value = this.cast(duration, { is, as: unit })\n        const result = Math[calc](value)\n\n        return this.cast(result, { is: unit, as: is })\n      })\n      .sort((a, b) => Math.abs(duration - a) - Math.abs(duration - b))\n\n    return Math[size](...durations)\n  }\n\n  static map (source) {\n    const data = compose(source, false)\n    const { beat, step, pulse, time, bar } = data.units\n\n    return {\n      step: 1,\n      pulse: 1 / (beat.step / beat.pulse),\n      bar: bar.step,\n      ms: 1 / time.step,\n      second: (1 / time.step) * 1000,\n      's': step,\n      'p': pulse,\n      'm': bar.step,\n      '2n': bar.step / 2,\n      '4n': bar.step / 4,\n      '8n': bar.step / 8,\n      '16n': bar.step / 16,\n      '32n': bar.step / 32,\n      '64n': bar.step / 64,\n      '4up': bar.step - (bar.step / 4),\n      '8up': bar.step - (bar.step / 8),\n      '16up': bar.step - (bar.step / 16),\n      '32up': bar.step - (bar.step / 32),\n      '64up': bar.step - (bar.step / 64)\n    }\n  }\n\n}\n","import { elementize } from 'bach-cljs'\nimport { note as teoriaNote } from 'teoria'\n\nimport { compose } from './data'\nimport { Note } from './note'\n\n/**\n * Represents a single and unique playable element.\n * Uniqueness and equality are determined by `id`.\n */\nexport class Element {\n\n  constructor (data) {\n    this.data = data\n  }\n\n  get id () {\n    return `${this.data.kind}.${this.data.id}`\n  }\n\n  get uid () {\n    return Element.uid(this.id)\n  }\n\n  get value () {\n    return this.data.value\n  }\n\n  get props () {\n    return this.data.props || []\n  }\n\n  get kind () {\n    return this.data.kind.toLowerCase()\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get notes () {\n    return Note.all(this.kind, this.value)\n  }\n\n  get musical () {\n    return MUSICAL_ELEMENTS.includes(this.kind)\n  }\n\n  static uid (id) {\n    return id.split('.').pop()\n  }\n\n}\n\n/**\n * Provides a centralized and shareable store of parsed elements in a bach track.\n */\nexport class Elements {\n\n  constructor ({ source, store, cast } = {}) {\n    this.source = compose(source)\n    this.cast = cast || (_ => _)\n    this.data = store || Elements.cast(this.source.elements, cast)\n  }\n\n  get all () {\n    return this.kinds.flatMap(kind => this.every(kind))\n  }\n\n  get kinds () {\n    return Object.keys(this.data)\n  }\n\n  get values () {\n    return this.all.map(elem => elem.value)\n  }\n\n  get ids () {\n    return this.all.map(elem => elem.id)\n  }\n\n  get (id) {\n    const parts = typeof id === 'string' ? id.split('.') : []\n\n    if (parts.length === 2) {\n      const [kind, uid] = parts\n      const elem = this.data[kind][uid]\n\n      return elem ? { ...elem, id: uid, kind } : null\n    }\n\n    throw TypeError('Element id must be a string in the format of \"kind.hash\"')\n  }\n\n  one (kind) {\n    return this.every(kind)[0]\n  }\n\n  every (kind) {\n    return Object.values(this.data[kind]).map(elem => new Element(elem))\n  }\n\n  resolve (elem) {\n    // FIXME: Use json-schema validator here instead to support cross-context typing.\n    // if (elem instanceof Element) return elem\n    if (typeof elem === 'object') return elem\n    if (typeof elem === 'string') return this.get(elem)\n    if (Array.isArray(elem)) return elem.map(el => this.get(el))\n    if (elem == null) return null\n\n    throw TypeError('Failed to resolve element due to unsupported data type')\n  }\n\n  // TODO: Rename to `insert`\n  register ({ kind, value, props }) {\n    if (!kind || typeof kind !== 'string') throw TypeError('kind must be a non-empty string')\n    if (value == null) throw TypeError('value must be defined and non-null')\n\n    const elem = elementize(kind, [value, ...props])\n    const uid = Element.uid(elem.id)\n    const record = this.cast({ ...elem, id: uid, kind })\n\n    this.data[kind] = this.data[kind] || {}\n    this.data[kind][uid] = record\n\n    this.source.elements = this.data\n\n    return new Element(record)\n  }\n\n  static cast (elements, as = _ => _) {\n    if (!elements) return null\n\n    // TODO: Validate element shape with JSON Schema\n    return Object.entries(elements)\n      .reduce((acc, [kind, ids]) => {\n        const elems = Object.entries(ids)\n          .reduce((acc, [id, elem]) => ({\n            ...acc,\n            [id]: as({ id, kind, ...elem })\n          }), {})\n\n        return { ...acc, [kind]: elems }\n      }, {})\n  }\n\n}\n\n// TODO: Hoist out to Music, leaky abstraction\nexport const MUSICAL_ELEMENTS = ['note', 'chord', 'scale', ' penta'] // triad\n","import { Element } from './elements'\nimport { Note } from './note'\n\n/**\n * Represents a single beat in a track.\n *\n * Beats are represented as a tuple and may contain multiple elements\n *\n * duration -> items -> elements\n */\nexport class Beat {\n\n  constructor (data, store) {\n    this.data = data\n    this.store = store\n  }\n\n  get id () {\n    return this.data.id\n  }\n\n  get index () {\n    return this.data.index\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get items () {\n    return this.data.items.map(item => ({\n      ...item,\n      elements: item.elements.map(elem => this.store.resolve(elem))\n    }))\n  }\n\n  get elements () {\n    return this.data.items.flatMap(({ elements }) =>\n      elements.map(elem => this.store.resolve(elem))\n    )\n  }\n\n  get kinds () {\n    return this.all(({ kind }) => kind)\n  }\n\n  get values () {\n    return this.all(({ value }) => value)\n  }\n\n  get notes () {\n    return this.notesOf(this.elements)\n  }\n\n  // Provides map of elements in a beat grouped by kind.\n  // WARN: Doesn't support multiple elements of the same kind.\n  get parts () {\n    return this.elements.reduce((parts, elem) => ({\n     ...parts,\n      [elem.kind]: elem\n    }), {})\n  }\n\n  get musical () {\n    return this.elements.every(elem => elem.musical)\n  }\n\n  all (cast = _ => _) {\n    return [...new Set(this.elements.map(cast))]\n  }\n\n  find (kind) {\n    return this.elements.find(elem => kind === elem.kind)\n  }\n\n  filter (kind) {\n    return this.elements.filter(elem => kind === elem.kind)\n  }\n\n  last (kind) {\n    return this.filter(kind).reverse()[0]\n  }\n\n  either (kinds) {\n    return kinds.reduce((acc, kind) => acc.length ? acc : this.filter(kind), [])\n  }\n\n  notesOf (elements) {\n    return Note.unite(elements.flatMap(({ notes }) => notes))\n  }\n\n  static from (beats, store) {\n    if (Array.isArray(beats)) {\n      return beats.map(beat => new Beat(beat, store))\n    }\n\n    return [new Beat(beats, store)]\n  }\n\n}\n","import { Note } from './note'\nimport { Durations } from './durations'\nimport { Element, Elements, MUSICAL_ELEMENTS } from './elements'\nimport { Beat } from './beats'\nimport { compose, notesIn } from './data'\n\nexport class Music {\n\n  constructor (source) {\n    this.assign(source)\n  }\n\n  init () {\n    if (!this.parses) return null\n\n    this.store = new Elements({\n      source: this.data,\n      cast: elem => ({\n        ...elem,\n        notes: Note.all(elem.kind, elem.value)\n      })\n    })\n\n    this.beats = Beat.from(this.data.beats, this.store)\n    this.durations = new Durations(this.data)\n  }\n\n  assign (source) {\n    this.source = source\n    this.data = compose(source)\n\n    this.init()\n\n    return this\n  }\n\n  get headers () {\n    return this.data.headers\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get meter () {\n    return this.headers.meter\n  }\n\n  get tempo () {\n    return this.headers.tempo\n  }\n\n  get elements () {\n    return this.store.all\n  }\n\n  get notes () {\n    return Note.unite(\n      this.beats.flatMap(beat =>\n        beat.elements.flatMap(({ notes }) => notes)\n      )\n    )\n  }\n\n  get musical () {\n    return this.beats.every(beat => beat.musical)\n  }\n\n  get step () {\n    return this.units.beat.step\n  }\n\n  get interval () {\n    return this.units.time.step\n  }\n\n  get parses () {\n    return !this.data.fail\n  }\n\n  at (duration, is = 'step') {\n    const cursor = this.durations.at(duration, is)\n\n    return {\n      beat: this.beats[cursor.beat],\n      elems: this.store.resolve(cursor.elems),\n      play: this.store.resolve(cursor.play),\n      stop: this.store.resolve(cursor.stop)\n    }\n  }\n\n  beat (index) {\n    const cursor = this.durations.cyclic(index, { max: this.beats.length })\n\n    return this.beats[cursor]\n  }\n\n}\n"],"names":["ajv","Ajv","strictTuples","validate","compile","schema","valid","bach","message","pretty","json","console","error","errors","TypeError","compose","source","strict","upgraded","replace","scaleify","value","split","tonic","type","teoriaScale","toLowerCase","TeoriaScale","chordify","teoriaChord","TeoriaChord","scaleToString","scale","toString","name","notesInChord","notes","note","Note","valueOf","notesInScale","notesIn","kind","notesOf","chord","penta","notesIntersect","left","right","teoriaNote","TeoriaNote","e","parse","chroma","scientific","all","has","other","equals","hash","gcd","a","b","clamp","min","max","Math","lerp","ratio","x","y","invlerp","steps","floor","length","Lens","unit","is","as","grid","origin","data","use","cyclic","Units","map","lens","Number","index","cast","head","tail","normalize","to","calc","adjust","_","output","scope","delta","range","basis","size","container","snap","key","props","Durations","init","assign","total","units","bar","metrics","duration","step","state","context","play","stop","beat","elems","durations","result","abs","pulse","time","ms","second","Element","id","uid","MUSICAL_ELEMENTS","pop","Elements","store","elements","kinds","elem","parts","get","el","elementize","record","acc","ids","Beat","items","item","resolve","musical","unite","beats","Music","parses","from","headers","meter","tempo","fail","cursor","at"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,GAAG,GAAG,IAAIC,uBAAJ,CAAQ;AAAEC,EAAAA,YAAY,EAAE;AAAhB,CAAR,CAAZ;AAEY,IAACC,QAAQ,GAAGH,GAAG,CAACI,OAAJ,CAAYC,0BAAZ,CAAZ;;AAEA,IAACC,KAAK,GAAG,SAARA,KAAQ,CAAAC,IAAI,EAAI;AAC3B,MAAI,CAACJ,QAAQ,CAACI,IAAD,CAAb,EAAqB;AACnB,QAAMC,OAAO,GAAG,+BAAhB;;AACA,QAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,IAAI;AAAA,aAAI,gBAAeA,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAJ;AAAA,KAAnB;;AAEAC,IAAAA,OAAO,CAACC,KAAR,CAAcJ,OAAd,EAAuBC,MAAM,CAACF,IAAD,CAA7B;AACAI,IAAAA,OAAO,CAACC,KAAR,CAAcH,MAAM,CAACN,QAAQ,CAACU,MAAV,CAApB;AAEA,UAAMC,SAAS,iCAAf;AACD;;AAED,SAAOP,IAAP;CAXU;ACGZ;AACA;AACA;AACA;AACA;;;AACY,IAACQ,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAA2B;AAAA,MAAlBC,MAAkB,uEAAT,IAAS;;AAChD,MAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,QAAME,QAAQ,GAAGF,MAAM,CAACG,OAAP,CAAe,QAAf,EAAyB,OAAzB,CAAjB;AAEA,WAAOZ,wBAAAA,CAAKQ,OAALR,CAAaW,QAAbX,CAAP;AACD;;AAED,MAAI,QAAOS,MAAP,MAAkB,QAAtB,EAAgC;AAC9B,WAAOC,MAAM,GAAGX,KAAK,CAACU,MAAD,CAAR,GAAmBA,MAAhC;AACD;;AAED,QAAMF,SAAS,oDAA4CE,MAA5C,wDAAf;CAXU;;AAcL,SAASI,QAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAC/B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,uBAAsBA,KAAK,CAACC,KAAN,CAAY,GAAZ,CAAtB;AAAA;AAAA,QAAOC,KAAP;AAAA,QAAcC,IAAd,oBAD6B;;;AAI7B,WAAOC,YAAAA,CAAYF,KAAZE,EAAmBD,IAAI,CAACE,WAAL,EAAnBD,CAAP;AACD,GALD,MAKO,IAAIJ,KAAK,YAAYM,YAArB,EAAkC;AACvC,WAAON,KAAP;AACD;;AAED,QAAMP,SAAS,0EAA+BO,KAA/B,0BAA0CA,KAA1C,EAAf;AACD;;AAEM,SAASO,QAAT,CAAmBP,KAAnB,EAA0B;AAAA;;AAC/B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOQ,YAAAA,CAAYR,KAAZQ,CAAP;AACD,GAFD,MAEO,IAAIR,KAAK,YAAYS,YAArB,EAAkC;AACvC,WAAOT,KAAP;AACD;;AAED,QAAMP,SAAS,2EAA+BO,KAA/B,2BAA0CA,KAA1C,EAAf;AACD;;AAEM,SAASU,aAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AACpC,uDAAU,mCAAAA,KAAK,CAACT,KAAN,CAAYU,QAAZ,oBAA6B,CAA7B,EAA+B,CAA/B,CAAV,wBAA+CD,KAAK,CAACE,IAArD;AACD;;AAEM,SAASC,YAAT,CAAuBd,KAAvB,EAA8B;AAAA;;AACnC,SAAO,iCAAAO,QAAQ,CAACP,KAAD,CAAR,CACJe,KADI,oBAEA,UAAAC,IAAI;AAAA,WAAIC,IAAI,CAACC,OAAL,CAAaF,IAAb,CAAJ;AAAA,GAFJ,CAAP;AAGD;;AAEM,SAASG,YAAT,CAAuBnB,KAAvB,EAA8B;AAAA;;AACnC,SAAO,iCAAAD,QAAQ,CAACC,KAAD,CAAR,CACJe,KADI,oBAEA,UAAAC,IAAI;AAAA,WAAIC,IAAI,CAACC,OAAL,CAAaF,IAAb,CAAJ;AAAA,GAFJ,CAAP;AAGD;;AAEM,SAASI,OAAT,CAAkBC,IAAlB,EAAwBrB,KAAxB,EAA+B;AACpC,MAAMe,KAAK,GAAGO,OAAO,CAACD,IAAD,CAArB;;AAEA,MAAIN,KAAJ,EAAW;AACT,WAAOA,KAAK,CAACf,KAAD,CAAZ;AACD;;AAED,SAAO,EAAP;AACD,EAED;AACA;;;AACY,IAACsB,OAAO,GAAG;AACrBN,EAAAA,IAAI,EAAG,cAAAhB,KAAK;AAAA,WAAI,CAACA,KAAD,CAAJ;AAAA,GADS;AAErBuB,EAAAA,KAAK,EAAE,eAAAvB,KAAK;AAAA,WAAIc,YAAY,CAACd,KAAD,CAAhB;AAAA,GAFS;AAGrBW,EAAAA,KAAK,EAAE,eAAAX,KAAK;AAAA,WAAImB,YAAY,CAACnB,KAAD,CAAhB;AAAA,GAHS;AAIrBwB,EAAAA,KAAK,EAAE,eAAAxB,KAAK;AAAA,WAAImB,YAAY,CAACnB,KAAD,CAAhB;AAAA;AAJS,CAAX,EAOZ;;AACO,SAASyB,cAAT,CAAyBC,IAAzB,EAA+BC,KAA/B,EAAsC;AAC5C,SAAO,wBAAAD,IAAI,MAAJ,CAAAA,IAAI,EAAQ,UAAAV,IAAI;AAAA,WAAI,0BAAAW,KAAK,MAAL,CAAAA,KAAK,EAAUX,IAAV,CAAT;AAAA,GAAZ,CAAX;ECtFD;AACA;;;IACaC;;;;;;;WAEX,eAAcjB,KAAd,EAAqB;AAAA;;AACnB,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAO4B,WAAAA,CAAW5B,KAAX4B,CAAP;AACD,OAFD,MAEO,IAAI,QAAO5B,KAAP,MAAiB,QAAjB,IAA6BA,KAAK,YAAY6B,WAAlD,EAA8D;AACnE,eAAO7B,KAAP;AACD;;AAED,YAAMP,SAAS,0EAA8BO,KAA9B,2BAAyCA,KAAzC,EAAf;AACD;;;WAED,aAAYqB,IAAZ,EAAkBL,IAAlB,EAAwB;AACtB,UAAI;AACF,eAAOI,OAAO,CAACC,IAAD,EAAOL,IAAP,CAAd;AACD,OAFD,CAEE,OAAOc,CAAP,EAAU;AACV,eAAO,EAAP;AACD;AACF;;;WAED,cAAad,IAAb,EAAmB;AACjB,aAAOC,IAAI,CAACc,KAAL,CAAWf,IAAX,EAAiBgB,MAAjB,EAAP;AACD;;;WAED,iBAAgBhB,IAAhB,EAAsB;AACpB,aAAOC,IAAI,CAACC,OAAL,CAAaF,IAAb,CAAP;AACD;;;;;WAID,iBAAgBA,IAAhB,EAAsB;AACpB,aAAOC,IAAI,CAACc,KAAL,CAAWf,IAAX,EACJiB,UADI;;AAAA,OAIJnC,OAJI,CAII,SAJJ,EAIe,EAJf,CAAP;AAKD;;;WAED,kBAAiBiB,KAAjB,EAAwB;AACtB,aAAO,qBAAAA,KAAK,MAAL,CAAAA,KAAK,EAAKE,IAAI,CAACC,OAAV,CAAZ;AACD;;;WAED,oBAAmBF,IAAnB,EAAyB;AACvB,aAAOY,WAAAA,CAAWX,IAAI,CAACC,OAAL,CAAaF,IAAb,CAAXY,CAAP;AACD;;;WAED,iBAA0B;AAAA,UAAZb,KAAY,uEAAJ,EAAI;AACxB,aAAO,wBAAAA,KAAK,MAAL,CAAAA,KAAK,EAAQ,UAACmB,GAAD,EAAMlB,IAAN,EAAe;AACjC,YAAMhB,KAAK,GAAGiB,IAAI,CAACC,OAAL,CAAaF,IAAb,CAAd;;AACA,YAAMmB,GAAG,GAAG,0BAAAlB,IAAI,MAAJ,CAAAA,IAAI,EAAUiB,GAAV,EAAelC,KAAf,CAAhB;;AAEA,eAAO,CAACmC,GAAD,GAAO,wBAAAD,GAAG,MAAH,CAAAA,GAAG,EAAQlC,KAAR,CAAV,GAA2BkC,GAAlC;AACD,OALW,EAKT,EALS,CAAZ;AAMD;;;WAED,oBAAmC;AAAA,UAAlBnB,KAAkB,uEAAV,EAAU;AAAA,UAANC,IAAM;AACjC,aAAO,sBAAAD,KAAK,MAAL,CAAAA,KAAK,EAAM,UAAAqB,KAAK;AAAA,eAAInB,IAAI,CAACoB,MAAL,CAAYD,KAAZ,EAAmBpB,IAAnB,CAAJ;AAAA,OAAX,CAAZ;AACD;;;WAED,gBAAeU,IAAf,EAAqBC,KAArB,EAA4B;AAC1B,aAAOV,IAAI,CAACqB,IAAL,CAAUZ,IAAV,KAAmBT,IAAI,CAACqB,IAAL,CAAUX,KAAV,CAA1B;AACD;;;;;AClEH;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASY,KAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoB;AACzB,MAAIA,CAAC,IAAI,CAAT,EAAY;AACV,WAAOD,CAAP;AACD;;AAED,SAAOD,KAAG,CAACE,CAAD,EAAID,CAAC,GAAGC,CAAR,CAAV;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,OAAT,CAAgB1C,KAAhB,EAAyC;AAAA,MAAlB2C,GAAkB,uEAAZ,CAAY;AAAA,MAATC,GAAS,uEAAH,CAAG;AAC9C,SAAOC,IAAI,CAACF,GAAL,CAASC,GAAT,EAAcC,IAAI,CAACD,GAAL,CAASD,GAAT,EAAc3C,KAAd,CAAd,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS8C,MAAT,CAAeC,KAAf,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,SAAQD,CAAC,IAAI,IAAID,KAAR,CAAF,GAAqBE,CAAC,GAAGF,KAAhC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEO,SAASG,SAAT,CAAkBlD,KAAlB,EAAyBgD,CAAzB,EAA4BC,CAA5B,EAA+B;AACpC,SAAOP,OAAK,CAAC,CAAC1C,KAAK,GAAGgD,CAAT,KAAeC,CAAC,GAAGD,CAAnB,CAAD,CAAZ;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,KAAT,CAAgBJ,KAAhB,EAAuBb,GAAvB,EAA4B;AACjCa,EAAAA,KAAK,IAAI,CAAT;AAEA,MAAIA,KAAK,GAAG,CAAZ,EAAeA,KAAK,IAAI,CAAT;AAEf,SAAOb,GAAG,CAACW,IAAI,CAACO,KAAL,CAAWL,KAAK,GAAGb,GAAG,CAACmB,MAAvB,CAAD,CAAV;;;IC/DIC;AAEJ,kBAQQ;AAAA,mFAAJ,EAAI;AAAA,yBAPNC,IAOM;AAAA,QAPNA,IAOM,0BAPC,CAOD;AAAA,uBANNC,EAMM;AAAA,QANNA,EAMM,wBAND,CAMC;AAAA,uBALNC,EAKM;AAAA,QALNA,EAKM,wBALD,CAKC;AAAA,wBAJNd,GAIM;AAAA,QAJNA,GAIM,yBAJA,CAIA;AAAA,wBAHNC,GAGM;AAAA,QAHNA,GAGM,yBAHA,CAGA;AAAA,yBAFNc,IAEM;AAAA,QAFNA,IAEM,0BAFC,CAED;AAAA,2BADNC,MACM;AAAA,QADNA,MACM,4BADG,CACH;;AAAA;;AACN,SAAKC,IAAL,GAAY;AAAEL,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,EAAE,EAAFA,EAAR;AAAYC,MAAAA,EAAE,EAAFA,EAAZ;AAAgBd,MAAAA,GAAG,EAAHA,GAAhB;AAAqBC,MAAAA,GAAG,EAAHA,GAArB;AAA0Bc,MAAAA,IAAI,EAAJA,IAA1B;AAAgCC,MAAAA,MAAM,EAANA;AAAhC,KAAZ,CADM;;AAIP;;;;SAED,eAAY;AACV,aAAO,KAAKC,IAAL,CAAUL,IAAV,IAAkB,KAAKK,IAAL,CAAUJ,EAA5B,IAAkC,CAAzC;AACD;;;SAED,eAAU;AACR,aAAO,KAAKI,IAAL,CAAUJ,EAAV,IAAgB,KAAKD,IAA5B;AACD;;;SAED,eAAU;AACR,aAAO,KAAKK,IAAL,CAAUH,EAAV,IAAgB,KAAKF,IAA5B;AACD;;;SAED,eAAW;AACT,aAAO,KAAKK,IAAL,CAAUjB,GAAV,IAAiB,CAAxB;AACD;;;SAED,eAAW;AACT,aAAO,KAAKiB,IAAL,CAAUhB,GAAV,4BAAP;AACD;;;SAED,eAAY;AACV,aAAO,KAAKgB,IAAL,CAAUF,IAAV,IAAkB,CAAzB;AACD;;;SAED,eAAc;AACZ,aAAO,KAAKE,IAAL,CAAUD,MAAV,IAAoB,CAA3B;AACD;;;WAED,aAAKC,IAAL,EAAW;AACT,aAAO,eAAc,EAAd,EAAkB,KAAKA,IAAvB,EAA6BA,IAA7B,CAAP;AACD;;;WAED,gBAAQA,IAAR,EAAc;AACZ,WAAKA,IAAL,GAAY,KAAKC,GAAL,CAASD,IAAT,CAAZ;AAEA,aAAO,IAAP;AACD;;;;;AAIH;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASrB,GAAT,CAAcS,CAAd,EAAiBC,CAAjB,EAAoB;AAClB,SAAOA,CAAC,KAAK,CAAN,GAAUD,CAAV,GAAcT,GAAG,CAACU,CAAD,EAAID,CAAC,GAAGC,CAAR,CAAxB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,MAAT,CAAgB1C,KAAhB,EAAqC;AAAA,MAAdgD,CAAc,uEAAV,CAAU;AAAA,MAAPC,CAAO,uEAAH,CAAG;AACnC,SAAOJ,IAAI,CAACF,GAAL,CAASM,CAAT,EAAYJ,IAAI,CAACD,GAAL,CAASI,CAAT,EAAYhD,KAAZ,CAAZ,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8C,KAAT,CAAeC,KAAf,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC1B,SAAQD,CAAC,IAAI,IAAID,KAAR,CAAF,GAAqBE,CAAC,GAAGF,KAAhC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,QAAT,CAAkBlD,KAAlB,EAAyBgD,CAAzB,EAA4BC,CAA5B,EAA+B;AAC7B,SAAOP,MAAK,CAAC,CAAC1C,KAAK,GAAGgD,CAAT,KAAeC,CAAC,GAAGD,CAAnB,CAAD,CAAZ;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASc,OAAT,CAAiB9D,KAAjB,EAAwBgD,CAAxB,EAA2BC,CAA3B,EAA8B;AAC5B,SAAO,CAACjD,KAAK,IAAIgD,CAAT,GAAahD,KAAb,GAAqBA,KAAK,GAAGiD,CAA9B,IAAmCA,CAA1C;AACD;;IAgBKc;AAEJ,mBAGQ;AAAA,oFAAJ,EAAI;AAAA;AAAA,QAFNC,GAEM,0BAFA,EAEA;AAAA,2BADNC,IACM;AAAA,QADNA,IACM,2BADC,EACD;;AAAA;;AACN,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL,GAAY,IAAIX,IAAJ,CAASW,IAAT,CAAZ;AACD;;;;WAED,mBAAWV,IAAX,EAAiB;AACf,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAOA,IAAP;AACD;;AAED,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAMvD,KAAK,GAAG,2BAASuD,IAAT,KAAkB,CAAhC;AAEA,eAAO,OAAOvD,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACuD,IAAD,CAAnC,GAA4CW,MAAM,CAAClE,KAAD,CAAzD;AACD;;AAED,aAAO,CAAP;AACD;;;WAED,iBAAoC;AAAA,UAA7BA,KAA6B,uEAArB,CAAqB;AAAA,UAAlBiE,IAAkB,uEAAX,KAAKA,IAAM;;AAClC,2BAAqC,KAAKA,IAAL,CAAUJ,GAAV,CAAcI,IAAd,CAArC;AAAA,UAAQT,EAAR,kBAAQA,EAAR;AAAA,UAAYC,EAAZ,kBAAYA,EAAZ;AAAA,UAAgBd,GAAhB,kBAAgBA,GAAhB;AAAA,UAAqBC,GAArB,kBAAqBA,GAArB;AAAA,UAA0Be,MAA1B,kBAA0BA,MAA1B;;AACA,UAAMQ,KAAK,GAAG,KAAKC,IAAL,CAAUpE,KAAK,GAAG2D,MAAlB,EAA0B;AAAEH,QAAAA,EAAE,EAAFA,EAAF;AAAMC,QAAAA,EAAE,EAAFA;AAAN,OAA1B,CAAd;AACA,UAAMY,IAAI,GAAG,KAAKD,IAAL,CAAUzB,GAAG,IAAI,CAAjB,EAAoB;AAAEa,QAAAA,EAAE,EAAFA,EAAF;AAAMC,QAAAA,EAAE,EAAFA;AAAN,OAApB,CAAb;AACA,UAAMa,IAAI,GAAG,KAAKF,IAAL,CAAUxB,GAAG,IAAI5C,KAAjB,EAAwB;AAAEwD,QAAAA,EAAE,EAAFA,EAAF;AAAMC,QAAAA,EAAE,EAAFA;AAAN,OAAxB,CAAb;AAEA,aAAO;AAAEzD,QAAAA,KAAK,EAALA,KAAF;AAASmE,QAAAA,KAAK,EAALA,KAAT;AAAgBE,QAAAA,IAAI,EAAJA,IAAhB;AAAsBC,QAAAA,IAAI,EAAJA;AAAtB,OAAP;AACD;;;WAED,gBAAoE;AAAA,UAA9DtE,KAA8D,uEAAtD,CAAsD;;AAAA,sFAAJ,EAAI;AAAA,2BAAjDwD,EAAiD;AAAA,UAAjDA,EAAiD,yBAA5C,KAAKS,IAAL,CAAUV,IAAkC;AAAA,2BAA5BE,EAA4B;AAAA,UAA5BA,EAA4B,yBAAvB,KAAKQ,IAAL,CAAUV,IAAa;;;AAElE,aAAO,KAAKgB,SAAL,CAAevE,KAAf,KAAyB,KAAKuE,SAAL,CAAed,EAAf,IAAqB,KAAKc,SAAL,CAAef,EAAf,CAA9C,CAAP;AACD;;;WAED,gBAAkE;AAAA,UAA5DxD,KAA4D,uEAApD,CAAoD;;AAAA,sFAAJ,EAAI;AAAA,2BAA/CwE,EAA+C;AAAA,UAA/CA,EAA+C,yBAA1C,KAAKP,IAAL,CAAUV,IAAgC;AAAA,6BAA1BkB,IAA0B;AAAA,UAA1BA,IAA0B,2BAAnB5B,IAAI,CAACO,KAAc;;AAChE,UAAMG,IAAI,GAAG,KAAKgB,SAAL,CAAeC,EAAf,CAAb;AACA,UAAME,MAAM,GAAG,OAAOD,IAAP,KAAgB,UAAhB,GAA6BA,IAA7B,GAAoC,UAAAE,CAAC;AAAA,eAAIA,CAAJ;AAAA,OAApD;AACA,UAAMC,MAAM,GAAGF,MAAM,CAAC1E,KAAK,GAAGuD,IAAT,CAAN,GAAuBA,IAAtC;AAEA,aAAO,KAAKgB,SAAL,CAAeK,MAAM,IAAI,CAAzB,CAAP;AACD;;;WAED,eAAO5E,KAAP,EAAciE,IAAd,EAAoB;AAClB,wBAA8B,KAAKY,KAAL,CAAW7E,KAAX,EAAkBiE,IAAlB,CAA9B;AAAA,UAAQE,KAAR,eAAQA,KAAR;AAAA,UAAeE,IAAf,eAAeA,IAAf;AAAA,UAAqBC,IAArB,eAAqBA,IAArB;;AAEA,aAAO5B,MAAK,CAACyB,KAAD,EAAQE,IAAR,EAAcC,IAAd,CAAZ;AACD;;;WAED,gBAAQtE,KAAR,EAAeiE,IAAf,EAAqB;AACnB,yBAA8B,KAAKY,KAAL,CAAW7E,KAAX,EAAkBiE,IAAlB,CAA9B;AAAA,UAAQE,KAAR,gBAAQA,KAAR;AAAA,UAAeE,IAAf,gBAAeA,IAAf;AAAA,UAAqBC,IAArB,gBAAqBA,IAArB;;AAEA,aAAOR,OAAM,CAACK,KAAD,EAAQE,IAAR,EAAcC,IAAd,CAAb;AACD;;;WAED,cAAMvB,KAAN,EAAakB,IAAb,EAAmB;AACjB,yBAAuB,KAAKY,KAAL,CAAW,CAAX,EAAcZ,IAAd,CAAvB;AAAA,UAAQI,IAAR,gBAAQA,IAAR;AAAA,UAAcC,IAAd,gBAAcA,IAAd;;AAEA,aAAOxB,KAAI,CAACC,KAAD,EAAQsB,IAAR,EAAcC,IAAd,CAAX;AACD;;;WAED,iBAAStE,KAAT,EAAgBiE,IAAhB,EAAsB;AACpB,yBAA8B,KAAKY,KAAL,CAAW7E,KAAX,EAAkBiE,IAAlB,CAA9B;AAAA,UAAQE,KAAR,gBAAQA,KAAR;AAAA,UAAeE,IAAf,gBAAeA,IAAf;AAAA,UAAqBC,IAArB,gBAAqBA,IAArB;;AAEA,aAAOpB,QAAO,CAACiB,KAAD,EAAQE,IAAR,EAAcC,IAAd,CAAd;AACD;;;WAED,eAAOtE,KAAP,EAAciE,IAAd,EAAoB;AAClB,yBAAwB,KAAKY,KAAL,CAAW7E,KAAX,EAAkBiE,IAAlB,CAAxB;AAAA,UAAQE,KAAR,gBAAQA,KAAR;AAAA,UAAeE,IAAf,gBAAeA,IAAf;;AAEA,aAAOF,KAAK,GAAGE,IAAf;AACD;;;WAED,eAAOrE,KAAP,EAAciE,IAAd,EAAoB;AAClB,yBAAuB,KAAKY,KAAL,CAAW7E,KAAX,EAAkBiE,IAAlB,CAAvB;AAAA,UAAQI,IAAR,gBAAQA,IAAR;AAAA,UAAcC,IAAd,gBAAcA,IAAd;;AAEA,aAAOA,IAAI,GAAGD,IAAd;AACD;;;WAED,kBAAUrE,KAAV,EAAiBiE,IAAjB,EAAuB;AACrB,UAAMa,KAAK,GAAG,KAAKA,KAAL,CAAW9E,KAAX,EAAkBiE,IAAlB,CAAd;AACA,UAAMc,KAAK,GAAG,KAAKA,KAAL,CAAW/E,KAAX,EAAkBiE,IAAlB,CAAd;AAEA,aAAOa,KAAK,GAAGC,KAAf;AACD;;;WAED,cAAM/E,KAAN,EAA+B;AAAA,UAAlBiE,IAAkB,uEAAX,KAAKA,IAAM;AAC7B,UAAMP,IAAI,GAAGO,IAAI,CAACP,IAAL,IAAa,CAA1B;AACA,UAAMsB,KAAK,GAAGzC,GAAG,CAACvC,KAAD,EAAQ0D,IAAR,CAAjB;AACA,UAAMuB,IAAI,GAAG,KAAKvC,KAAL,CAAW1C,KAAX,EAAkBiE,IAAlB,CAAb;AACA,UAAMiB,SAAS,GAAG,KAAKC,IAAL,CAAUF,IAAV,EAAgB;AAAET,QAAAA,EAAE,EAAEQ;AAAN,OAAhB,CAAlB;AACA,UAAMjC,KAAK,GAAGF,IAAI,CAACD,GAAL,CAAS,CAAT,EAAYC,IAAI,CAACF,GAAL,CAAS3C,KAAK,GAAGgF,KAAjB,EAAwBtB,IAAxB,CAAZ,CAAd;AACA,UAAMf,GAAG,GAAG3C,KAAK,IAAI0D,IAAT,GAAgBA,IAAhB,GAAuBsB,KAAnC;AAEA,aAAOnC,IAAI,CAACD,GAAL,CAASD,GAAT,EAAc,KAAKwC,IAAL,CAAUD,SAAV,EAAqB;AAAEV,QAAAA,EAAE,EAAEzB;AAAN,OAArB,CAAd,CAAP;AACD;;;;;WAID,kBAA+B;AAAA;AAAA;;AAAA,UAAvBQ,IAAuB,uEAAhB,KAAKU,IAAL,CAAUV,IAAM;AAC7B,UAAIA,IAAI,KAAK,KAAKU,IAAL,CAAUV,IAAvB,EAA6B,OAAO,IAAP;;AAE7B,UAAMS,GAAG,GAAG,yEAAe,IAAf,oBACF,UAACA,GAAD;AAAA;AAAA,YAAOoB,GAAP;AAAA,YAAYpF,KAAZ;;AAAA,eAAuB,eAAcgE,GAAd,sBAC5BoB,GAD4B,EACtB,KAAI,CAAChB,IAAL,CAAUpE,KAAV,EAAiB;AAAEwD,UAAAA,EAAE,EAAE,KAAI,CAACS,IAAL,CAAUT,EAAhB;AAAoBC,UAAAA,EAAE,EAAEF;AAAxB,SAAjB,CADsB,uBAEzBA,IAFyB,EAElB,CAFkB,EAAvB;AAAA,OADE,CAAZ;;AAKA,WAAKS,GAAL,GAAWA,GAAX;AACA,WAAKC,IAAL,CAAUV,IAAV,GAAiBA,IAAjB;AAEA,aAAO,IAAP;AACD;;;WAED,eAAO8B,KAAP,EAAc;AACZ,UAAMrB,GAAG,GAAG,eAAc,EAAd,uBAAkB,IAAlB,wBAA4BqB,KAA5B,EAAZ;;AACA,UAAMpB,IAAI,GAAG,eAAc,EAAd,EAAkB,KAAKA,IAAvB,EAA6BoB,KAAK,CAACpB,IAAnC,CAAb;;AAEA,aAAO,IAAIF,KAAJ,CAAU;AAAEC,QAAAA,GAAG,EAAHA,GAAF;AAAOC,QAAAA,IAAI,EAAJA;AAAP,OAAV,CAAP;AACD;;;WAED,aAAYoB,KAAZ,EAAmB;AACjB,aAAO,IAAItB,KAAJ,CAAUsB,KAAV,CAAP;AACD;;;;;AC3PH;AACA;AACA;AACA;AACA;;;IACaC;;;;;AAEX,qBAAa3F,MAAb,EAAqBsE,IAArB,EAA2B;AAAA;;AAAA;;AACzB,+BAAM;AAAED,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,IAAI,EAAJA;AAAb,KAAN;AAEA,WAAKtE,MAAL,GAAcA,MAAd;AACA,WAAKiE,IAAL,GAAYlE,OAAO,CAACC,MAAD,CAAnB;;AAEA,WAAK4F,IAAL;;AANyB;AAO1B;;;;WAED,gBAAQ;AACN,WAAKvB,GAAL,GAAW,qBAAAsB,SAAS,MAAT,CAAAA,SAAS,EAAK,KAAK1B,IAAV,CAApB;AAEA,WAAKK,IAAL,CAAUuB,MAAV,CAAiB;AAAEjC,QAAAA,IAAI,EAAE,MAAR;AAAgBX,QAAAA,GAAG,EAAE,KAAK6C;AAA1B,OAAjB;AACD;;;SAED,eAAa;AACX,aAAO,KAAK7B,IAAL,CAAU8B,KAAjB;AACD;;;SAED,eAAa;AACX,aAAO,KAAK9B,IAAL,CAAUT,KAAjB;AACD;;;SAED,eAAW;AACT,aAAO,KAAKuC,KAAL,CAAWC,GAAlB;AACD;;;SAED,eAAe;AACb,aAAO,KAAK/B,IAAL,CAAUgC,OAAjB;AACD;;;SAED,eAAW;AACT,aAAO,KAAKA,OAAL,CAAajD,GAApB;AACD;;;SAED,eAAW;AACT,aAAO,KAAKiD,OAAL,CAAahD,GAApB;AACD;;;SAED,eAAa;AACX,aAAO,KAAKgD,OAAL,CAAaH,KAApB;AACD;;;WAED,YAAII,QAAJ,EAA2B;AAAA,UAAbrC,EAAa,uEAAR,MAAQ;AACzB,UAAMsC,IAAI,GAAGjD,IAAI,CAACO,KAAL,CAAW,KAAKgB,IAAL,CAAUyB,QAAV,EAAoB;AAAErC,QAAAA,EAAE,EAAFA,EAAF;AAAMC,QAAAA,EAAE,EAAE;AAAV,OAApB,CAAX,CAAb;AACA,UAAMU,KAAK,GAAG,KAAKL,MAAL,CAAYgC,IAAZ,CAAd;AACA,UAAMC,KAAK,GAAG,KAAK5C,KAAL,CAAWgB,KAAX,CAAd;;AACA,kBAA8B4B,KAAK,IAAI,EAAvC;AAAA;AAAA,UAAOC,OAAP;AAAA,UAAgBC,IAAhB;AAAA,UAAsBC,IAAtB;;AAEA,aAAO;AACLC,QAAAA,IAAI,EAAEH,OAAO,CAAC,CAAD,CADR;AAELI,QAAAA,KAAK,EAAE,uBAAAJ,OAAO,MAAP,CAAAA,OAAO,EAAO,CAAP,CAFT;AAGLC,QAAAA,IAAI,EAAJA,IAHK;AAILC,QAAAA,IAAI,EAAJA,IAJK;AAKL/B,QAAAA,KAAK,EAALA;AALK,OAAP;AAOD;;;WAED,mBAAW0B,QAAX,EAAuD;AAAA,sFAAJ,EAAI;AAAA,2BAAhCrC,EAAgC;AAAA,UAAhCA,EAAgC,yBAA3B,IAA2B;AAAA,2BAArBC,EAAqB;AAAA,UAArBA,EAAqB,yBAAhB,OAAgB;;AACrD,UAAMU,KAAK,GAAG,KAAKC,IAAL,CAAUyB,QAAV,EAAoB;AAAErC,QAAAA,EAAE,EAAFA,EAAF;AAAMC,QAAAA,EAAE,EAAFA;AAAN,OAApB,CAAd;AACA,UAAMkC,GAAG,GAAG,KAAKvB,IAAL,CAAU,KAAKuB,GAAL,CAASG,IAAnB,EAAyB;AAAErC,QAAAA,EAAE,EAAFA;AAAF,OAAzB,CAAZ;AAEA,aAAOZ,IAAI,CAACO,KAAL,CAAWe,KAAK,GAAGwB,GAAnB,CAAP;AACD;;;;;WAID,kBAAUE,QAAV,EAKQ;AAAA;AAAA;;AAAA,uFAAJ,EAAI;AAAA,6BAJNrC,EAIM;AAAA,UAJNA,EAIM,0BAJD,IAIC;AAAA,gCAHNkC,KAGM;AAAA,UAHNA,KAGM,6BAHE,CAAC,IAAD,EAAO,IAAP,CAGF;AAAA,+BAFNjB,IAEM;AAAA,UAFNA,IAEM,4BAFC,OAED;AAAA,+BADNQ,IACM;AAAA,UADNA,IACM,4BADC,KACD;;AACN,UAAMoB,SAAS,GAAG,uDAAAX,KAAK,MAAL,CAAAA,KAAK,EAChB,UAAAnC,IAAI,EAAI;AACX,YAAMvD,KAAK,GAAG,MAAI,CAACoE,IAAL,CAAUyB,QAAV,EAAoB;AAAErC,UAAAA,EAAE,EAAFA,EAAF;AAAMC,UAAAA,EAAE,EAAEF;AAAV,SAApB,CAAd;;AACA,YAAM+C,MAAM,GAAGzD,IAAI,CAAC4B,IAAD,CAAJ,CAAWzE,KAAX,CAAf;AAEA,eAAO,MAAI,CAACoE,IAAL,CAAUkC,MAAV,EAAkB;AAAE9C,UAAAA,EAAE,EAAED,IAAN;AAAYE,UAAAA,EAAE,EAAED;AAAhB,SAAlB,CAAP;AACD,OANoB,CAAL,kBAOV,UAAChB,CAAD,EAAIC,CAAJ;AAAA,eAAUI,IAAI,CAAC0D,GAAL,CAASV,QAAQ,GAAGrD,CAApB,IAAyBK,IAAI,CAAC0D,GAAL,CAASV,QAAQ,GAAGpD,CAApB,CAAnC;AAAA,OAPU,CAAlB;;AASA,aAAOI,IAAI,CAACoC,IAAD,CAAJ,OAAApC,IAAI,qBAAUwD,SAAV,EAAX;AACD;;;WAED,aAAY1G,MAAZ,EAAoB;AAClB,UAAMiE,IAAI,GAAGlE,OAAO,CAACC,MAAD,EAAS,KAAT,CAApB;AACA,wBAAyCiE,IAAI,CAAC8B,KAA9C;AAAA,UAAQS,IAAR,eAAQA,IAAR;AAAA,UAAcL,IAAd,eAAcA,IAAd;AAAA,UAAoBU,KAApB,eAAoBA,KAApB;AAAA,UAA2BC,IAA3B,eAA2BA,IAA3B;AAAA,UAAiCd,GAAjC,eAAiCA,GAAjC;AAEA,aAAO;AACLG,QAAAA,IAAI,EAAE,CADD;AAELU,QAAAA,KAAK,EAAE,KAAKL,IAAI,CAACL,IAAL,GAAYK,IAAI,CAACK,KAAtB,CAFF;AAGLb,QAAAA,GAAG,EAAEA,GAAG,CAACG,IAHJ;AAILY,QAAAA,EAAE,EAAE,IAAID,IAAI,CAACX,IAJR;AAKLa,QAAAA,MAAM,EAAG,IAAIF,IAAI,CAACX,IAAV,GAAkB,IALrB;AAML,aAAKA,IANA;AAOL,aAAKU,KAPA;AAQL,aAAKb,GAAG,CAACG,IARJ;AASL,cAAMH,GAAG,CAACG,IAAJ,GAAW,CATZ;AAUL,cAAMH,GAAG,CAACG,IAAJ,GAAW,CAVZ;AAWL,cAAMH,GAAG,CAACG,IAAJ,GAAW,CAXZ;AAYL,eAAOH,GAAG,CAACG,IAAJ,GAAW,EAZb;AAaL,eAAOH,GAAG,CAACG,IAAJ,GAAW,EAbb;AAcL,eAAOH,GAAG,CAACG,IAAJ,GAAW,EAdb;AAeL,eAAOH,GAAG,CAACG,IAAJ,GAAYH,GAAG,CAACG,IAAJ,GAAW,CAfzB;AAgBL,eAAOH,GAAG,CAACG,IAAJ,GAAYH,GAAG,CAACG,IAAJ,GAAW,CAhBzB;AAiBL,gBAAQH,GAAG,CAACG,IAAJ,GAAYH,GAAG,CAACG,IAAJ,GAAW,EAjB1B;AAkBL,gBAAQH,GAAG,CAACG,IAAJ,GAAYH,GAAG,CAACG,IAAJ,GAAW,EAlB1B;AAmBL,gBAAQH,GAAG,CAACG,IAAJ,GAAYH,GAAG,CAACG,IAAJ,GAAW;AAnB1B,OAAP;AAqBD;;;;EAhH4B/B;ACH/B;AACA;AACA;AACA;;;IACa6C;AAEX,mBAAahD,IAAb,EAAmB;AAAA;;AACjB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;;;SAED,eAAU;AAAA;;AACR,4DAAU,KAAKA,IAAL,CAAUvC,IAApB,yBAA4B,KAAKuC,IAAL,CAAUiD,EAAtC;AACD;;;SAED,eAAW;AACT,aAAOD,OAAO,CAACE,GAAR,CAAY,KAAKD,EAAjB,CAAP;AACD;;;SAED,eAAa;AACX,aAAO,KAAKjD,IAAL,CAAU5D,KAAjB;AACD;;;SAED,eAAa;AACX,aAAO,KAAK4D,IAAL,CAAUyB,KAAV,IAAmB,EAA1B;AACD;;;SAED,eAAY;AACV,aAAO,KAAKzB,IAAL,CAAUvC,IAAV,CAAehB,WAAf,EAAP;AACD;;;SAED,eAAgB;AACd,aAAO,KAAKuD,IAAL,CAAUiC,QAAjB;AACD;;;SAED,eAAa;AACX,aAAO5E,IAAI,CAACiB,GAAL,CAAS,KAAKb,IAAd,EAAoB,KAAKrB,KAAzB,CAAP;AACD;;;SAED,eAAe;AACb,aAAO,0BAAA+G,gBAAgB,MAAhB,CAAAA,gBAAgB,EAAU,KAAK1F,IAAf,CAAvB;AACD;;;WAED,aAAYwF,EAAZ,EAAgB;AACd,aAAOA,EAAE,CAAC5G,KAAH,CAAS,GAAT,EAAc+G,GAAd,EAAP;AACD;;;;;AAIH;AACA;AACA;;;IACaC;AAEX,sBAA2C;AAAA,qFAAJ,EAAI;AAAA,QAA5BtH,MAA4B,UAA5BA,MAA4B;AAAA,QAApBuH,KAAoB,UAApBA,KAAoB;AAAA,QAAb9C,IAAa,UAAbA,IAAa;;AAAA;;AACzC,SAAKzE,MAAL,GAAcD,OAAO,CAACC,MAAD,CAArB;;AACA,SAAKyE,IAAL,GAAYA,IAAI,IAAK,UAAAO,CAAC;AAAA,aAAIA,CAAJ;AAAA,KAAtB;;AACA,SAAKf,IAAL,GAAYsD,KAAK,IAAID,QAAQ,CAAC7C,IAAT,CAAc,KAAKzE,MAAL,CAAYwH,QAA1B,EAAoC/C,IAApC,CAArB;AACD;;;;SAED,eAAW;AAAA;AAAA;;AACT,aAAO,2CAAKgD,KAAL,mBAAmB,UAAA/F,IAAI;AAAA,eAAI,uBAAA,MAAI,MAAJ,CAAA,MAAI,EAAOA,IAAP,CAAR;AAAA,OAAvB,CAAP;AACD;;;SAED,eAAa;AACX,aAAO,aAAY,KAAKuC,IAAjB,CAAP;AACD;;;SAED,eAAc;AAAA;;AACZ,aAAO,uCAAK1B,GAAL,mBAAa,UAAAmF,IAAI;AAAA,eAAIA,IAAI,CAACrH,KAAT;AAAA,OAAjB,CAAP;AACD;;;SAED,eAAW;AAAA;;AACT,aAAO,uCAAKkC,GAAL,mBAAa,UAAAmF,IAAI;AAAA,eAAIA,IAAI,CAACR,EAAT;AAAA,OAAjB,CAAP;AACD;;;WAED,aAAKA,EAAL,EAAS;AACP,UAAMS,KAAK,GAAG,OAAOT,EAAP,KAAc,QAAd,GAAyBA,EAAE,CAAC5G,KAAH,CAAS,GAAT,CAAzB,GAAyC,EAAvD;;AAEA,UAAIqH,KAAK,CAACjE,MAAN,KAAiB,CAArB,EAAwB;AACtB,oCAAoBiE,KAApB;AAAA,YAAOjG,IAAP;AAAA,YAAayF,GAAb;;AACA,YAAMO,IAAI,GAAG,KAAKzD,IAAL,CAAUvC,IAAV,EAAgByF,GAAhB,CAAb;AAEA,eAAOO,IAAI,mCAAQA,IAAR;AAAcR,UAAAA,EAAE,EAAEC,GAAlB;AAAuBzF,UAAAA,IAAI,EAAJA;AAAvB,aAAgC,IAA3C;AACD;;AAED,YAAM5B,SAAS,CAAC,0DAAD,CAAf;AACD;;;WAED,aAAK4B,IAAL,EAAW;AAAA;;AACT,aAAO,2DAAWA,IAAX,EAAiB,CAAjB,CAAP;AACD;;;WAED,eAAOA,IAAP,EAAa;AAAA;;AACX,aAAO,iDAAc,KAAKuC,IAAL,CAAUvC,IAAV,CAAd,oBAAmC,UAAAgG,IAAI;AAAA,eAAI,IAAIT,OAAJ,CAAYS,IAAZ,CAAJ;AAAA,OAAvC,CAAP;AACD;;;WAED,iBAASA,IAAT,EAAe;AAAA;;;;AAGb,UAAI,QAAOA,IAAP,MAAgB,QAApB,EAA8B,OAAOA,IAAP;AAC9B,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B,OAAO,KAAKE,GAAL,CAASF,IAAT,CAAP;AAC9B,UAAI,eAAcA,IAAd,CAAJ,EAAyB,OAAO,qBAAAA,IAAI,MAAJ,CAAAA,IAAI,EAAK,UAAAG,EAAE;AAAA,eAAI,MAAI,CAACD,GAAL,CAASC,EAAT,CAAJ;AAAA,OAAP,CAAX;AACzB,UAAIH,IAAI,IAAI,IAAZ,EAAkB,OAAO,IAAP;AAElB,YAAM5H,SAAS,CAAC,wDAAD,CAAf;AACD;;;;WAGD,0BAAkC;AAAA;;AAAA,UAAtB4B,IAAsB,UAAtBA,IAAsB;AAAA,UAAhBrB,KAAgB,UAAhBA,KAAgB;AAAA,UAATqF,KAAS,UAATA,KAAS;AAChC,UAAI,CAAChE,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC,MAAM5B,SAAS,CAAC,iCAAD,CAAf;AACvC,UAAIO,KAAK,IAAI,IAAb,EAAmB,MAAMP,SAAS,CAAC,oCAAD,CAAf;AAEnB,UAAM4H,IAAI,GAAGI,eAAAA,CAAWpG,IAAXoG,wCAAkBzH,KAAlByH,uCAA4BpC,KAA5BoC,GAAb;AACA,UAAMX,GAAG,GAAGF,OAAO,CAACE,GAAR,CAAYO,IAAI,CAACR,EAAjB,CAAZ;AACA,UAAMa,MAAM,GAAG,KAAKtD,IAAL,iCAAeiD,IAAf;AAAqBR,QAAAA,EAAE,EAAEC,GAAzB;AAA8BzF,QAAAA,IAAI,EAAJA;AAA9B,SAAf;AAEA,WAAKuC,IAAL,CAAUvC,IAAV,IAAkB,KAAKuC,IAAL,CAAUvC,IAAV,KAAmB,EAArC;AACA,WAAKuC,IAAL,CAAUvC,IAAV,EAAgByF,GAAhB,IAAuBY,MAAvB;AAEA,WAAK/H,MAAL,CAAYwH,QAAZ,GAAuB,KAAKvD,IAA5B;AAEA,aAAO,IAAIgD,OAAJ,CAAYc,MAAZ,CAAP;AACD;;;WAED,cAAaP,QAAb,EAAoC;AAAA;;AAAA,UAAb1D,EAAa,uEAAR,UAAAkB,CAAC;AAAA,eAAIA,CAAJ;AAAA,OAAO;AAClC,UAAI,CAACwC,QAAL,EAAe,OAAO,IAAP,CADmB;;AAIlC,aAAO,qDAAeA,QAAf,oBACG,UAACQ,GAAD,UAAsB;AAAA;;AAAA;AAAA,YAAftG,IAAe;AAAA,YAATuG,GAAS;;AAC5B,YAAMxB,KAAK,GAAG,qDAAewB,GAAf,oBACJ,UAACD,GAAD;AAAA;AAAA,cAAOd,EAAP;AAAA,cAAWQ,IAAX;;AAAA,iDACHM,GADG,2BAELd,EAFK,EAEApD,EAAE;AAAGoD,YAAAA,EAAE,EAAFA,EAAH;AAAOxF,YAAAA,IAAI,EAAJA;AAAP,aAAgBgG,IAAhB,EAFF;AAAA,SADI,EAIR,EAJQ,CAAd;;AAMA,+CAAYM,GAAZ,2BAAkBtG,IAAlB,EAAyB+E,KAAzB;AACD,OATI,EASF,EATE,CAAP;AAUD;;;;KAIH;;;AACY,IAACW,gBAAgB,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,QAA3B,CAApB;;AClJZ;AACA;AACA;AACA;AACA;AACA;AACA;;IACac;AAEX,gBAAajE,IAAb,EAAmBsD,KAAnB,EAA0B;AAAA;;AACxB,SAAKtD,IAAL,GAAYA,IAAZ;AACA,SAAKsD,KAAL,GAAaA,KAAb;AACD;;;;SAED,eAAU;AACR,aAAO,KAAKtD,IAAL,CAAUiD,EAAjB;AACD;;;SAED,eAAa;AACX,aAAO,KAAKjD,IAAL,CAAUO,KAAjB;AACD;;;SAED,eAAgB;AACd,aAAO,KAAKP,IAAL,CAAUiC,QAAjB;AACD;;;SAED,eAAa;AAAA;AAAA;;AACX,aAAO,uCAAKjC,IAAL,CAAUkE,KAAV,mBAAoB,UAAAC,IAAI;AAAA;;AAAA,+CAC1BA,IAD0B;AAE7BZ,UAAAA,QAAQ,EAAE,kCAAAY,IAAI,CAACZ,QAAL,mBAAkB,UAAAE,IAAI;AAAA,mBAAI,MAAI,CAACH,KAAL,CAAWc,OAAX,CAAmBX,IAAnB,CAAJ;AAAA,WAAtB;AAFmB;AAAA,OAAxB,CAAP;AAID;;;SAED,eAAgB;AAAA;AAAA;;AACd,aAAO,2CAAKzD,IAAL,CAAUkE,KAAV,mBAAwB;AAAA,YAAGX,QAAH,UAAGA,QAAH;AAAA,eAC7B,qBAAAA,QAAQ,MAAR,CAAAA,QAAQ,EAAK,UAAAE,IAAI;AAAA,iBAAI,MAAI,CAACH,KAAL,CAAWc,OAAX,CAAmBX,IAAnB,CAAJ;AAAA,SAAT,CADqB;AAAA,OAAxB,CAAP;AAGD;;;SAED,eAAa;AACX,aAAO,KAAKnF,GAAL,CAAS;AAAA,YAAGb,IAAH,UAAGA,IAAH;AAAA,eAAcA,IAAd;AAAA,OAAT,CAAP;AACD;;;SAED,eAAc;AACZ,aAAO,KAAKa,GAAL,CAAS;AAAA,YAAGlC,KAAH,UAAGA,KAAH;AAAA,eAAeA,KAAf;AAAA,OAAT,CAAP;AACD;;;SAED,eAAa;AACX,aAAO,KAAKsB,OAAL,CAAa,KAAK6F,QAAlB,CAAP;AACD;;;;;SAID,eAAa;AAAA;;AACX,aAAO,0CAAKA,QAAL,mBAAqB,UAACG,KAAD,EAAQD,IAAR;AAAA,+CACxBC,KADwB,2BAEzBD,IAAI,CAAChG,IAFoB,EAEbgG,IAFa;AAAA,OAArB,EAGH,EAHG,CAAP;AAID;;;SAED,eAAe;AAAA;;AACb,aAAO,yCAAKF,QAAL,mBAAoB,UAAAE,IAAI;AAAA,eAAIA,IAAI,CAACY,OAAT;AAAA,OAAxB,CAAP;AACD;;;WAED,eAAoB;AAAA;;AAAA,UAAf7D,IAAe,uEAAR,UAAAO,CAAC;AAAA,eAAIA,CAAJ;AAAA,OAAO;AAClB,gCAAW,SAAQ,uCAAKwC,QAAL,mBAAkB/C,IAAlB,CAAR,CAAX;AACD;;;WAED,cAAM/C,IAAN,EAAY;AAAA;;AACV,aAAO,wCAAK8F,QAAL,mBAAmB,UAAAE,IAAI;AAAA,eAAIhG,IAAI,KAAKgG,IAAI,CAAChG,IAAlB;AAAA,OAAvB,CAAP;AACD;;;WAED,gBAAQA,IAAR,EAAc;AAAA;;AACZ,aAAO,0CAAK8F,QAAL,mBAAqB,UAAAE,IAAI;AAAA,eAAIhG,IAAI,KAAKgG,IAAI,CAAChG,IAAlB;AAAA,OAAzB,CAAP;AACD;;;WAED,cAAMA,IAAN,EAAY;AAAA;;AACV,aAAO,kGAAYA,IAAZ,oBAA4B,CAA5B,CAAP;AACD;;;WAED,gBAAQ+F,KAAR,EAAe;AAAA;;AACb,aAAO,wBAAAA,KAAK,MAAL,CAAAA,KAAK,EAAQ,UAACO,GAAD,EAAMtG,IAAN;AAAA,eAAesG,GAAG,CAACtE,MAAJ,GAAasE,GAAb,GAAmB,wBAAA,MAAI,MAAJ,CAAA,MAAI,EAAQtG,IAAR,CAAtC;AAAA,OAAR,EAA6D,EAA7D,CAAZ;AACD;;;WAED,iBAAS8F,QAAT,EAAmB;AACjB,aAAOlG,IAAI,CAACiH,KAAL,CAAW,yBAAAf,QAAQ,MAAR,CAAAA,QAAQ,EAAS;AAAA,YAAGpG,KAAH,UAAGA,KAAH;AAAA,eAAeA,KAAf;AAAA,OAAT,CAAnB,CAAP;AACD;;;WAED,cAAaoH,KAAb,EAAoBjB,KAApB,EAA2B;AACzB,UAAI,eAAciB,KAAd,CAAJ,EAA0B;AACxB,eAAO,qBAAAA,KAAK,MAAL,CAAAA,KAAK,EAAK,UAAAhC,IAAI;AAAA,iBAAI,IAAI0B,IAAJ,CAAS1B,IAAT,EAAee,KAAf,CAAJ;AAAA,SAAT,CAAZ;AACD;;AAED,aAAO,CAAC,IAAIW,IAAJ,CAASM,KAAT,EAAgBjB,KAAhB,CAAD,CAAP;AACD;;;;;;IC3FUkB;AAEX,iBAAazI,MAAb,EAAqB;AAAA;;AACnB,SAAK6F,MAAL,CAAY7F,MAAZ;AACD;;;;WAED,gBAAQ;AACN,UAAI,CAAC,KAAK0I,MAAV,EAAkB,OAAO,IAAP;AAElB,WAAKnB,KAAL,GAAa,IAAID,QAAJ,CAAa;AACxBtH,QAAAA,MAAM,EAAE,KAAKiE,IADW;AAExBQ,QAAAA,IAAI,EAAE,cAAAiD,IAAI;AAAA,iDACLA,IADK;AAERtG,YAAAA,KAAK,EAAEE,IAAI,CAACiB,GAAL,CAASmF,IAAI,CAAChG,IAAd,EAAoBgG,IAAI,CAACrH,KAAzB;AAFC;AAAA;AAFc,OAAb,CAAb;AAQA,WAAKmI,KAAL,GAAaN,IAAI,CAACS,IAAL,CAAU,KAAK1E,IAAL,CAAUuE,KAApB,EAA2B,KAAKjB,KAAhC,CAAb;AACA,WAAKb,SAAL,GAAiB,IAAIf,SAAJ,CAAc,KAAK1B,IAAnB,CAAjB;AACD;;;WAED,gBAAQjE,MAAR,EAAgB;AACd,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKiE,IAAL,GAAYlE,OAAO,CAACC,MAAD,CAAnB;AAEA,WAAK4F,IAAL;AAEA,aAAO,IAAP;AACD;;;SAED,eAAe;AACb,aAAO,KAAK3B,IAAL,CAAU2E,OAAjB;AACD;;;SAED,eAAe;AACb,aAAO,KAAK3E,IAAL,CAAUgC,OAAjB;AACD;;;SAED,eAAa;AACX,aAAO,KAAKhC,IAAL,CAAU8B,KAAjB;AACD;;;SAED,eAAa;AACX,aAAO,KAAK6C,OAAL,CAAaC,KAApB;AACD;;;SAED,eAAa;AACX,aAAO,KAAKD,OAAL,CAAaE,KAApB;AACD;;;SAED,eAAgB;AACd,aAAO,KAAKvB,KAAL,CAAWhF,GAAlB;AACD;;;SAED,eAAa;AAAA;;AACX,aAAOjB,IAAI,CAACiH,KAAL,CACL,2CAAKC,KAAL,mBAAmB,UAAAhC,IAAI;AAAA;;AAAA,eACrB,sCAAAA,IAAI,CAACgB,QAAL,mBAAsB;AAAA,cAAGpG,KAAH,UAAGA,KAAH;AAAA,iBAAeA,KAAf;AAAA,SAAtB,CADqB;AAAA,OAAvB,CADK,CAAP;AAKD;;;SAED,eAAe;AAAA;;AACb,aAAO,yCAAKoH,KAAL,mBAAiB,UAAAhC,IAAI;AAAA,eAAIA,IAAI,CAAC8B,OAAT;AAAA,OAArB,CAAP;AACD;;;SAED,eAAY;AACV,aAAO,KAAKvC,KAAL,CAAWS,IAAX,CAAgBL,IAAvB;AACD;;;SAED,eAAgB;AACd,aAAO,KAAKJ,KAAL,CAAWe,IAAX,CAAgBX,IAAvB;AACD;;;SAED,eAAc;AACZ,aAAO,CAAC,KAAKlC,IAAL,CAAU8E,IAAlB;AACD;;;WAED,YAAI7C,QAAJ,EAA2B;AAAA,UAAbrC,EAAa,uEAAR,MAAQ;AACzB,UAAMmF,MAAM,GAAG,KAAKtC,SAAL,CAAeuC,EAAf,CAAkB/C,QAAlB,EAA4BrC,EAA5B,CAAf;AAEA,aAAO;AACL2C,QAAAA,IAAI,EAAE,KAAKgC,KAAL,CAAWQ,MAAM,CAACxC,IAAlB,CADD;AAELC,QAAAA,KAAK,EAAE,KAAKc,KAAL,CAAWc,OAAX,CAAmBW,MAAM,CAACvC,KAA1B,CAFF;AAGLH,QAAAA,IAAI,EAAE,KAAKiB,KAAL,CAAWc,OAAX,CAAmBW,MAAM,CAAC1C,IAA1B,CAHD;AAILC,QAAAA,IAAI,EAAE,KAAKgB,KAAL,CAAWc,OAAX,CAAmBW,MAAM,CAACzC,IAA1B;AAJD,OAAP;AAMD;;;WAED,cAAM/B,KAAN,EAAa;AACX,UAAMwE,MAAM,GAAG,KAAKtC,SAAL,CAAevC,MAAf,CAAsBK,KAAtB,EAA6B;AAAEvB,QAAAA,GAAG,EAAE,KAAKuF,KAAL,CAAW9E;AAAlB,OAA7B,CAAf;AAEA,aAAO,KAAK8E,KAAL,CAAWQ,MAAX,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;"}