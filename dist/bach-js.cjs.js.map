{"version":3,"file":"bach-js.cjs.js","sources":["../src/validate.js","../src/data.js","../src/note.js","../src/math.js","../node_modules/segu/dist/segu.esm.js","../src/durations.js","../src/elements.js","../src/beats.js","../src/music.js"],"sourcesContent":["import schema from 'bach-json-schema'\nimport Ajv from 'ajv'\n\nconst ajv = new Ajv({ strictTuples: false, code: { es5: true }, unicodeRegExp: false })\n\nexport const validate = ajv.compile(JSON.parse(JSON.stringify(schema)))\n\nexport const valid = bach => {\n  if (!validate(bach)) {\n    const message = 'Invalid Bach.JSON source data'\n    const pretty = json => JSON.stringify(json, null, 2)\n\n    console.error(message, pretty(bach))\n    console.error(pretty(validate.errors))\n\n    throw TypeError(`Invalid Bach.JSON source data`)\n  }\n\n  return bach\n}\n\nexport default validate\n","import bach from 'bach-cljs'\nimport { Note } from './note'\nimport { valid } from './validate'\nimport {\n  scale as teoriaScale,\n  chord as teoriaChord,\n} from 'teoria'\n\n/**\n * Either \"composes\" raw bach data into bach.json or, when provided an object, validates its structure as bach.json.\n * Given a string, automatically upgrades source to v3 (simple replacement of !play with play!).\n * Main entry point for integrating with core bach ClojureScript library.\n */\nexport const compose = (source, strict = true) => {\n  if (typeof source === 'string') {\n    const upgraded = source.replace(/!play/i, 'play!')\n\n    return bach.compose(upgraded)\n  }\n\n  if (typeof source === 'object') {\n    return strict ? valid(source) : source\n  }\n\n  throw TypeError(`Unsupported Bach.JSON data type (${typeof source}). Must be a bach.json object or raw bach string.`)\n}\n\nexport const compile = (source, strict = true) => {\n  const data = compose(source, strict)\n\n  return JSON.parse(JSON.stringify(data))\n}\n\nexport function scaleify (value) {\n  if (typeof value === 'string') {\n    const [tonic, type] = value.split(' ')\n\n    return teoriaScale(tonic, type.toLowerCase())\n  } else if (typeof value === 'object') {\n    return value\n  }\n\n  throw TypeError(`Unknown scale type (${typeof value}): ${value}`)\n}\n\nexport function chordify (value) {\n  if (typeof value === 'string') {\n    return teoriaChord(value)\n  } else if (typeof value === 'object') {\n    return value\n  }\n\n  throw TypeError(`Unknown chord type (${typeof value}): ${value}`)\n}\n\nexport function scaleToString (scale) {\n  return `${scale.tonic.toString().slice(0,2)} ${scale.name}`\n}\n\nexport function notesInChord (value) {\n  return chordify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesInScale (value) {\n  return scaleify(value)\n    .notes()\n    .map(note => Note.valueOf(note))\n}\n\nexport function notesIn (kind, value) {\n  const notes = notesOf[kind]\n\n  if (notes) {\n    return notes(value)\n  }\n\n  return []\n}\n\n// TODO: Allow custom note resolvers to be registered globally or locally so people can easily define their own semantics\n//  - Could call this `itemsOf` to be more generic and flexible\nexport const notesOf = {\n  note:  value => [value],\n  chord: value => notesInChord(value),\n  scale: value => notesInScale(value),\n  penta: value => notesInScale(value)\n}\n\n// TODO: Note.valueOf\nexport function notesIntersect (left, right) {\n return left.filter(note => right.includes(note))\n}\n","import { note as teoriaNote, Note as TeoriaNote } from 'teoria'\nimport { notesIn } from './data'\n\n// TODO: Replce with individual functions and remove class, no longer necessary\n// TODO: Remove cyclic reference between data module by bringing in all note related functions.\nexport class Note {\n\n  static parse (value) {\n    if (typeof value === 'string') {\n      return teoriaNote(value)\n    } else if (typeof value === 'object' || value instanceof TeoriaNote) {\n      return value\n    }\n\n    throw TypeError(`Unknown note type (${typeof value}): ${value}`)\n  }\n\n  static all (kind, note) {\n    try {\n      return notesIn(kind, note)\n    } catch (e) {\n      return []\n    }\n  }\n\n  static hash (note) {\n    return Note.parse(note).chroma()\n  }\n\n  static pitchOf (note) {\n    return Note.valueOf(note)\n  }\n\n  // TODO: Consider using chroma instead\n  // TODO: Use this in nek, and anywhere else this same logic might be used\n  static valueOf (note) {\n    return Note.parse(note)\n      .scientific()\n      // .toLowerCase()\n      // TODO: Centralize! Replace everywhere in bach-sheet, nek, etc.\n      .replace(/[0-9]+$/, '')\n  }\n\n  static valuesOf (notes) {\n    return notes.map(Note.valueOf)\n  }\n\n  static generalize (note) {\n    return teoriaNote(Note.valueOf(note))\n  }\n\n  static unite (notes = []) {\n    return notes.reduce((all, note) => {\n      const value = Note.valueOf(note)\n      const has = Note.includes(all, value)\n\n      return !has ? all.concat(value) : all\n    }, [])\n  }\n\n  static includes (notes = [], note) {\n    return notes.some(other => Note.equals(other, note))\n  }\n\n  static equals (left, right) {\n    return Note.hash(left) == Note.hash(right)\n  }\n\n}\n","/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} a\n * @param {Number} b\n * @returns {Number}\n */\nexport function gcd (a, b) {\n  if (b == 0) {\n    return a\n  }\n\n  return gcd(b, a % b)\n}\n\n/**\n * Modifies a value so that it is always between the provided min and max\n *\n * @param {Number} value\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nexport function clamp (value, min = 0, max = 1) {\n  return Math.min(max, Math.max(min, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nexport function invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nexport function steps (ratio, all) {\n  ratio %= 1\n\n  if (ratio < 0) ratio += 1\n\n  return all[Math.floor(ratio * all.length)]\n}\n","class Lens {\n\n  constructor ({\n    unit = 1,\n    is = 1,\n    as = 1,\n    min = 0,\n    max = 1,\n    grid = 1,\n    origin = 0\n  } = {}) {\n    this.data = { unit, is, as, min, max, grid, origin };\n    // Would improve flexibility by wrapping all getters in Lens with this, allowing Units and Lens to use the same normalization function\n    // this.normalize = normalize || Units.normalize\n  }\n\n  get unit () {\n    return this.data.unit || this.data.is || 1\n  }\n\n  get is () {\n    return this.data.is || this.unit\n  }\n\n  get as () {\n    return this.data.as || this.unit\n  }\n\n  get min () {\n    return this.data.min || 0\n  }\n\n  get max () {\n    return this.data.max || Number.MAX_SAFE_INTEGER\n  }\n\n  get grid () {\n    return this.data.grid || 1\n  }\n\n  get origin () {\n    return this.data.origin || 0\n  }\n\n  use (data) {\n    return Object.assign({}, this.data, data)\n  }\n\n  assign (data) {\n    this.data = this.use(data);\n\n    return this\n  }\n\n}\n\n/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction gcd (x, y) {\n  return y === 0 ? x : gcd(y, x % y)\n}\n\n/**\n * Modifies a value so that it is always between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction clamp (value, x = 0, y = 1) {\n  return Math.min(y, Math.max(x, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nfunction lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nfunction invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Cycles a value around an range (from x to y).\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n*/\nfunction cyclic (value, x, y) {\n  return (value >= x ? value : value + y) % y\n}\n\n/**\n * Projects a value given a source domain (from) to a target domain (to).\n * Domains are provided as range tuples ([min, max]).\n *\n * @param {Number} value\n * @param {Array<Number>} from\n * @param {Array<Number>} to\n * @returns {Number}\n */\nfunction project (value, from = [0, 0], to = [0, 0]) {\n  return (value - from[0]) / (from[1] - from[0]) * (to[1] - to[0]) + to[0]\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nfunction steps (ratio, all) {\n  ratio %= 1;\n\n  if (ratio < 0) ratio += 1;\n\n  return all[Math.floor(ratio * all.length)]\n}\n\n// TODO: Support calc method for allowing conversion of units via string (like CSS):\n\nclass Units {\n\n  constructor ({\n    map = {},\n    lens = {}\n  } = {}) {\n    this.map = map;\n    this.lens = new Lens(lens);\n  }\n\n  normalize (unit) {\n    if (typeof unit === 'number') {\n      return unit\n    }\n\n    if (typeof unit === 'string') {\n      const value = this.map[unit] || 1;\n\n      return typeof value === 'function' ? value(unit, this) : Number(value)\n    }\n\n    return 1\n  }\n\n  scope (value = 1, lens = this.lens) {\n    const { is, as, min, max, origin } = this.lens.use(lens);\n    const index = this.cast(value - origin, { is, as });\n    const head = this.cast(min || 0, { is, as });\n    const tail = this.cast(max || value, { is, as });\n\n    return { value, index, head, tail }\n  }\n\n  // TODO: Allow `is` and `as` to be provided as mapping functions\n  cast (value = 1, { is = this.lens.unit, as = this.lens.unit } = {}) {\n    return this.normalize(value) / (this.normalize(as) / this.normalize(is))\n  }\n\n  snap (value, lens = this.lens) {\n    const { index } = this.scope(value, lens);\n    const unit = this.normalize(lens.as || lens.unit);\n    const calc = typeof lens.calc === 'function' ? lens.calc : Math.floor;\n\n    return calc(index) * unit\n  }\n\n  clamp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return clamp(index, head, tail)\n  }\n\n  cyclic (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return cyclic(index, head, tail)\n  }\n\n  lerp (ratio, lens) {\n    const { head, tail } = this.scope(0, lens);\n\n    return lerp(ratio, head, tail)\n  }\n\n  invlerp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens);\n\n    return invlerp(index, head, tail)\n  }\n\n  delta (value, lens) {\n    const { index, head } = this.scope(value, lens);\n\n    return index - head\n  }\n\n  range (value, lens) {\n    const { head, tail } = this.scope(value, lens);\n\n    return tail - head\n  }\n\n  progress (value, lens) {\n    const delta = this.delta(value, lens);\n    const range = this.range(value, lens);\n\n    return delta / range\n  }\n\n  fold (value, lens = this.lens) {\n    const grid = lens.grid || 1;\n    const basis = gcd(value, grid);\n    const size = this.clamp(value, lens);\n    const container = this.snap(size, { as: basis });\n    const ratio = Math.max(1, Math.min(value / basis, grid));\n    const min = value >= grid ? grid : basis;\n\n    return Math.max(min, this.snap(container, { as: ratio }))\n  }\n\n  // Changes the base unit to the provided key by recalculating and replacing the unit map pairs.\n  // TODO: Test, and ensure that the base unit is equal to 1 (or, could just use scale)\n  rebase (unit = this.lens.unit) {\n    if (unit === this.lens.unit) return this\n\n    const map = Object.entries(this.map)\n      .reduce((map, [key, value]) => Object.assign(map, {\n        [key]: this.cast(value, { is: this.lens.is, as: unit })\n      }, { [unit]: 1 }));\n\n    this.map = map;\n    this.lens.unit = unit;\n\n    return this\n  }\n\n  clone (props) {\n    const map = Object.assign({}, this.map, props.map);\n    const lens = Object.assign({}, this.lens, props.lens);\n\n    return new Units({ map, lens })\n  }\n\n  static use (props) {\n    return new Units(props)\n  }\n}\n\nconst units = props => new Units(props);\n\nexport { Units, clamp, cyclic, gcd, invlerp, lerp, project, steps, units };\n//# sourceMappingURL=segu.esm.js.map\n","import { compile, compose } from './data'\nimport { gcd, clamp, lerp } from './math'\nimport { Units } from 'segu'\n\n/**\n * Provides essential duration values and calculations of a bach track.\n * Enables trivial conversions between any duration unit via cast (based\n * on milliseconds) and unitize (based on steps, bach's iteration unit).\n */\nexport class Durations extends Units {\n\n  constructor (source, lens) {\n    super({ map: null, lens })\n\n    this.source = source\n    this.data = compile(source)\n\n    this.init()\n  }\n\n  init () {\n    this.map = Durations.map(this.data)\n\n    this.lens.assign({ unit: 'step', max: this.total })\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get steps () {\n    return this.data.steps\n  }\n\n  get bar () {\n    return this.units.bar\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get min () {\n    return this.metrics.min\n  }\n\n  get max () {\n    return this.metrics.max\n  }\n\n  get total () {\n    return this.metrics.total\n  }\n\n  at (duration, is = 'step') {\n    const step = Math.floor(this.cast(duration, { is, as: 'step' }))\n    const index = this.cyclic(step)\n    const state = this.steps[index]\n    const [context, play, stop] = state || []\n\n    return {\n      beat: context[0],\n      elems: context.slice(1),\n      play,\n      stop,\n      index\n    }\n  }\n\n  metronize (duration, { is = 'ms', as = 'pulse' } = {}) {\n    const index = this.cast(duration, { is, as })\n    const bar = this.cast(this.bar.step, { as })\n\n    return Math.floor(index % bar)\n  }\n\n  // TODO: Either replace or improve via inspiration with this:\n  // @see: https://tonejs.github.io/docs/r13/Time#quantize\n  rhythmic (duration, {\n    is = 'ms',\n    units = ['8n', '4n'],\n    calc = 'floor',\n    size = 'min'\n  } = {}) {\n    const durations = units\n      .map(unit => {\n        const value = this.cast(duration, { is, as: unit })\n        const result = Math[calc](value)\n\n        return this.cast(result, { is: unit, as: is })\n      })\n      .sort((a, b) => Math.abs(duration - a) - Math.abs(duration - b))\n\n    return Math[size](...durations)\n  }\n\n  static map (source) {\n    const data = compose(source, false)\n    const { beat, step, pulse, time, bar } = data.units\n\n    return {\n      step: 1,\n      pulse: 1 / (beat.step / beat.pulse),\n      bar: bar.step,\n      ms: 1 / time.step,\n      second: (1 / time.step) * 1000,\n      's': step,\n      'p': pulse,\n      'm': bar.step,\n      '2n': bar.step / 2,\n      '4n': bar.step / 4,\n      '8n': bar.step / 8,\n      '16n': bar.step / 16,\n      '32n': bar.step / 32,\n      '64n': bar.step / 64,\n      '4up': bar.step - (bar.step / 4),\n      '8up': bar.step - (bar.step / 8),\n      '16up': bar.step - (bar.step / 16),\n      '32up': bar.step - (bar.step / 32),\n      '64up': bar.step - (bar.step / 64)\n    }\n  }\n\n}\n","import { elementize } from 'bach-cljs'\nimport { note as teoriaNote } from 'teoria'\n\nimport { compose } from './data'\nimport { Note } from './note'\n\n/**\n * Represents a single and unique playable element.\n * Uniqueness and equality are determined by `id`.\n */\nexport class Element {\n\n  constructor (data) {\n    this.data = data\n  }\n\n  get id () {\n    return `${this.data.kind}.${this.data.id}`\n  }\n\n  get uid () {\n    return Element.uid(this.id)\n  }\n\n  get value () {\n    return this.data.value\n  }\n\n  get props () {\n    return this.data.props || []\n  }\n\n  get kind () {\n    return this.data.kind.toLowerCase()\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get notes () {\n    return Note.all(this.kind, this.value)\n  }\n\n  get musical () {\n    return MUSICAL_ELEMENTS.includes(this.kind)\n  }\n\n  static uid (id) {\n    return id.split('.').pop()\n  }\n\n}\n\n/**\n * Provides a centralized and shareable store of parsed elements in a bach track.\n */\nexport class Elements {\n\n  constructor ({ source, store, cast } = {}) {\n    this.source = compose(source)\n    this.cast = cast || (_ => _)\n    this.data = store || Elements.cast(this.source.elements, cast)\n  }\n\n  get all () {\n    return this.kinds.flatMap(kind => this.every(kind))\n  }\n\n  get kinds () {\n    return Object.keys(this.data)\n  }\n\n  get values () {\n    return this.all.map(elem => elem.value)\n  }\n\n  get ids () {\n    return this.all.map(elem => elem.id)\n  }\n\n  get (id) {\n    const parts = typeof id === 'string' ? id.split('.') : []\n\n    if (parts.length === 2) {\n      const [kind, uid] = parts\n      const elem = this.data[kind][uid]\n\n      return elem ? { ...elem, id: uid, kind } : null\n    }\n\n    throw TypeError('Element id must be a string in the format of \"kind.hash\"')\n  }\n\n  one (kind) {\n    return this.every(kind)[0]\n  }\n\n  every (kind) {\n    return Object.values(this.data[kind]).map(elem => new Element(elem))\n  }\n\n  resolve (elem) {\n    // FIXME: Use json-schema validator here instead to support cross-context typing.\n    // if (elem instanceof Element) return elem\n    if (typeof elem === 'object') return elem\n    if (typeof elem === 'string') return this.get(elem)\n    if (Array.isArray(elem)) return elem.map(el => this.get(el))\n    if (elem == null) return null\n\n    throw TypeError('Failed to resolve element due to unsupported data type')\n  }\n\n  // TODO: Rename to `insert`\n  register ({ kind, value, props }) {\n    if (!kind || typeof kind !== 'string') throw TypeError('kind must be a non-empty string')\n    if (value == null) throw TypeError('value must be defined and non-null')\n\n    const elem = elementize(kind, [value, ...props])\n    const uid = Element.uid(elem.id)\n    const record = this.cast({ ...elem, id: uid, kind })\n\n    this.data[kind] = this.data[kind] || {}\n    this.data[kind][uid] = record\n\n    this.source.elements = this.data\n\n    return new Element(record)\n  }\n\n  static cast (elements, as = _ => _) {\n    if (!elements) return null\n\n    // TODO: Validate element shape with JSON Schema\n    return Object.entries(elements)\n      .reduce((acc, [kind, ids]) => {\n        const elems = Object.entries(ids)\n          .reduce((acc, [id, elem]) => ({\n            ...acc,\n            [id]: as({ id, kind, ...elem })\n          }), {})\n\n        return { ...acc, [kind]: elems }\n      }, {})\n  }\n\n}\n\n// TODO: Hoist out to Music, leaky abstraction\nexport const MUSICAL_ELEMENTS = ['note', 'chord', 'scale', ' penta'] // triad\n","import { Element } from './elements'\nimport { Note } from './note'\n\n/**\n * Represents a single beat in a track.\n *\n * Beats are represented as a tuple and may contain multiple elements\n *\n * duration -> items -> elements\n */\nexport class Beat {\n\n  constructor (data, store) {\n    this.data = data\n    this.store = store\n  }\n\n  get id () {\n    return this.data.id\n  }\n\n  get index () {\n    return this.data.index\n  }\n\n  get duration () {\n    return this.data.duration\n  }\n\n  get items () {\n    return this.data.items.map(item => ({\n      ...item,\n      elements: item.elements.map(elem => this.store.resolve(elem))\n    }))\n  }\n\n  get elements () {\n    return this.data.items.flatMap(({ elements }) =>\n      elements.map(elem => this.store.resolve(elem))\n    )\n  }\n\n  get kinds () {\n    return this.all(({ kind }) => kind)\n  }\n\n  get values () {\n    return this.all(({ value }) => value)\n  }\n\n  get notes () {\n    return this.notesOf(this.elements)\n  }\n\n  // Provides map of elements in a beat grouped by kind.\n  // WARN: Doesn't support multiple elements of the same kind.\n  get parts () {\n    return this.elements.reduce((parts, elem) => ({\n     ...parts,\n      [elem.kind]: elem\n    }), {})\n  }\n\n  get musical () {\n    return this.elements.every(elem => elem.musical)\n  }\n\n  all (cast = _ => _) {\n    return [...new Set(this.elements.map(cast))]\n  }\n\n  find (kind) {\n    return this.elements.find(elem => kind === elem.kind)\n  }\n\n  filter (kind) {\n    return this.elements.filter(elem => kind === elem.kind)\n  }\n\n  last (kind) {\n    return this.filter(kind).reverse()[0]\n  }\n\n  either (kinds) {\n    return kinds.reduce((acc, kind) => acc.length ? acc : this.filter(kind), [])\n  }\n\n  notesOf (elements) {\n    return Note.unite(elements.flatMap(({ notes }) => notes))\n  }\n\n  static from (beats, store) {\n    if (Array.isArray(beats)) {\n      return beats.map(beat => new Beat(beat, store))\n    }\n\n    return [new Beat(beats, store)]\n  }\n\n}\n","import { Note } from './note'\nimport { Durations } from './durations'\nimport { Element, Elements, MUSICAL_ELEMENTS } from './elements'\nimport { Beat } from './beats'\nimport { compile, notesIn } from './data'\n\nexport class Music {\n\n  constructor (source) {\n    this.assign(source)\n  }\n\n  init () {\n    if (!this.parses) return null\n\n    this.store = new Elements({\n      source: this.data,\n      cast: elem => ({\n        ...elem,\n        notes: Note.all(elem.kind, elem.value)\n      })\n    })\n\n    this.beats = Beat.from(this.data.beats, this.store)\n    this.durations = new Durations(this.data)\n  }\n\n  assign (source) {\n    this.source = source\n    this.data = compile(source)\n\n    this.init()\n\n    return this\n  }\n\n  get headers () {\n    return this.data.headers\n  }\n\n  get metrics () {\n    return this.data.metrics\n  }\n\n  get units () {\n    return this.data.units\n  }\n\n  get meter () {\n    return this.headers.meter\n  }\n\n  get tempo () {\n    return this.headers.tempo\n  }\n\n  get elements () {\n    return this.store.all\n  }\n\n  get notes () {\n    return Note.unite(\n      this.beats.flatMap(beat =>\n        beat.elements.flatMap(({ notes }) => notes)\n      )\n    )\n  }\n\n  get musical () {\n    return this.beats.every(beat => beat.musical)\n  }\n\n  get step () {\n    return this.units.beat.step\n  }\n\n  get interval () {\n    return this.units.time.step\n  }\n\n  get parses () {\n    return !this.data.fail\n  }\n\n  at (duration, is = 'step') {\n    const cursor = this.durations.at(duration, is)\n\n    return {\n      beat: this.beats[cursor.beat],\n      elems: this.store.resolve(cursor.elems),\n      play: this.store.resolve(cursor.play),\n      stop: this.store.resolve(cursor.stop)\n    }\n  }\n\n  beat (index) {\n    const cursor = this.durations.cyclic(index, { max: this.beats.length })\n\n    return this.beats[cursor]\n  }\n\n}\n"],"names":["validate","strictTuples","code","es5","unicodeRegExp","compile","JSON","parse","schema","valid","bach","message","pretty","json","console","error","errors","TypeError","compose","source","strict","upgraded","replace","_typeof","concat","h","data","scaleify","value","_context","_e$split","split","_e$split2","_slicedToArray","tonic","type","teoriaScale","toLowerCase","_concatInstanceProperty","chordify","teoriaChord","notesInChord","_context3","notes","note","Note","valueOf","notesInScale","_context4","map","notesIn","kind","notesOf","chord","scale","penta","static","_context5","teoriaNote","TeoriaNote","e","chroma","scientific","arguments","length","undefined","all","includes","other","equals","left","right","hash","y","clamp","min","max","Math","Lens","constructor","this","unit","_ref$unit","_ref$is","_ref","is","as","_ref$as","_ref$min","_ref$max","_ref$grid","grid","origin","_ref$origin","_classCallCheck","x","a","use","Object","assign","gcd","Units","_ref2$map","_ref2$lens","_ref2","lens","w","normalize","Number","scope","_this$lens$use","index","cast","head","tail","_ref3","_ref3$is","_ref3$as","snap","_this$scope","calc","floor","_this$scope2","cyclic","_this$scope3","lerp","ratio","_this$scope4","invlerp","_this$scope5","delta","_this$scope6","range","_this$scope7","progress","fold","basis","size","container","rebase","key","clone","props","_mapInstanceProperty","Durations","super","init","_this2","total","units","steps","bar","metrics","at","duration","step","state","context","_ref7","_ref6","play","stop","beat","elems","slice","r","metronize","_ref8$as","s","rhythmic","_ref9$units","_ref9$calc","_ref9$size","_ref9","durations","result","sort","b","abs","pulse","time","ms","second","p","m","M","Element","id","_context8","uid","musical","MUSICAL_ELEMENTS","pop","k","Elements","_ref10","store","_","elements","kinds","every","values","_context10","elem","ids","_context11","get","parts","_e4","_objectSpread","one","_context12","resolve","_this5","Array","el","register","elementize","record","t","reduce","acc","_ref15","j","Beat","items","_context17","_this6","item","flatMap","_ref16","_ref17","_ref18","_defineProperty","_context22","_toConsumableArray","_Set","find","_context23","filter","_context24","last","either","unite","_ref19","beats","S","parses","from","headers","meter","tempo","_context27","_ref20","interval","fail","cursor","_context30","toString","name"],"mappings":"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"}